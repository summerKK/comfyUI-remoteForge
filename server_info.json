{
  "KSampler": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The model used for denoising the input latent."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "The number of steps used in the denoising process."
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01,
            "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "tooltip": "The scheduler controls how noise is gradually removed to form the image."
          }
        ],
        "positive": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to include in the image."
          }
        ],
        "negative": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to exclude from the image."
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "The latent image to denoise."
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler",
    "display_name": "KSampler",
    "description": "Uses the provided model, positive and negative conditioning to denoise the latent image.",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false,
    "output_tooltips": [
      "The denoised latent."
    ]
  },
  "CheckpointLoaderSimple": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderSimple",
    "display_name": "Load Checkpoint",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "CLIPTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncode",
    "display_name": "CLIP Text Encode (Prompt)",
    "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "CLIPSetLastLayer": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "stop_at_clip_layer": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "stop_at_clip_layer"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPSetLastLayer",
    "display_name": "CLIP Set Last Layer",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "VAEDecode": {
    "input": {
      "required": {
        "samples": [
          "LATENT",
          {
            "tooltip": "The latent to be decoded."
          }
        ],
        "vae": [
          "VAE",
          {
            "tooltip": "The VAE model used for decoding the latent."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecode",
    "display_name": "VAE Decode",
    "description": "Decodes latent images back into pixel space images.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The decoded image."
    ]
  },
  "VAEEncode": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncode",
    "display_name": "VAE Encode",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "VAEEncodeForInpaint": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "mask": [
          "MASK"
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "mask",
        "grow_mask_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeForInpaint",
    "display_name": "VAE Encode (for Inpainting)",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "VAELoader": {
    "input": {
      "required": {
        "vae_name": [
          [
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAELoader",
    "display_name": "Load VAE",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The width of the latent images in pixels."
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The height of the latent images in pixels."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentImage",
    "display_name": "Empty Latent Image",
    "description": "Create a new batch of empty latent images to be denoised via sampling.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The empty latent image batch."
    ]
  },
  "LatentUpscale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscale",
    "display_name": "Upscale Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentUpscaleBy": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleBy",
    "display_name": "Upscale Latent By",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentFromBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 63
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFromBatch",
    "display_name": "Latent From Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "RepeatLatentBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "amount"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RepeatLatentBatch",
    "display_name": "Repeat Latent Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "SaveImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImage",
    "display_name": "Save Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "PreviewImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewImage",
    "display_name": "Preview Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "LoadImage": {
    "input": {
      "required": {
        "image": [
          [
            "ComfyUI_00168_.png",
            "ComfyUI_00180_.png",
            "ComfyUI_temp_ktysl_00001_-(1).png",
            "ComfyUI_temp_ktysl_00001_.png",
            "example.png",
            "test.png"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImage",
    "display_name": "Load Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "LoadImageMask": {
    "input": {
      "required": {
        "image": [
          [
            "ComfyUI_00168_.png",
            "ComfyUI_00180_.png",
            "ComfyUI_temp_ktysl_00001_-(1).png",
            "ComfyUI_temp_ktysl_00001_.png",
            "example.png",
            "test.png"
          ],
          {
            "image_upload": true
          }
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "LoadImageMask",
    "display_name": "Load Image (as Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "mask",
    "output_node": false
  },
  "ImageScale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScale",
    "display_name": "Upscale Image",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageScaleBy": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleBy",
    "display_name": "Upscale Image By",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageInvert": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageInvert",
    "display_name": "Invert Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImageBatch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatch",
    "display_name": "Batch Images",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 40,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaint",
    "display_name": "Pad Image for Outpainting",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "EmptyImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "EmptyImage",
    "display_name": "EmptyImage",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ConditioningAverage": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ],
        "conditioning_to_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from",
        "conditioning_to_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningAverage",
    "display_name": "ConditioningAverage",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningCombine": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombine",
    "display_name": "Conditioning (Combine)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningConcat": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningConcat",
    "display_name": "Conditioning (Concat)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetArea": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetArea",
    "display_name": "Conditioning (Set Area)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaPercentage": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentage",
    "display_name": "Conditioning (Set Area with Percentage)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaStrength": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaStrength",
    "display_name": "ConditioningSetAreaStrength",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetMask": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "mask",
        "strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetMask",
    "display_name": "Conditioning (Set Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "KSamplerAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerAdvanced",
    "display_name": "KSampler (Advanced)",
    "description": "",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false
  },
  "SetLatentNoiseMask": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "SetLatentNoiseMask",
    "display_name": "Set Latent Noise Mask",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "LatentComposite": {
    "input": {
      "required": {
        "samples_to": [
          "LATENT"
        ],
        "samples_from": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feather": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples_to",
        "samples_from",
        "x",
        "y",
        "feather"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentComposite",
    "display_name": "Latent Composite",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentBlend": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "blend_factor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBlend",
    "display_name": "Latent Blend",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "LatentRotate": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "rotation": [
          [
            "none",
            "90 degrees",
            "180 degrees",
            "270 degrees"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "rotation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentRotate",
    "display_name": "Rotate Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentFlip": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "flip_method": [
          [
            "x-axis: vertically",
            "y-axis: horizontally"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "flip_method"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFlip",
    "display_name": "Flip Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentCrop": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCrop",
    "display_name": "Crop Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "LoraLoader",
    "display_name": "Load LoRA",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CLIPLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "type": [
          [
            "stable_diffusion",
            "stable_cascade",
            "sd3",
            "stable_audio",
            "mochi",
            "ltxv",
            "pixart",
            "cosmos"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPLoader",
    "display_name": "Load CLIP",
    "description": "[Recipes]\n\nstable_diffusion: clip-l\nstable_cascade: clip-g\nsd3: t5 / clip-g / clip-l\nstable_audio: t5\nmochi: t5\ncosmos: old t5 xxl",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "UNETLoader": {
    "input": {
      "required": {
        "unet_name": [
          [
            "FLUX1/flux1-dev-fp8.safetensors",
            "flux1-dev-fp8.safetensors"
          ]
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "weight_dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNETLoader",
    "display_name": "Load Diffusion Model",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "DualCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "type": [
          [
            "sdxl",
            "sd3",
            "flux",
            "hunyuan_video"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "DualCLIPLoader",
    "display_name": "DualCLIPLoader",
    "description": "[Recipes]\n\nsdxl: clip-l, clip-g\nsd3: clip-l, clip-g / clip-l, t5 / clip-g, t5\nflux: clip-l, t5",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "CLIPVisionEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image": [
          "IMAGE"
        ],
        "crop": [
          [
            "center",
            "none"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image",
        "crop"
      ]
    },
    "output": [
      "CLIP_VISION_OUTPUT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION_OUTPUT"
    ],
    "name": "CLIPVisionEncode",
    "display_name": "CLIP Vision Encode",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "StyleModelApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "strength_type": [
          [
            "multiply",
            "attn_bias"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output",
        "strength",
        "strength_type"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApply",
    "display_name": "Apply Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/style_model",
    "output_node": false
  },
  "unCLIPConditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "clip_vision_output",
        "strength",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "unCLIPConditioning",
    "display_name": "unCLIPConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ControlNetApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ControlNetApply",
    "display_name": "Apply ControlNet (OLD)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "ControlNetApplyAdvanced": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "vae"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplyAdvanced",
    "display_name": "Apply ControlNet",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetLoader": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "1.5/control_v11p_sd15_canny_fp16.safetensors",
            "OpenPoseXL2.safetensors",
            "SD1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "SD1.5/control_v11p_sd15_canny_fp16.safetensors",
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_sd15_inpaint_depth_hand_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "diffusion_pytorch_model.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ControlNetLoader",
    "display_name": "Load ControlNet Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "DiffControlNetLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "control_net_name": [
          [
            "1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "1.5/control_v11p_sd15_canny_fp16.safetensors",
            "OpenPoseXL2.safetensors",
            "SD1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "SD1.5/control_v11p_sd15_canny_fp16.safetensors",
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_sd15_inpaint_depth_hand_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "diffusion_pytorch_model.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "DiffControlNetLoader",
    "display_name": "Load ControlNet Model (diff)",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "StyleModelLoader": {
    "input": {
      "required": {
        "style_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "style_model_name"
      ]
    },
    "output": [
      "STYLE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STYLE_MODEL"
    ],
    "name": "StyleModelLoader",
    "display_name": "Load Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "CLIPVisionLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIPVisionLoader",
    "display_name": "Load CLIP Vision",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "VAEDecodeTiled": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 32
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to decode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecodeTiled",
    "display_name": "VAE Decode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "VAEEncodeTiled": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeTiled",
    "display_name": "VAE Encode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "unCLIPCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "name": "unCLIPCheckpointLoader",
    "display_name": "unCLIPCheckpointLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENLoader": {
    "input": {
      "required": {
        "gligen_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "gligen_name"
      ]
    },
    "output": [
      "GLIGEN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GLIGEN"
    ],
    "name": "GLIGENLoader",
    "display_name": "GLIGENLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENTextBoxApply": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "clip",
        "gligen_textbox_model",
        "text",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "GLIGENTextBoxApply",
    "display_name": "GLIGENTextBoxApply",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/gligen",
    "output_node": false
  },
  "InpaintModelConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels",
        "mask",
        "noise_mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InpaintModelConditioning",
    "display_name": "InpaintModelConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "CheckpointLoader": {
    "input": {
      "required": {
        "config_name": [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ]
        ],
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoader",
    "display_name": "Load Checkpoint With Config (DEPRECATED)",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false,
    "deprecated": true
  },
  "DiffusersLoader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "DiffusersLoader",
    "display_name": "DiffusersLoader",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders/deprecated",
    "output_node": false
  },
  "LoadLatent": {
    "input": {
      "required": {
        "latent": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LoadLatent",
    "display_name": "LoadLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "SaveLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "latents/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveLatent",
    "display_name": "SaveLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": true
  },
  "ConditioningZeroOut": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningZeroOut",
    "display_name": "ConditioningZeroOut",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ConditioningSetTimestepRange": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "start",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetTimestepRange",
    "display_name": "ConditioningSetTimestepRange",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "LoraLoaderModelOnly": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "strength_model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LoraLoaderModelOnly",
    "display_name": "LoraLoaderModelOnly",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "LatentAdd": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentAdd",
    "display_name": "LatentAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentSubtract": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentSubtract",
    "display_name": "LatentSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentMultiply": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "multiplier"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentMultiply",
    "display_name": "LatentMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentInterpolate": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "ratio"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentInterpolate",
    "display_name": "LatentInterpolate",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentBatch": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatch",
    "display_name": "LatentBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/batch",
    "output_node": false
  },
  "LatentBatchSeedBehavior": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "seed_behavior": [
          [
            "random",
            "fixed"
          ],
          {
            "default": "fixed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "seed_behavior"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatchSeedBehavior",
    "display_name": "LatentBatchSeedBehavior",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentApplyOperation": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "operation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentApplyOperation",
    "display_name": "LatentApplyOperation",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentApplyOperationCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "operation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LatentApplyOperationCFG",
    "display_name": "LatentApplyOperationCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationTonemapReinhard": {
    "input": {
      "required": {
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "multiplier"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationTonemapReinhard",
    "display_name": "LatentOperationTonemapReinhard",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationSharpen": {
    "input": {
      "required": {
        "sharpen_radius": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationSharpen",
    "display_name": "LatentOperationSharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "HypernetworkLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "hypernetwork_name": [
          []
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hypernetwork_name",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HypernetworkLoader",
    "display_name": "HypernetworkLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_hypernetwork",
    "category": "loaders",
    "output_node": false
  },
  "UpscaleModelLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "UpscaleModelLoader",
    "display_name": "Load Upscale Model",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "loaders",
    "output_node": false
  },
  "ImageUpscaleWithModel": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModel",
    "display_name": "Upscale Image (using Model)",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageBlend": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blend_mode": [
          [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "difference"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "blend_factor",
        "blend_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageBlur": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "blur_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "blur_radius",
        "sigma"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlur",
    "display_name": "Image Blur",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageQuantize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "none",
            "floyd-steinberg",
            "bayer-2",
            "bayer-4",
            "bayer-8",
            "bayer-16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "dither"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageQuantize",
    "display_name": "Image Quantize",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageSharpen": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSharpen",
    "display_name": "Image Sharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageScaleToTotalPixels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "megapixels": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "megapixels"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleToTotalPixels",
    "display_name": "Scale Image to Total Pixels",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/upscaling",
    "output_node": false
  },
  "LatentCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "LATENT"
        ],
        "source": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCompositeMasked",
    "display_name": "LatentCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "latent",
    "output_node": false
  },
  "ImageCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeMasked",
    "display_name": "ImageCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "image",
    "output_node": false
  },
  "MaskToImage": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MaskToImage",
    "display_name": "Convert Mask to Image",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue",
            "alpha"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageToMask",
    "display_name": "Convert Image to Mask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageColorToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageColorToMask",
    "display_name": "ImageColorToMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "SolidMask": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SolidMask",
    "display_name": "SolidMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "InvertMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "InvertMask",
    "display_name": "InvertMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "CropMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CropMask",
    "display_name": "CropMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "MaskComposite": {
    "input": {
      "required": {
        "destination": [
          "MASK"
        ],
        "source": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "operation": [
          [
            "multiply",
            "add",
            "subtract",
            "and",
            "or",
            "xor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "operation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskComposite",
    "display_name": "MaskComposite",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "FeatherMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "left",
        "top",
        "right",
        "bottom"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "FeatherMask",
    "display_name": "FeatherMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "GrowMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "tapered_corners"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "GrowMask",
    "display_name": "GrowMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ThresholdMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "value": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "value"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ThresholdMask",
    "display_name": "ThresholdMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "PorterDuffImageComposite": {
    "input": {
      "required": {
        "source": [
          "IMAGE"
        ],
        "source_alpha": [
          "MASK"
        ],
        "destination": [
          "IMAGE"
        ],
        "destination_alpha": [
          "MASK"
        ],
        "mode": [
          [
            "ADD",
            "CLEAR",
            "DARKEN",
            "DST",
            "DST_ATOP",
            "DST_IN",
            "DST_OUT",
            "DST_OVER",
            "LIGHTEN",
            "MULTIPLY",
            "OVERLAY",
            "SCREEN",
            "SRC",
            "SRC_ATOP",
            "SRC_IN",
            "SRC_OUT",
            "SRC_OVER",
            "XOR"
          ],
          {
            "default": "DST"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "source_alpha",
        "destination",
        "destination_alpha",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "PorterDuffImageComposite",
    "display_name": "Porter-Duff Image Composite",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "SplitImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SplitImageWithAlpha",
    "display_name": "Split Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "JoinImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "alpha": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JoinImageWithAlpha",
    "display_name": "Join Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "RebatchLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RebatchLatents",
    "display_name": "Rebatch Latents",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "latent/batch",
    "output_node": false
  },
  "RebatchImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "batch_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RebatchImages",
    "display_name": "Rebatch Images",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "image/batch",
    "output_node": false
  },
  "ModelMergeSimple": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSimple",
    "display_name": "ModelMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeBlocks": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "input": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "input",
        "middle",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeBlocks",
    "display_name": "ModelMergeBlocks",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeSubtract": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSubtract",
    "display_name": "ModelMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeAdd": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAdd",
    "display_name": "ModelMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CheckpointSave",
    "display_name": "Save Checkpoint",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "CLIPMergeSimple": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "ratio"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSimple",
    "display_name": "CLIPMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeSubtract": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "multiplier"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSubtract",
    "display_name": "CLIPMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeAdd": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeAdd",
    "display_name": "CLIPMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPSave": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "clip/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "clip",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CLIPSave",
    "display_name": "CLIPSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "VAESave": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "vae/ComfyUI_vae"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VAESave",
    "display_name": "VAESave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ModelSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSave",
    "display_name": "ModelSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "TomePatchModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TomePatchModel",
    "display_name": "TomePatchModel",
    "description": "",
    "python_module": "comfy_extras.nodes_tomesd",
    "category": "model_patches/unet",
    "output_node": false
  },
  "CLIPTextEncodeSDXLRefiner": {
    "input": {
      "required": {
        "ascore": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "ascore",
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXLRefiner",
    "display_name": "CLIPTextEncodeSDXLRefiner",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeSDXL": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "text_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height",
        "text_g",
        "text_l"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL",
    "display_name": "CLIPTextEncodeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "Canny": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "low_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ],
        "high_threshold": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "low_threshold",
        "high_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Canny",
    "display_name": "Canny",
    "description": "",
    "python_module": "comfy_extras.nodes_canny",
    "category": "image/preprocessors",
    "output_node": false
  },
  "FreeU": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU",
    "display_name": "FreeU",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "FreeU_V2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.3,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.4,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU_V2",
    "display_name": "FreeU_V2",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "SamplerCustom": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "cfg",
        "positive",
        "negative",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustom",
    "display_name": "SamplerCustom",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "BasicScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scheduler",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BasicScheduler",
    "display_name": "BasicScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KarrasScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "KarrasScheduler",
    "display_name": "KarrasScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "ExponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "ExponentialScheduler",
    "display_name": "ExponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "PolyexponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "PolyexponentialScheduler",
    "display_name": "PolyexponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LaplaceScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "mu": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "mu",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LaplaceScheduler",
    "display_name": "LaplaceScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "VPScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "beta_d": [
          "FLOAT",
          {
            "default": 19.9,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_min": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eps_s": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "beta_d",
        "beta_min",
        "eps_s"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "VPScheduler",
    "display_name": "VPScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "BetaSamplingScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "alpha",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BetaSamplingScheduler",
    "display_name": "BetaSamplingScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SDTurboScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SDTurboScheduler",
    "display_name": "SDTurboScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KSamplerSelect": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "KSamplerSelect",
    "display_name": "KSamplerSelect",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestral",
    "display_name": "SamplerEulerAncestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestralCFGPP": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestralCFGPP",
    "display_name": "SamplerEulerAncestralCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerLMS": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLMS",
    "display_name": "SamplerLMS",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_3M_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_3M_SDE",
    "display_name": "SamplerDPMPP_3M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2M_SDE": {
    "input": {
      "required": {
        "solver_type": [
          [
            "midpoint",
            "heun"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "solver_type",
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2M_SDE",
    "display_name": "SamplerDPMPP_2M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "r": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "r",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_SDE",
    "display_name": "SamplerDPMPP_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2S_Ancestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2S_Ancestral",
    "display_name": "SamplerDPMPP_2S_Ancestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMAdaptative": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 3,
            "min": 2,
            "max": 3
          }
        ],
        "rtol": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "atol": [
          "FLOAT",
          {
            "default": 0.0078,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "h_init": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "pcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "icoeff": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "dcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "accept_safety": [
          "FLOAT",
          {
            "default": 0.81,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eta": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order",
        "rtol",
        "atol",
        "h_init",
        "pcoeff",
        "icoeff",
        "dcoeff",
        "accept_safety",
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMAdaptative",
    "display_name": "SamplerDPMAdaptative",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SplitSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "step"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmas",
    "display_name": "SplitSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SplitSigmasDenoise": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmasDenoise",
    "display_name": "SplitSigmasDenoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "FlipSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FlipSigmas",
    "display_name": "FlipSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SetFirstSigma": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 136.0,
            "min": 0.0,
            "max": 20000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "sigma"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SetFirstSigma",
    "display_name": "SetFirstSigma",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "CFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "cfg"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "CFGGuider",
    "display_name": "CFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "DualCFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond1": [
          "CONDITIONING"
        ],
        "cond2": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg_conds": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "cfg_cond2_negative": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond1",
        "cond2",
        "negative",
        "cfg_conds",
        "cfg_cond2_negative"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "DualCFGGuider",
    "display_name": "DualCFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "BasicGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "BasicGuider",
    "display_name": "BasicGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "RandomNoise": {
    "input": {
      "required": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "noise_seed"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "RandomNoise",
    "display_name": "RandomNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "DisableNoise": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "DisableNoise",
    "display_name": "DisableNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "AddNoise": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "noise": [
          "NOISE"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "noise",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "AddNoise",
    "display_name": "AddNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "_for_testing/custom_sampling/noise",
    "output_node": false
  },
  "SamplerCustomAdvanced": {
    "input": {
      "required": {
        "noise": [
          "NOISE"
        ],
        "guider": [
          "GUIDER"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "noise",
        "guider",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustomAdvanced",
    "display_name": "SamplerCustomAdvanced",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "HyperTile": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "tile_size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 2048
          }
        ],
        "swap_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 128
          }
        ],
        "max_depth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10
          }
        ],
        "scale_depth": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tile_size",
        "swap_size",
        "max_depth",
        "scale_depth"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HyperTile",
    "display_name": "HyperTile",
    "description": "",
    "python_module": "comfy_extras.nodes_hypertile",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ModelSamplingDiscrete": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "eps",
            "v_prediction",
            "lcm",
            "x0"
          ]
        ],
        "zsnr": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "zsnr"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingDiscrete",
    "display_name": "ModelSamplingDiscrete",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousEDM": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction",
            "edm",
            "edm_playground_v2.5",
            "eps"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 120.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.002,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousEDM",
    "display_name": "ModelSamplingContinuousEDM",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 500.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.03,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousV",
    "display_name": "ModelSamplingContinuousV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingStableCascade": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingStableCascade",
    "display_name": "ModelSamplingStableCascade",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3",
    "display_name": "ModelSamplingSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingAuraFlow": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 1.73,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingAuraFlow",
    "display_name": "ModelSamplingAuraFlow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingFlux": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 1.15,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift",
        "width",
        "height"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingFlux",
    "display_name": "ModelSamplingFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "RescaleCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RescaleCFG",
    "display_name": "RescaleCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "PatchModelAddDownscale": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "block_number": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 32,
            "step": 1
          }
        ],
        "downscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 9.0,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "downscale_after_skip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "upscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "block_number",
        "downscale_factor",
        "start_percent",
        "end_percent",
        "downscale_after_skip",
        "downscale_method",
        "upscale_method"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelAddDownscale",
    "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)",
    "description": "",
    "python_module": "comfy_extras.nodes_model_downscale",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ImageCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCrop",
    "display_name": "Image Crop",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "RepeatImageBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RepeatImageBatch",
    "display_name": "RepeatImageBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "ImageFromBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4095
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch",
    "display_name": "ImageFromBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "SaveAnimatedWEBP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "lossless": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "quality": [
          "INT",
          {
            "default": 80,
            "min": 0,
            "max": 100
          }
        ],
        "method": [
          [
            "default",
            "fastest",
            "slowest"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "lossless",
        "quality",
        "method"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedWEBP",
    "display_name": "SaveAnimatedWEBP",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "SaveAnimatedPNG": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "compress_level": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "compress_level"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedPNG",
    "display_name": "SaveAnimatedPNG",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "ImageOnlyCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "name": "ImageOnlyCheckpointLoader",
    "display_name": "Image Only Checkpoint Loader (img2vid model)",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "loaders/video_models",
    "output_node": false
  },
  "SVD_img2vid_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 14,
            "min": 1,
            "max": 4096
          }
        ],
        "motion_bucket_id": [
          "INT",
          {
            "default": 127,
            "min": 1,
            "max": 1023
          }
        ],
        "fps": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 1024
          }
        ],
        "augmentation_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "motion_bucket_id",
        "fps",
        "augmentation_level"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SVD_img2vid_Conditioning",
    "display_name": "SVD_img2vid_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VideoLinearCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoLinearCFGGuidance",
    "display_name": "VideoLinearCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "VideoTriangleCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoTriangleCFGGuidance",
    "display_name": "VideoTriangleCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "ImageOnlyCheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImageOnlyCheckpointSave",
    "display_name": "ImageOnlyCheckpointSave",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "SelfAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -2.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "blur_sigma": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale",
        "blur_sigma"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SelfAttentionGuidance",
    "display_name": "Self-Attention Guidance",
    "description": "",
    "python_module": "comfy_extras.nodes_sag",
    "category": "_for_testing",
    "output_node": false
  },
  "PerpNeg": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "empty_conditioning",
        "neg_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerpNeg",
    "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false,
    "deprecated": true
  },
  "PerpNegGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "empty_conditioning",
        "cfg",
        "neg_scale"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "PerpNegGuider",
    "display_name": "PerpNegGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false
  },
  "StableZero123_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning",
    "display_name": "StableZero123_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "StableZero123_Conditioning_Batched": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "elevation_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth",
        "elevation_batch_increment",
        "azimuth_batch_increment"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning_Batched",
    "display_name": "StableZero123_Conditioning_Batched",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SV3D_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -90.0,
            "max": 90.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "elevation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_Conditioning",
    "display_name": "SV3D_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SD_4XUpscale_Conditioning": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "scale_ratio": [
          "FLOAT",
          {
            "default": 4.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "positive",
        "negative",
        "scale_ratio",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SD_4XUpscale_Conditioning",
    "display_name": "SD_4XUpscale_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_sdupscale",
    "category": "conditioning/upscale_diffusion",
    "output_node": false
  },
  "PhotoMakerLoader": {
    "input": {
      "required": {
        "photomaker_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker_model_name"
      ]
    },
    "output": [
      "PHOTOMAKER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PHOTOMAKER"
    ],
    "name": "PhotoMakerLoader",
    "display_name": "PhotoMakerLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "PhotoMakerEncode": {
    "input": {
      "required": {
        "photomaker": [
          "PHOTOMAKER"
        ],
        "image": [
          "IMAGE"
        ],
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "photograph of photomaker"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker",
        "image",
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "PhotoMakerEncode",
    "display_name": "PhotoMakerEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "CLIPTextEncodePixArtAlpha": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodePixArtAlpha",
    "display_name": "CLIPTextEncodePixArtAlpha",
    "description": "Encodes text and sets the resolution conditioning for PixArt Alpha. Does not apply to PixArt Sigma.",
    "python_module": "comfy_extras.nodes_pixart",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeControlnet": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "conditioning",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeControlnet",
    "display_name": "CLIPTextEncodeControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_cond",
    "category": "_for_testing/conditioning",
    "output_node": false
  },
  "Morphology": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "operation": [
          [
            "erode",
            "dilate",
            "open",
            "close",
            "gradient",
            "bottom_hat",
            "top_hat"
          ]
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 3,
            "max": 999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "operation",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Morphology",
    "display_name": "ImageMorphology",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/postprocessing",
    "output_node": false
  },
  "StableCascade_EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "compression",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_EmptyLatentImage",
    "display_name": "StableCascade_EmptyLatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageB_Conditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "stage_c": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "stage_c"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StableCascade_StageB_Conditioning",
    "display_name": "StableCascade_StageB_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "conditioning/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageC_VAEEncode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae",
        "compression"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_StageC_VAEEncode",
    "display_name": "StableCascade_StageC_VAEEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_SuperResolutionControlnet": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "controlnet_input",
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_SuperResolutionControlnet",
    "display_name": "StableCascade_SuperResolutionControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "_for_testing/stable_cascade",
    "output_node": false,
    "experimental": true
  },
  "DifferentialDiffusion": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "DifferentialDiffusion",
    "display_name": "Differential Diffusion",
    "description": "",
    "python_module": "comfy_extras.nodes_differential_diffusion",
    "category": "_for_testing",
    "output_node": false
  },
  "InstructPixToPixConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InstructPixToPixConditioning",
    "display_name": "InstructPixToPixConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_ip2p",
    "category": "conditioning/instructpix2pix",
    "output_node": false
  },
  "ModelMergeSD1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD1",
    "display_name": "ModelMergeSD1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD2": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD2",
    "display_name": "ModelMergeSD2",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSDXL": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0",
        "input_blocks.1",
        "input_blocks.2",
        "input_blocks.3",
        "input_blocks.4",
        "input_blocks.5",
        "input_blocks.6",
        "input_blocks.7",
        "input_blocks.8",
        "middle_block.0",
        "middle_block.1",
        "middle_block.2",
        "output_blocks.0",
        "output_blocks.1",
        "output_blocks.2",
        "output_blocks.3",
        "output_blocks.4",
        "output_blocks.5",
        "output_blocks.6",
        "output_blocks.7",
        "output_blocks.8",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSDXL",
    "display_name": "ModelMergeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD3_2B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD3_2B",
    "display_name": "ModelMergeSD3_2B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeAuraflow": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "init_x_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "positional_encoding": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cond_seq_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "register_tokens": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "modF.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "init_x_linear.",
        "positional_encoding",
        "cond_seq_linear.",
        "register_tokens",
        "t_embedder.",
        "double_layers.0.",
        "double_layers.1.",
        "double_layers.2.",
        "double_layers.3.",
        "single_layers.0.",
        "single_layers.1.",
        "single_layers.2.",
        "single_layers.3.",
        "single_layers.4.",
        "single_layers.5.",
        "single_layers.6.",
        "single_layers.7.",
        "single_layers.8.",
        "single_layers.9.",
        "single_layers.10.",
        "single_layers.11.",
        "single_layers.12.",
        "single_layers.13.",
        "single_layers.14.",
        "single_layers.15.",
        "single_layers.16.",
        "single_layers.17.",
        "single_layers.18.",
        "single_layers.19.",
        "single_layers.20.",
        "single_layers.21.",
        "single_layers.22.",
        "single_layers.23.",
        "single_layers.24.",
        "single_layers.25.",
        "single_layers.26.",
        "single_layers.27.",
        "single_layers.28.",
        "single_layers.29.",
        "single_layers.30.",
        "single_layers.31.",
        "modF.",
        "final_linear."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAuraflow",
    "display_name": "ModelMergeAuraflow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeFlux1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "img_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "guidance_in": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "vector_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "txt_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "img_in.",
        "time_in.",
        "guidance_in",
        "vector_in.",
        "txt_in.",
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeFlux1",
    "display_name": "ModelMergeFlux1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD35_Large": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "joint_blocks.24.",
        "joint_blocks.25.",
        "joint_blocks.26.",
        "joint_blocks.27.",
        "joint_blocks.28.",
        "joint_blocks.29.",
        "joint_blocks.30.",
        "joint_blocks.31.",
        "joint_blocks.32.",
        "joint_blocks.33.",
        "joint_blocks.34.",
        "joint_blocks.35.",
        "joint_blocks.36.",
        "joint_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD35_Large",
    "display_name": "ModelMergeSD35_Large",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeMochiPreview": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_frequencies.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t5_y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t5_yproj.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.40.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.41.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.42.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.43.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.44.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.45.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.46.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.47.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_frequencies.",
        "t_embedder.",
        "t5_y_embedder.",
        "t5_yproj.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39.",
        "blocks.40.",
        "blocks.41.",
        "blocks.42.",
        "blocks.43.",
        "blocks.44.",
        "blocks.45.",
        "blocks.46.",
        "blocks.47.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeMochiPreview",
    "display_name": "ModelMergeMochiPreview",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeLTXV": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "patchify_proj.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "adaln_single.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "caption_projection.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scale_shift_table": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "proj_out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "patchify_proj.",
        "adaln_single.",
        "caption_projection.",
        "transformer_blocks.0.",
        "transformer_blocks.1.",
        "transformer_blocks.2.",
        "transformer_blocks.3.",
        "transformer_blocks.4.",
        "transformer_blocks.5.",
        "transformer_blocks.6.",
        "transformer_blocks.7.",
        "transformer_blocks.8.",
        "transformer_blocks.9.",
        "transformer_blocks.10.",
        "transformer_blocks.11.",
        "transformer_blocks.12.",
        "transformer_blocks.13.",
        "transformer_blocks.14.",
        "transformer_blocks.15.",
        "transformer_blocks.16.",
        "transformer_blocks.17.",
        "transformer_blocks.18.",
        "transformer_blocks.19.",
        "transformer_blocks.20.",
        "transformer_blocks.21.",
        "transformer_blocks.22.",
        "transformer_blocks.23.",
        "transformer_blocks.24.",
        "transformer_blocks.25.",
        "transformer_blocks.26.",
        "transformer_blocks.27.",
        "scale_shift_table",
        "proj_out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeLTXV",
    "display_name": "ModelMergeLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "PerturbedAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerturbedAttentionGuidance",
    "display_name": "PerturbedAttentionGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_pag",
    "category": "model_patches/unet",
    "output_node": false
  },
  "AlignYourStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "SD1",
            "SDXL",
            "SVD"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "AlignYourStepsScheduler",
    "display_name": "AlignYourStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_align_your_steps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "UNetSelfAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetSelfAttentionMultiply",
    "display_name": "UNetSelfAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetCrossAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetCrossAttentionMultiply",
    "display_name": "UNetCrossAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "CLIPAttentionMultiply": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPAttentionMultiply",
    "display_name": "CLIPAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetTemporalAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "self_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "self_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "self_structural",
        "self_temporal",
        "cross_structural",
        "cross_temporal"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetTemporalAttentionMultiply",
    "display_name": "UNetTemporalAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "SamplerLCMUpscale": {
    "input": {
      "required": {
        "scale_ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "scale_steps": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1000,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "bislerp",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_ratio",
        "scale_steps",
        "upscale_method"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLCMUpscale",
    "display_name": "SamplerLCMUpscale",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerCFGpp": {
    "input": {
      "required": {
        "version": [
          [
            "regular",
            "alternative"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "version"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerCFGpp",
    "display_name": "SamplerEulerCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "_for_testing",
    "output_node": false
  },
  "WebcamCapture": {
    "input": {
      "required": {
        "image": [
          "WEBCAM",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "capture_on_queue": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "capture_on_queue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "WebcamCapture",
    "display_name": "Webcam Capture",
    "description": "",
    "python_module": "comfy_extras.nodes_webcam",
    "category": "image",
    "output_node": false
  },
  "EmptyLatentAudio": {
    "input": {
      "required": {
        "seconds": [
          "FLOAT",
          {
            "default": 47.6,
            "min": 1.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seconds",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentAudio",
    "display_name": "EmptyLatentAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEEncodeAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeAudio",
    "display_name": "VAEEncodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEDecodeAudio": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "VAEDecodeAudio",
    "display_name": "VAEDecodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "SaveAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "audio/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAudio",
    "display_name": "SaveAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "LoadAudio": {
    "input": {
      "required": {
        "audio": [
          [],
          {
            "audio_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "LoadAudio",
    "display_name": "LoadAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": false
  },
  "PreviewAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAudio",
    "display_name": "PreviewAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "ConditioningStableAudio": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seconds_start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "seconds_total": [
          "FLOAT",
          {
            "default": 47.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "seconds_start",
        "seconds_total"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ConditioningStableAudio",
    "display_name": "ConditioningStableAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "conditioning",
    "output_node": false
  },
  "TripleCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "clip_name3": [
          [
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "TripleCLIPLoader",
    "display_name": "TripleCLIPLoader",
    "description": "[Recipes]\n\nsd3: clip-l, clip-g, t5",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/loaders",
    "output_node": false
  },
  "EmptySD3LatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptySD3LatentImage",
    "display_name": "EmptySD3LatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "latent/sd3",
    "output_node": false
  },
  "CLIPTextEncodeSD3": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "empty_padding": [
          [
            "none",
            "empty_prompt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "clip_g",
        "t5xxl",
        "empty_padding"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSD3",
    "display_name": "CLIPTextEncodeSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ControlNetApplySD3": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplySD3",
    "display_name": "Apply Controlnet with VAE",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "SkipLayerGuidanceSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "layers",
        "scale",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceSD3",
    "display_name": "SkipLayerGuidanceSD3",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "GITSScheduler": {
    "input": {
      "required": {
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coeff",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "GITSScheduler",
    "display_name": "GITSScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_gits",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SetUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/anime_lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "repaint"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetUnionControlNetType",
    "display_name": "SetUnionControlNetType",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetInpaintingAliMamaApply": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "mask",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetInpaintingAliMamaApply",
    "display_name": "ControlNetInpaintingAliMamaApply",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "CLIPTextEncodeHunyuanDiT": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "bert": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "mt5xl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "bert",
        "mt5xl"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeHunyuanDiT",
    "display_name": "CLIPTextEncodeHunyuanDiT",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "EmptyHunyuanLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyHunyuanLatentVideo",
    "display_name": "EmptyHunyuanLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "latent/video",
    "output_node": false
  },
  "CLIPTextEncodeFlux": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "t5xxl",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeFlux",
    "display_name": "CLIPTextEncodeFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxGuidance",
    "display_name": "FluxGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxDisableGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxDisableGuidance",
    "display_name": "FluxDisableGuidance",
    "description": "This node completely disables the guidance embed on Flux and Flux like models",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "LoraSave": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "loras/ComfyUI_extracted_lora"
          }
        ],
        "rank": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "lora_type": [
          [
            "standard",
            "full_diff"
          ]
        ],
        "bias_diff": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "model_diff": [
          "MODEL",
          {
            "tooltip": "The ModelSubtract output to be converted to a lora."
          }
        ],
        "text_encoder_diff": [
          "CLIP",
          {
            "tooltip": "The CLIPSubtract output to be converted to a lora."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix",
        "rank",
        "lora_type",
        "bias_diff"
      ],
      "optional": [
        "model_diff",
        "text_encoder_diff"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LoraSave",
    "display_name": "Extract and Save Lora",
    "description": "",
    "python_module": "comfy_extras.nodes_lora_extract",
    "category": "_for_testing",
    "output_node": true
  },
  "TorchCompileModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModel",
    "display_name": "TorchCompileModel",
    "description": "",
    "python_module": "comfy_extras.nodes_torch_compile",
    "category": "_for_testing",
    "output_node": false,
    "experimental": true
  },
  "EmptyMochiLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 7,
            "max": 16384,
            "step": 6
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyMochiLatentVideo",
    "display_name": "EmptyMochiLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_mochi",
    "category": "latent/video",
    "output_node": false
  },
  "SkipLayerGuidanceDiT": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "double_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "single_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "rescaling_scale": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "double_layers",
        "single_layers",
        "scale",
        "start_percent",
        "end_percent",
        "rescaling_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceDiT",
    "display_name": "SkipLayerGuidanceDiT",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_slg",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "Mahiro": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "patched_model"
    ],
    "name": "Mahiro",
    "display_name": "Mahiro is so cute that she deserves a better guidance function!! (\u3002\u30fb\u03c9\u30fb\u3002)",
    "description": "Modify the guidance to scale more on the 'direction' of the positive prompt rather than the difference between the negative prompt.",
    "python_module": "comfy_extras.nodes_mahiro",
    "category": "_for_testing",
    "output_node": false
  },
  "EmptyLTXVLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLTXVLatentVideo",
    "display_name": "EmptyLTXVLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "latent/video/ltxv",
    "output_node": false
  },
  "LTXVImgToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 9,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "image_noise_scale": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Amount of noise to apply on conditioning image latent."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "image",
        "width",
        "height",
        "length",
        "batch_size",
        "image_noise_scale"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVImgToVideo",
    "display_name": "LTXVImgToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "ModelSamplingLTXV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingLTXV",
    "display_name": "ModelSamplingLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "advanced/model",
    "output_node": false
  },
  "LTXVConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "frame_rate": [
          "FLOAT",
          {
            "default": 25.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "frame_rate"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "LTXVConditioning",
    "display_name": "LTXVConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "stretch": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Stretch the sigmas to be in the range [terminal, 1]."
          }
        ],
        "terminal": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 0.99,
            "step": 0.01,
            "tooltip": "The terminal value of the sigmas after stretching."
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "max_shift",
        "base_shift",
        "stretch",
        "terminal"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LTXVScheduler",
    "display_name": "LTXVScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "CreateHookLora": {
    "input": {
      "required": {
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLora",
    "display_name": "Create Hook LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookLoraModelOnly": {
    "input": {
      "required": {
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLoraModelOnly",
    "display_name": "Create Hook LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLora": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLora",
    "display_name": "Create Hook Model as LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLoraModelOnly": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLoraModelOnly",
    "display_name": "Create Hook Model as LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "SetHookKeyframes": {
    "input": {
      "required": {
        "hooks": [
          "HOOKS"
        ]
      },
      "optional": {
        "hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "hooks"
      ],
      "optional": [
        "hook_kf"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "SetHookKeyframes",
    "display_name": "Set Hook Keyframes",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframe": {
    "input": {
      "required": {
        "strength_mult": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_mult",
        "start_percent"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframe",
    "display_name": "Create Hook Keyframe",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesInterpolated": {
    "input": {
      "required": {
        "strength_start": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "strength_end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "keyframes_count": [
          "INT",
          {
            "default": 5,
            "min": 2,
            "max": 100,
            "step": 1
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_start",
        "strength_end",
        "interpolation",
        "start_percent",
        "end_percent",
        "keyframes_count",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesInterpolated",
    "display_name": "Create Hook Keyframes Interp.",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesFromFloats": {
    "input": {
      "required": {
        "floats_strength": [
          "FLOATS",
          {
            "default": -1,
            "min": -1,
            "step": 0.001,
            "forceInput": true
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats_strength",
        "start_percent",
        "end_percent",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesFromFloats",
    "display_name": "Create Hook Keyframes From Floats",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks2": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks2",
    "display_name": "Combine Hooks [2]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks4": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks4",
    "display_name": "Combine Hooks [4]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks8": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ],
        "hooks_E": [
          "HOOKS"
        ],
        "hooks_F": [
          "HOOKS"
        ],
        "hooks_G": [
          "HOOKS"
        ],
        "hooks_H": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D",
        "hooks_E",
        "hooks_F",
        "hooks_G",
        "hooks_H"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks8",
    "display_name": "Combine Hooks [8]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetProperties": {
    "input": {
      "required": {
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetProperties",
    "display_name": "Cond Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetPropertiesAndCombine",
    "display_name": "Cond Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetProperties": {
    "input": {
      "required": {
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetProperties",
    "display_name": "Cond Pair Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetPropertiesAndCombine",
    "display_name": "Cond Pair Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetDefaultCombine",
    "display_name": "Cond Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_DEFAULT": [
          "CONDITIONING"
        ],
        "negative_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_DEFAULT",
        "negative_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetDefaultCombine",
    "display_name": "Cond Pair Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningCombine": {
    "input": {
      "required": {
        "positive_A": [
          "CONDITIONING"
        ],
        "negative_A": [
          "CONDITIONING"
        ],
        "positive_B": [
          "CONDITIONING"
        ],
        "negative_B": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_A",
        "negative_A",
        "positive_B",
        "negative_B"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningCombine",
    "display_name": "Cond Pair Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "SetClipHooks": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_conds": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "schedule_clip": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_conds",
        "schedule_clip"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "SetClipHooks",
    "display_name": "Set CLIP Hooks",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/clip",
    "output_node": false,
    "experimental": true
  },
  "ConditioningTimestepsRange": {
    "input": {
      "required": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "TIMESTEPS_RANGE",
      "BEFORE_RANGE",
      "AFTER_RANGE"
    ],
    "name": "ConditioningTimestepsRange",
    "display_name": "Timesteps Range",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks",
    "output_node": false,
    "experimental": true
  },
  "Load3D": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "material": [
          [
            "original",
            "normal",
            "wireframe",
            "depth"
          ]
        ],
        "bg_color": [
          "STRING",
          {
            "default": "#000000",
            "multiline": false
          }
        ],
        "light_intensity": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "up_direction": [
          [
            "original",
            "-x",
            "+x",
            "-y",
            "+y",
            "-z",
            "+z"
          ]
        ],
        "fov": [
          "INT",
          {
            "default": 75,
            "min": 10,
            "max": 150,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height",
        "material",
        "bg_color",
        "light_intensity",
        "up_direction",
        "fov"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mesh_path"
    ],
    "name": "Load3D",
    "display_name": "Load 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Load3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D_ANIMATION",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "material": [
          [
            "original",
            "normal",
            "wireframe",
            "depth"
          ]
        ],
        "bg_color": [
          "STRING",
          {
            "default": "#000000",
            "multiline": false
          }
        ],
        "light_intensity": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "up_direction": [
          [
            "original",
            "-x",
            "+x",
            "-y",
            "+y",
            "-z",
            "+z"
          ]
        ],
        "animation_speed": [
          [
            "0.1",
            "0.5",
            "1",
            "1.5",
            "2"
          ],
          {
            "default": "1"
          }
        ],
        "fov": [
          "INT",
          {
            "default": 75,
            "min": 10,
            "max": 150,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height",
        "material",
        "bg_color",
        "light_intensity",
        "up_direction",
        "animation_speed",
        "fov"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mesh_path"
    ],
    "name": "Load3DAnimation",
    "display_name": "Load 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Preview3D": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "material": [
          [
            "original",
            "normal",
            "wireframe",
            "depth"
          ]
        ],
        "bg_color": [
          "STRING",
          {
            "default": "#000000",
            "multiline": false
          }
        ],
        "light_intensity": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "up_direction": [
          [
            "original",
            "-x",
            "+x",
            "-y",
            "+y",
            "-z",
            "+z"
          ]
        ],
        "fov": [
          "INT",
          {
            "default": 75,
            "min": 10,
            "max": 150,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "material",
        "bg_color",
        "light_intensity",
        "up_direction",
        "fov"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3D",
    "display_name": "Preview 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "EmptyCosmosLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyCosmosLatentVideo",
    "display_name": "EmptyCosmosLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "latent/video",
    "output_node": false
  },
  "CosmosImageToVideoLatent": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "CosmosImageToVideoLatent",
    "display_name": "CosmosImageToVideoLatent",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "UltimateSDUpscale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "upscale_by": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.05,
            "max": 4,
            "step": 0.05
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "mode_type": [
          [
            "Linear",
            "Chess",
            "None"
          ]
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "tile_padding": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mode": [
          [
            "None",
            "Band Pass",
            "Half Tile",
            "Half Tile + Intersections"
          ]
        ],
        "seam_fix_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seam_fix_width": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "seam_fix_padding": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "force_uniform_tiles": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "positive",
        "negative",
        "vae",
        "upscale_by",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "upscale_model",
        "mode_type",
        "tile_width",
        "tile_height",
        "mask_blur",
        "tile_padding",
        "seam_fix_mode",
        "seam_fix_denoise",
        "seam_fix_width",
        "seam_fix_mask_blur",
        "seam_fix_padding",
        "force_uniform_tiles",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UltimateSDUpscale",
    "display_name": "Ultimate SD Upscale",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_UltimateSDUpscale",
    "category": "image/upscaling",
    "output_node": false
  },
  "UltimateSDUpscaleNoUpscale": {
    "input": {
      "required": {
        "upscaled_image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mode_type": [
          [
            "Linear",
            "Chess",
            "None"
          ]
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "tile_padding": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mode": [
          [
            "None",
            "Band Pass",
            "Half Tile",
            "Half Tile + Intersections"
          ]
        ],
        "seam_fix_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seam_fix_width": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "seam_fix_padding": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "force_uniform_tiles": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscaled_image",
        "model",
        "positive",
        "negative",
        "vae",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "mode_type",
        "tile_width",
        "tile_height",
        "mask_blur",
        "tile_padding",
        "seam_fix_mode",
        "seam_fix_denoise",
        "seam_fix_width",
        "seam_fix_mask_blur",
        "seam_fix_padding",
        "force_uniform_tiles",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UltimateSDUpscaleNoUpscale",
    "display_name": "Ultimate SD Upscale (No Upscale)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_UltimateSDUpscale",
    "category": "image/upscaling",
    "output_node": false
  },
  "UltimateSDUpscaleCustomSample": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "upscale_by": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.05,
            "max": 4,
            "step": 0.05
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mode_type": [
          [
            "Linear",
            "Chess",
            "None"
          ]
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "tile_padding": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mode": [
          [
            "None",
            "Band Pass",
            "Half Tile",
            "Half Tile + Intersections"
          ]
        ],
        "seam_fix_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seam_fix_width": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "seam_fix_padding": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "force_uniform_tiles": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "custom_sampler": [
          "SAMPLER"
        ],
        "custom_sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "positive",
        "negative",
        "vae",
        "upscale_by",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "mode_type",
        "tile_width",
        "tile_height",
        "mask_blur",
        "tile_padding",
        "seam_fix_mode",
        "seam_fix_denoise",
        "seam_fix_width",
        "seam_fix_mask_blur",
        "seam_fix_padding",
        "force_uniform_tiles",
        "tiled_decode"
      ],
      "optional": [
        "upscale_model",
        "custom_sampler",
        "custom_sigmas"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UltimateSDUpscaleCustomSample",
    "display_name": "Ultimate SD Upscale (Custom Sample)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_UltimateSDUpscale",
    "category": "image/upscaling",
    "output_node": false
  },
  "SAMLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "sam_vit_b_01ec64.pth",
            "ESAM"
          ],
          {
            "tooltip": "The detection accuracy varies depending on the SAM model. ESAM can only be used if ComfyUI-YoloWorld-EfficientSAM is installed."
          }
        ],
        "device_mode": [
          [
            "AUTO",
            "Prefer GPU",
            "CPU"
          ],
          {
            "tooltip": "AUTO: Only applicable when a GPU is available. It temporarily loads the SAM_MODEL into VRAM only when the detection function is used.\nPrefer GPU: Tries to keep the SAM_MODEL on the GPU whenever possible. This can be used when there is sufficient VRAM available.\nCPU: Always loads only on the CPU."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "device_mode"
      ]
    },
    "output": [
      "SAM_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_MODEL"
    ],
    "name": "SAMLoader",
    "display_name": "SAMLoader (Impact)",
    "description": "Load the SAM (Segment Anything) model. This can be used in places that utilize SAM detection functionality, such as SAMDetector or SimpleDetector.\nThe SAM detection functionality in Impact Pack must use the SAM_MODEL loaded through this node.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack",
    "output_node": false
  },
  "CLIPSegDetectorProvider": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "tooltip": "Enter the targets to be detected, separated by commas"
          }
        ],
        "blur": [
          "FLOAT",
          {
            "min": 0,
            "max": 15,
            "step": 0.1,
            "default": 7,
            "tooltip": "Blurs the detected mask"
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "min": 0,
            "max": 1,
            "step": 0.05,
            "default": 0.4,
            "tooltip": "Detects only areas that are certain above the threshold."
          }
        ],
        "dilation_factor": [
          "INT",
          {
            "min": 0,
            "max": 10,
            "step": 1,
            "default": 4,
            "tooltip": "Dilates the detected mask."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "blur",
        "threshold",
        "dilation_factor"
      ]
    },
    "output": [
      "BBOX_DETECTOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BBOX_DETECTOR"
    ],
    "name": "CLIPSegDetectorProvider",
    "display_name": "CLIPSegDetectorProvider",
    "description": "Provides a detection function using CLIPSeg, which generates masks based on text prompts.\nTo use this node, the CLIPSeg custom node must be installed.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ONNXDetectorProvider": {
    "input": {
      "required": {
        "model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "BBOX_DETECTOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BBOX_DETECTOR"
    ],
    "name": "ONNXDetectorProvider",
    "display_name": "ONNXDetectorProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack",
    "output_node": false
  },
  "BitwiseAndMaskForEach": {
    "input": {
      "required": {
        "base_segs": [
          "SEGS"
        ],
        "mask_segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_segs",
        "mask_segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "BitwiseAndMaskForEach",
    "display_name": "Pixelwise(SEGS & SEGS)",
    "description": "Retains only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "SubtractMaskForEach": {
    "input": {
      "required": {
        "base_segs": [
          "SEGS"
        ],
        "mask_segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_segs",
        "mask_segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "SubtractMaskForEach",
    "display_name": "Pixelwise(SEGS - SEGS)",
    "description": "Removes only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "DetailerForEach": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "model",
        "clip",
        "vae",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "wildcard",
        "cycle"
      ],
      "optional": [
        "detailer_hook",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DetailerForEach",
    "display_name": "Detailer (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DetailerForEachDebug": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "model",
        "clip",
        "vae",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "wildcard",
        "cycle"
      ],
      "optional": [
        "detailer_hook",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "image",
      "cropped",
      "cropped_refined",
      "cropped_refined_alpha",
      "cnet_images"
    ],
    "name": "DetailerForEachDebug",
    "display_name": "DetailerDebug (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DetailerForEachPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "basic_pipe",
        "wildcard",
        "refiner_ratio",
        "cycle"
      ],
      "optional": [
        "detailer_hook",
        "refiner_basic_pipe_opt",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "SEGS",
      "BASIC_PIPE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      true
    ],
    "output_name": [
      "image",
      "segs",
      "basic_pipe",
      "cnet_images"
    ],
    "name": "DetailerForEachPipe",
    "display_name": "Detailer (SEGS/pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DetailerForEachDebugPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "basic_pipe",
        "wildcard",
        "refiner_ratio",
        "cycle"
      ],
      "optional": [
        "detailer_hook",
        "refiner_basic_pipe_opt",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "SEGS",
      "BASIC_PIPE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "image",
      "segs",
      "basic_pipe",
      "cropped",
      "cropped_refined",
      "cropped_refined_alpha",
      "cnet_images"
    ],
    "name": "DetailerForEachDebugPipe",
    "display_name": "DetailerDebug (SEGS/pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DetailerForEachPipeForAnimateDiff": {
    "input": {
      "required": {
        "image_frames": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_frames",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "basic_pipe",
        "refiner_ratio"
      ],
      "optional": [
        "detailer_hook",
        "refiner_basic_pipe_opt",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "SEGS",
      "BASIC_PIPE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      true
    ],
    "output_name": [
      "image",
      "segs",
      "basic_pipe",
      "cnet_images"
    ],
    "name": "DetailerForEachPipeForAnimateDiff",
    "display_name": "Detailer For AnimateDiff (SEGS/pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "SAMDetectorCombined": {
    "input": {
      "required": {
        "sam_model": [
          "SAM_MODEL",
          {
            "tooltip": "Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."
          }
        ],
        "segs": [
          "SEGS",
          {
            "tooltip": "This is the segment information detected by the detector.\nIt refines the Mask through the SAM (Segment Anything) detector for all areas pointed to by SEGS, and combines all Masks to return as a single Mask."
          }
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."
          }
        ],
        "detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ],
          {
            "tooltip": "It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1,
            "tooltip": "Set the value to dilate the result mask. If the value is negative, it erodes the mask."
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Set the sensitivity threshold for the mask detected by SAM (Segment Anything). A higher value generates a more specific mask with a narrower range. For example, when pointing to a person's area, it might detect clothes, which is a narrower range, instead of the entire person."
          }
        ],
        "bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1,
            "tooltip": "When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."
          }
        ],
        "mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."
          }
        ],
        "mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ],
          {
            "tooltip": "When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_model",
        "segs",
        "image",
        "detection_hint",
        "dilation",
        "threshold",
        "bbox_expansion",
        "mask_hint_threshold",
        "mask_hint_use_negative"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SAMDetectorCombined",
    "display_name": "SAMDetector (combined)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "SAMDetectorSegmented": {
    "input": {
      "required": {
        "sam_model": [
          "SAM_MODEL",
          {
            "tooltip": "Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."
          }
        ],
        "segs": [
          "SEGS",
          {
            "tooltip": "This is the segment information detected by the detector.\nFor the SEGS region, the masks detected by SAM (Segment Anything) are created as a unified mask and a batch of individual masks."
          }
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."
          }
        ],
        "detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ],
          {
            "tooltip": "It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1,
            "tooltip": "Set the value to dilate the result mask. If the value is negative, it erodes the mask."
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1,
            "tooltip": "When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."
          }
        ],
        "mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."
          }
        ],
        "mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ],
          {
            "tooltip": "When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_model",
        "segs",
        "image",
        "detection_hint",
        "dilation",
        "threshold",
        "bbox_expansion",
        "mask_hint_threshold",
        "mask_hint_use_negative"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_mask",
      "batch_masks"
    ],
    "name": "SAMDetectorSegmented",
    "display_name": "SAMDetector (segmented)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "FaceDetailer": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.1
          }
        ],
        "sam_detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "clip",
        "vae",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "sam_detection_hint",
        "sam_dilation",
        "sam_threshold",
        "sam_bbox_expansion",
        "sam_mask_hint_threshold",
        "sam_mask_hint_use_negative",
        "drop_size",
        "bbox_detector",
        "wildcard",
        "cycle"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "MASK",
      "DETAILER_PIPE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true,
      true,
      false,
      false,
      true
    ],
    "output_name": [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "mask",
      "detailer_pipe",
      "cnet_images"
    ],
    "name": "FaceDetailer",
    "display_name": "FaceDetailer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Simple",
    "output_node": false
  },
  "FaceDetailerPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "detailer_pipe": [
          "DETAILER_PIPE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.1
          }
        ],
        "sam_detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "detailer_pipe",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "sam_detection_hint",
        "sam_dilation",
        "sam_threshold",
        "sam_bbox_expansion",
        "sam_mask_hint_threshold",
        "sam_mask_hint_use_negative",
        "drop_size",
        "refiner_ratio",
        "cycle"
      ],
      "optional": [
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "MASK",
      "DETAILER_PIPE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true,
      true,
      false,
      false,
      true
    ],
    "output_name": [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "mask",
      "detailer_pipe",
      "cnet_images"
    ],
    "name": "FaceDetailerPipe",
    "display_name": "FaceDetailer (pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Simple",
    "output_node": false
  },
  "MaskDetailerPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "mask bbox",
            "label_off": "crop region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "mask_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "masked only",
            "label_off": "whole"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "bbox_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "contour_fill": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "basic_pipe",
        "guide_size",
        "guide_size_for",
        "max_size",
        "mask_mode",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "crop_factor",
        "drop_size",
        "refiner_ratio",
        "batch_size",
        "cycle"
      ],
      "optional": [
        "refiner_basic_pipe_opt",
        "detailer_hook",
        "inpaint_model",
        "noise_mask_feather",
        "bbox_fill",
        "contour_fill",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "BASIC_PIPE",
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false,
      true,
      true,
      false,
      false
    ],
    "output_name": [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "basic_pipe",
      "refiner_basic_pipe_opt"
    ],
    "name": "MaskDetailerPipe",
    "display_name": "MaskDetailer (pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "ToDetailerPipe": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "bbox_detector",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "ToDetailerPipe",
    "display_name": "ToDetailerPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "ToDetailerPipeSDXL": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "refiner_model": [
          "MODEL"
        ],
        "refiner_clip": [
          "CLIP"
        ],
        "refiner_positive": [
          "CONDITIONING"
        ],
        "refiner_negative": [
          "CONDITIONING"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "refiner_model",
        "refiner_clip",
        "refiner_positive",
        "refiner_negative",
        "bbox_detector",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "ToDetailerPipeSDXL",
    "display_name": "ToDetailerPipeSDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromDetailerPipe": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook"
    ],
    "name": "FromDetailerPipe",
    "display_name": "FromDetailerPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromDetailerPipe_v2": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe"
      ]
    },
    "output": [
      "DETAILER_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "detailer_pipe",
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook"
    ],
    "name": "FromDetailerPipe_v2",
    "display_name": "FromDetailerPipe_v2",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromDetailerPipeSDXL": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe"
      ]
    },
    "output": [
      "DETAILER_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK",
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "detailer_pipe",
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook",
      "refiner_model",
      "refiner_clip",
      "refiner_positive",
      "refiner_negative"
    ],
    "name": "FromDetailerPipeSDXL",
    "display_name": "FromDetailer (SDXL/pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "AnyPipeToBasic": {
    "input": {
      "required": {
        "any_pipe": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "any_pipe"
      ]
    },
    "output": [
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "basic_pipe"
    ],
    "name": "AnyPipeToBasic",
    "display_name": "Any PIPE -> BasicPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "ToBasicPipe": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative"
      ]
    },
    "output": [
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "basic_pipe"
    ],
    "name": "ToBasicPipe",
    "display_name": "ToBasicPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromBasicPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "positive",
      "negative"
    ],
    "name": "FromBasicPipe",
    "display_name": "FromBasicPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromBasicPipe_v2": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "basic_pipe",
      "model",
      "clip",
      "vae",
      "positive",
      "negative"
    ],
    "name": "FromBasicPipe_v2",
    "display_name": "FromBasicPipe_v2",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "BasicPipeToDetailerPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "bbox_detector",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "BasicPipeToDetailerPipe",
    "display_name": "BasicPipe -> DetailerPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "BasicPipeToDetailerPipeSDXL": {
    "input": {
      "required": {
        "base_basic_pipe": [
          "BASIC_PIPE"
        ],
        "refiner_basic_pipe": [
          "BASIC_PIPE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_basic_pipe",
        "refiner_basic_pipe",
        "bbox_detector",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "BasicPipeToDetailerPipeSDXL",
    "display_name": "BasicPipe -> DetailerPipe (SDXL)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "DetailerPipeToBasicPipe": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "base_basic_pipe",
      "refiner_basic_pipe"
    ],
    "name": "DetailerPipeToBasicPipe",
    "display_name": "DetailerPipe -> BasicPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "EditBasicPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe"
      ],
      "optional": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative"
      ]
    },
    "output": [
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "basic_pipe"
    ],
    "name": "EditBasicPipe",
    "display_name": "Edit BasicPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "EditDetailerPipe": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "sam_model": [
          "SAM_MODEL"
        ],
        "segm_detector": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "bbox_detector",
        "sam_model",
        "segm_detector",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "EditDetailerPipe",
    "display_name": "Edit DetailerPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "EditDetailerPipeSDXL": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "refiner_model": [
          "MODEL"
        ],
        "refiner_clip": [
          "CLIP"
        ],
        "refiner_positive": [
          "CONDITIONING"
        ],
        "refiner_negative": [
          "CONDITIONING"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "sam_model": [
          "SAM_MODEL"
        ],
        "segm_detector": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "refiner_model",
        "refiner_clip",
        "refiner_positive",
        "refiner_negative",
        "bbox_detector",
        "sam_model",
        "segm_detector",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "EditDetailerPipeSDXL",
    "display_name": "Edit DetailerPipe (SDXL)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "LatentPixelScale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.1,
            "max": 10000,
            "step": 0.1
          }
        ],
        "vae": [
          "VAE"
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "scale_method",
        "scale_factor",
        "vae",
        "use_tiled_vae"
      ],
      "optional": [
        "upscale_model_opt"
      ]
    },
    "output": [
      "LATENT",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "IMAGE"
    ],
    "name": "LatentPixelScale",
    "display_name": "Latent Scale (on Pixel Space)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelKSampleUpscalerProvider": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "vae": [
          "VAE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_opt": [
          "PK_HOOK"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "model",
        "vae",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "use_tiled_vae",
        "tile_size"
      ],
      "optional": [
        "upscale_model_opt",
        "pk_hook_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "PixelKSampleUpscalerProvider",
    "display_name": "PixelKSampleUpscalerProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelKSampleUpscalerProviderPipe": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_opt": [
          "PK_HOOK"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ],
        "tile_cnet_opt": [
          "CONTROL_NET"
        ],
        "tile_cnet_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "use_tiled_vae",
        "basic_pipe",
        "tile_size"
      ],
      "optional": [
        "upscale_model_opt",
        "pk_hook_opt",
        "scheduler_func_opt",
        "tile_cnet_opt",
        "tile_cnet_strength"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "PixelKSampleUpscalerProviderPipe",
    "display_name": "PixelKSampleUpscalerProviderPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "IterativeLatentUpscale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 1,
            "max": 10000,
            "step": 0.1
          }
        ],
        "steps": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "temp_prefix": [
          "STRING",
          {
            "default": ""
          }
        ],
        "upscaler": [
          "UPSCALER"
        ],
        "step_mode": [
          [
            "simple",
            "geometric"
          ],
          {
            "default": "simple"
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_factor",
        "steps",
        "temp_prefix",
        "upscaler",
        "step_mode"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "latent",
      "vae"
    ],
    "name": "IterativeLatentUpscale",
    "display_name": "Iterative Upscale (Latent/on Pixel Space)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "IterativeImageUpscale": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 1,
            "max": 10000,
            "step": 0.1
          }
        ],
        "steps": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "temp_prefix": [
          "STRING",
          {
            "default": ""
          }
        ],
        "upscaler": [
          "UPSCALER"
        ],
        "vae": [
          "VAE"
        ],
        "step_mode": [
          [
            "simple",
            "geometric"
          ],
          {
            "default": "simple"
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "upscale_factor",
        "steps",
        "temp_prefix",
        "upscaler",
        "vae",
        "step_mode"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "IterativeImageUpscale",
    "display_name": "Iterative Upscale (Image)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelTiledKSampleUpscalerProvider": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "vae": [
          "VAE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64
          }
        ],
        "tiling_strategy": [
          [
            "random",
            "padded",
            "simple"
          ]
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_opt": [
          "PK_HOOK"
        ],
        "tile_cnet_opt": [
          "CONTROL_NET"
        ],
        "tile_cnet_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "model",
        "vae",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "tile_width",
        "tile_height",
        "tiling_strategy"
      ],
      "optional": [
        "upscale_model_opt",
        "pk_hook_opt",
        "tile_cnet_opt",
        "tile_cnet_strength"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "PixelTiledKSampleUpscalerProvider",
    "display_name": "PixelTiledKSampleUpscalerProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelTiledKSampleUpscalerProviderPipe": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64
          }
        ],
        "tiling_strategy": [
          [
            "random",
            "padded",
            "simple"
          ]
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_opt": [
          "PK_HOOK"
        ],
        "tile_cnet_opt": [
          "CONTROL_NET"
        ],
        "tile_cnet_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "tile_width",
        "tile_height",
        "tiling_strategy",
        "basic_pipe"
      ],
      "optional": [
        "upscale_model_opt",
        "pk_hook_opt",
        "tile_cnet_opt",
        "tile_cnet_strength"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "PixelTiledKSampleUpscalerProviderPipe",
    "display_name": "PixelTiledKSampleUpscalerProviderPipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "TwoSamplersForMaskUpscalerProvider": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "full_sample_schedule": [
          [
            "none",
            "interleave1",
            "interleave2",
            "interleave3",
            "last1",
            "last2",
            "interleave1+last1",
            "interleave2+last1",
            "interleave3+last1"
          ]
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "base_sampler": [
          "KSAMPLER"
        ],
        "mask_sampler": [
          "KSAMPLER"
        ],
        "mask": [
          "MASK"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "full_sampler_opt": [
          "KSAMPLER"
        ],
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_base_opt": [
          "PK_HOOK"
        ],
        "pk_hook_mask_opt": [
          "PK_HOOK"
        ],
        "pk_hook_full_opt": [
          "PK_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "full_sample_schedule",
        "use_tiled_vae",
        "base_sampler",
        "mask_sampler",
        "mask",
        "vae",
        "tile_size"
      ],
      "optional": [
        "full_sampler_opt",
        "upscale_model_opt",
        "pk_hook_base_opt",
        "pk_hook_mask_opt",
        "pk_hook_full_opt"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "TwoSamplersForMaskUpscalerProvider",
    "display_name": "TwoSamplersForMask Upscaler Provider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "TwoSamplersForMaskUpscalerProviderPipe": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "full_sample_schedule": [
          [
            "none",
            "interleave1",
            "interleave2",
            "interleave3",
            "last1",
            "last2",
            "interleave1+last1",
            "interleave2+last1",
            "interleave3+last1"
          ]
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "base_sampler": [
          "KSAMPLER"
        ],
        "mask_sampler": [
          "KSAMPLER"
        ],
        "mask": [
          "MASK"
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "full_sampler_opt": [
          "KSAMPLER"
        ],
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_base_opt": [
          "PK_HOOK"
        ],
        "pk_hook_mask_opt": [
          "PK_HOOK"
        ],
        "pk_hook_full_opt": [
          "PK_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "full_sample_schedule",
        "use_tiled_vae",
        "base_sampler",
        "mask_sampler",
        "mask",
        "basic_pipe",
        "tile_size"
      ],
      "optional": [
        "full_sampler_opt",
        "upscale_model_opt",
        "pk_hook_base_opt",
        "pk_hook_mask_opt",
        "pk_hook_full_opt"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "TwoSamplersForMaskUpscalerProviderPipe",
    "display_name": "TwoSamplersForMask Upscaler Provider (pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelKSampleHookCombine": {
    "input": {
      "required": {
        "hook1": [
          "PK_HOOK"
        ],
        "hook2": [
          "PK_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "hook1",
        "hook2"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "PixelKSampleHookCombine",
    "display_name": "PixelKSampleHookCombine",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "DenoiseScheduleHookProvider": {
    "input": {
      "required": {
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ],
        "target_denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_iteration",
        "target_denoise"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "DenoiseScheduleHookProvider",
    "display_name": "DenoiseScheduleHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "StepsScheduleHookProvider": {
    "input": {
      "required": {
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ],
        "target_steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_iteration",
        "target_steps"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "StepsScheduleHookProvider",
    "display_name": "StepsScheduleHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "CfgScheduleHookProvider": {
    "input": {
      "required": {
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ],
        "target_cfg": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_iteration",
        "target_cfg"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "CfgScheduleHookProvider",
    "display_name": "CfgScheduleHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "NoiseInjectionHookProvider": {
    "input": {
      "required": {
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ],
        "source": [
          [
            "CPU",
            "GPU"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "start_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ],
        "end_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_iteration",
        "source",
        "seed",
        "start_strength",
        "end_strength"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "NoiseInjectionHookProvider",
    "display_name": "NoiseInjectionHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "UnsamplerHookProvider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "start_end_at_step": [
          "INT",
          {
            "default": 21,
            "min": 0,
            "max": 10000
          }
        ],
        "end_end_at_step": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "normalize": [
          [
            "disable",
            "enable"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "start_end_at_step",
        "end_end_at_step",
        "cfg",
        "sampler_name",
        "scheduler",
        "normalize",
        "positive",
        "negative",
        "schedule_for_iteration"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "UnsamplerHookProvider",
    "display_name": "UnsamplerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "CoreMLDetailerHookProvider": {
    "input": {
      "required": {
        "mode": [
          [
            "512x512",
            "768x768",
            "512x768",
            "768x512"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mode"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "CoreMLDetailerHookProvider",
    "display_name": "CoreMLDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "PreviewDetailerHookProvider": {
    "input": {
      "required": {
        "quality": [
          "INT",
          {
            "default": 95,
            "min": 20,
            "max": 100
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "quality"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "DETAILER_HOOK",
      "UPSCALER_HOOK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "DETAILER_HOOK",
      "UPSCALER_HOOK"
    ],
    "name": "PreviewDetailerHookProvider",
    "display_name": "PreviewDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "DetailerHookCombine": {
    "input": {
      "required": {
        "hook1": [
          "DETAILER_HOOK"
        ],
        "hook2": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "hook1",
        "hook2"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "DetailerHookCombine",
    "display_name": "DetailerHookCombine",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "NoiseInjectionDetailerHookProvider": {
    "input": {
      "required": {
        "schedule_for_cycle": [
          [
            "skip_start",
            "from_start"
          ]
        ],
        "source": [
          [
            "CPU",
            "GPU"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "start_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ],
        "end_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_cycle",
        "source",
        "seed",
        "start_strength",
        "end_strength"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "NoiseInjectionDetailerHookProvider",
    "display_name": "NoiseInjectionDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "UnsamplerDetailerHookProvider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "start_end_at_step": [
          "INT",
          {
            "default": 21,
            "min": 0,
            "max": 10000
          }
        ],
        "end_end_at_step": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "normalize": [
          [
            "disable",
            "enable"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "schedule_for_cycle": [
          [
            "skip_start",
            "from_start"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "start_end_at_step",
        "end_end_at_step",
        "cfg",
        "sampler_name",
        "scheduler",
        "normalize",
        "positive",
        "negative",
        "schedule_for_cycle"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "UnsamplerDetailerHookProvider",
    "display_name": "UnsamplerDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DenoiseSchedulerDetailerHookProvider": {
    "input": {
      "required": {
        "schedule_for_cycle": [
          [
            "simple"
          ]
        ],
        "target_denoise": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_cycle",
        "target_denoise"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "DenoiseSchedulerDetailerHookProvider",
    "display_name": "DenoiseSchedulerDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "SEGSOrderedFilterDetailerHookProvider": {
    "input": {
      "required": {
        "target": [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2"
          ]
        ],
        "order": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "descending",
            "label_off": "ascending"
          }
        ],
        "take_start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "take_count": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "order",
        "take_start",
        "take_count"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "SEGSOrderedFilterDetailerHookProvider",
    "display_name": "SEGSOrderedFilterDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "SEGSRangeFilterDetailerHookProvider": {
    "input": {
      "required": {
        "target": [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "length_percent"
          ]
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "inside",
            "label_off": "outside"
          }
        ],
        "min_value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "max_value": [
          "INT",
          {
            "default": 67108864,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "mode",
        "min_value",
        "max_value"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "SEGSRangeFilterDetailerHookProvider",
    "display_name": "SEGSRangeFilterDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "SEGSLabelFilterDetailerHookProvider": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "preset": [
          [
            "all",
            "hand",
            "face",
            "mouth",
            "eyes",
            "eyebrows",
            "pupils",
            "left_eyebrow",
            "left_eye",
            "left_pupil",
            "right_eyebrow",
            "right_eye",
            "right_pupil",
            "short_sleeved_shirt",
            "long_sleeved_shirt",
            "short_sleeved_outwear",
            "long_sleeved_outwear",
            "vest",
            "sling",
            "shorts",
            "trousers",
            "skirt",
            "short_sleeved_dress",
            "long_sleeved_dress",
            "vest_dress",
            "sling_dress",
            "person",
            "bicycle",
            "car",
            "motorcycle",
            "airplane",
            "bus",
            "train",
            "truck",
            "boat",
            "traffic light",
            "fire hydrant",
            "stop sign",
            "parking meter",
            "bench",
            "bird",
            "cat",
            "dog",
            "horse",
            "sheep",
            "cow",
            "elephant",
            "bear",
            "zebra",
            "giraffe",
            "backpack",
            "umbrella",
            "handbag",
            "tie",
            "suitcase",
            "frisbee",
            "skis",
            "snowboard",
            "sports ball",
            "kite",
            "baseball bat",
            "baseball glove",
            "skateboard",
            "surfboard",
            "tennis racket",
            "bottle",
            "wine glass",
            "cup",
            "fork",
            "knife",
            "spoon",
            "bowl",
            "banana",
            "apple",
            "sandwich",
            "orange",
            "broccoli",
            "carrot",
            "hot dog",
            "pizza",
            "donut",
            "cake",
            "chair",
            "couch",
            "potted plant",
            "bed",
            "dining table",
            "toilet",
            "tv",
            "laptop",
            "mouse",
            "remote",
            "keyboard",
            "cell phone",
            "microwave",
            "oven",
            "toaster",
            "sink",
            "refrigerator",
            "book",
            "clock",
            "vase",
            "scissors",
            "teddy bear",
            "hair drier",
            "toothbrush"
          ]
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "preset",
        "labels"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "SEGSLabelFilterDetailerHookProvider",
    "display_name": "SEGSLabelFilterDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "VariationNoiseDetailerHookProvider": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "strength"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "VariationNoiseDetailerHookProvider",
    "display_name": "VariationNoiseDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "BitwiseAndMask": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "BitwiseAndMask",
    "display_name": "Pixelwise(MASK & MASK)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "SubtractMask": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SubtractMask",
    "display_name": "Pixelwise(MASK - MASK)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "AddMask": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "AddMask",
    "display_name": "Pixelwise(MASK + MASK)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "ImpactSegsAndMask": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "mask"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSegsAndMask",
    "display_name": "Pixelwise(SEGS & MASK)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "ImpactSegsAndMaskForEach": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "masks"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSegsAndMaskForEach",
    "display_name": "Pixelwise(SEGS & MASKS ForEach)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "EmptySegs": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "EmptySegs",
    "display_name": "EmptySegs",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactFlattenMask": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactFlattenMask",
    "display_name": "Flatten Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MediaPipeFaceMeshToSEGS": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "crop_min_size": [
          "INT",
          {
            "min": 10,
            "max": 16384,
            "step": 1,
            "default": 50
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 1
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "face": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "mouth": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "left_eyebrow": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "left_eye": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "left_pupil": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "right_eyebrow": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "right_eye": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "right_pupil": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_factor",
        "bbox_fill",
        "crop_min_size",
        "drop_size",
        "dilation",
        "face",
        "mouth",
        "left_eyebrow",
        "left_eye",
        "left_pupil",
        "right_eyebrow",
        "right_eye",
        "right_pupil"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "MediaPipeFaceMeshToSEGS",
    "display_name": "MediaPipe FaceMesh to SEGS",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MaskToSEGS": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "combined": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "contour_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "combined",
        "crop_factor",
        "bbox_fill",
        "drop_size",
        "contour_fill"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "MaskToSEGS",
    "display_name": "MASK to SEGS",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MaskToSEGS_for_AnimateDiff": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "combined": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "contour_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "combined",
        "crop_factor",
        "bbox_fill",
        "drop_size",
        "contour_fill"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "MaskToSEGS_for_AnimateDiff",
    "display_name": "MASK to SEGS for AnimateDiff",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "ToBinaryMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 255
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ToBinaryMask",
    "display_name": "ToBinaryMask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MasksToMaskList": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MasksToMaskList",
    "display_name": "Mask Batch to Mask List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MaskListToMaskBatch": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskListToMaskBatch",
    "display_name": "Mask List to Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "ImageListToImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageListToImageBatch",
    "display_name": "Image List to Image Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "SetDefaultImageForSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "image": [
          "IMAGE"
        ],
        "override": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "image",
        "override"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "SetDefaultImageForSEGS",
    "display_name": "Set Default Image for SEGS",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "RemoveImageFromSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "RemoveImageFromSEGS",
    "display_name": "Remove Image from SEGS",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "BboxDetectorSEGS": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "default": "all",
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image",
        "threshold",
        "dilation",
        "crop_factor",
        "drop_size",
        "labels"
      ],
      "optional": [
        "detailer_hook"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "BboxDetectorSEGS",
    "display_name": "BBOX Detector (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "SegmDetectorSEGS": {
    "input": {
      "required": {
        "segm_detector": [
          "SEGM_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "default": "all",
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "segm_detector",
        "image",
        "threshold",
        "dilation",
        "crop_factor",
        "drop_size",
        "labels"
      ],
      "optional": [
        "detailer_hook"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "SegmDetectorSEGS",
    "display_name": "SEGM Detector (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ONNXDetectorSEGS": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "default": "all",
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image",
        "threshold",
        "dilation",
        "crop_factor",
        "drop_size",
        "labels"
      ],
      "optional": [
        "detailer_hook"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ONNXDetectorSEGS",
    "display_name": "ONNX Detector (SEGS/legacy) - use BBOXDetector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ImpactSimpleDetectorSEGS_for_AD": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image_frames": [
          "IMAGE"
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "sub_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sub_dilation": [
          "INT",
          {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "sub_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "masking_mode": [
          [
            "Pivot SEGS",
            "Combine neighboring frames",
            "Don't combine"
          ]
        ],
        "segs_pivot": [
          [
            "Combined mask",
            "1st frame mask"
          ]
        ],
        "sam_model_opt": [
          "SAM_MODEL",
          {
            "tooltip": "[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."
          }
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image_frames",
        "bbox_threshold",
        "bbox_dilation",
        "crop_factor",
        "drop_size",
        "sub_threshold",
        "sub_dilation",
        "sub_bbox_expansion",
        "sam_mask_hint_threshold"
      ],
      "optional": [
        "masking_mode",
        "segs_pivot",
        "sam_model_opt",
        "segm_detector_opt"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSimpleDetectorSEGS_for_AD",
    "display_name": "Simple Detector for AnimateDiff (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ImpactSimpleDetectorSEGS": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "sub_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sub_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sub_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "post_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_model_opt": [
          "SAM_MODEL",
          {
            "tooltip": "[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."
          }
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image",
        "bbox_threshold",
        "bbox_dilation",
        "crop_factor",
        "drop_size",
        "sub_threshold",
        "sub_dilation",
        "sub_bbox_expansion",
        "sam_mask_hint_threshold"
      ],
      "optional": [
        "post_dilation",
        "sam_model_opt",
        "segm_detector_opt"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSimpleDetectorSEGS",
    "display_name": "Simple Detector (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ImpactSimpleDetectorSEGSPipe": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ],
        "image": [
          "IMAGE"
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "sub_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sub_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sub_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "post_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe",
        "image",
        "bbox_threshold",
        "bbox_dilation",
        "crop_factor",
        "drop_size",
        "sub_threshold",
        "sub_dilation",
        "sub_bbox_expansion",
        "sam_mask_hint_threshold"
      ],
      "optional": [
        "post_dilation"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSimpleDetectorSEGSPipe",
    "display_name": "Simple Detector (SEGS/pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ImpactControlNetApplySEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "segs_preprocessor": [
          "SEGS_PREPROCESSOR"
        ],
        "control_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "control_net",
        "strength"
      ],
      "optional": [
        "segs_preprocessor",
        "control_image"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactControlNetApplySEGS",
    "display_name": "ControlNetApply (SEGS) - DEPRECATED",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "deprecated": true
  },
  "ImpactControlNetApplyAdvancedSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "segs_preprocessor": [
          "SEGS_PREPROCESSOR"
        ],
        "control_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "control_net",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "segs_preprocessor",
        "control_image",
        "vae"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactControlNetApplyAdvancedSEGS",
    "display_name": "ControlNetApply (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactControlNetClearSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactControlNetClearSEGS",
    "display_name": "ImpactControlNetClearSEGS",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactIPAdapterApplySEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "ipadapter_pipe": [
          "IPADAPTER_PIPE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.7,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "weight_type": [
          [
            "original",
            "linear",
            "channel penalty"
          ],
          {
            "default": "channel penalty"
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "unfold_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "faceid_v2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "weight_v2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "context_crop_factor": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "reference_image": [
          "IMAGE"
        ]
      },
      "optional": {
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "neg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "ipadapter_pipe",
        "weight",
        "noise",
        "weight_type",
        "start_at",
        "end_at",
        "unfold_batch",
        "faceid_v2",
        "weight_v2",
        "context_crop_factor",
        "reference_image"
      ],
      "optional": [
        "combine_embeds",
        "neg_image"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactIPAdapterApplySEGS",
    "display_name": "IPAdapterApply (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactDecomposeSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "SEGS_HEADER",
      "SEG_ELT"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "SEGS_HEADER",
      "SEG_ELT"
    ],
    "name": "ImpactDecomposeSEGS",
    "display_name": "Decompose (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactAssembleSEGS": {
    "input": {
      "required": {
        "seg_header": [
          "SEGS_HEADER"
        ],
        "seg_elt": [
          "SEG_ELT"
        ]
      }
    },
    "input_order": {
      "required": [
        "seg_header",
        "seg_elt"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactAssembleSEGS",
    "display_name": "Assemble (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactFrom_SEG_ELT": {
    "input": {
      "required": {
        "seg_elt": [
          "SEG_ELT"
        ]
      }
    },
    "input_order": {
      "required": [
        "seg_elt"
      ]
    },
    "output": [
      "SEG_ELT",
      "IMAGE",
      "MASK",
      "SEG_ELT_crop_region",
      "SEG_ELT_bbox",
      "SEG_ELT_control_net_wrapper",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "seg_elt",
      "cropped_image",
      "cropped_mask",
      "crop_region",
      "bbox",
      "control_net_wrapper",
      "confidence",
      "label"
    ],
    "name": "ImpactFrom_SEG_ELT",
    "display_name": "From SEG_ELT",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactEdit_SEG_ELT": {
    "input": {
      "required": {
        "seg_elt": [
          "SEG_ELT"
        ]
      },
      "optional": {
        "cropped_image_opt": [
          "IMAGE"
        ],
        "cropped_mask_opt": [
          "MASK"
        ],
        "crop_region_opt": [
          "SEG_ELT_crop_region"
        ],
        "bbox_opt": [
          "SEG_ELT_bbox"
        ],
        "control_net_wrapper_opt": [
          "SEG_ELT_control_net_wrapper"
        ],
        "confidence_opt": [
          "FLOAT",
          {
            "min": 0,
            "max": 1.0,
            "step": 0.1,
            "forceInput": true
          }
        ],
        "label_opt": [
          "STRING",
          {
            "multiline": false,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seg_elt"
      ],
      "optional": [
        "cropped_image_opt",
        "cropped_mask_opt",
        "crop_region_opt",
        "bbox_opt",
        "control_net_wrapper_opt",
        "confidence_opt",
        "label_opt"
      ]
    },
    "output": [
      "SEG_ELT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEG_ELT"
    ],
    "name": "ImpactEdit_SEG_ELT",
    "display_name": "Edit SEG_ELT",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactDilate_Mask_SEG_ELT": {
    "input": {
      "required": {
        "seg_elt": [
          "SEG_ELT"
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seg_elt",
        "dilation"
      ]
    },
    "output": [
      "SEG_ELT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEG_ELT"
    ],
    "name": "ImpactDilate_Mask_SEG_ELT",
    "display_name": "Dilate Mask (SEG_ELT)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactDilateMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "dilation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactDilateMask",
    "display_name": "Dilate Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactGaussianBlurMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "kernel_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 10.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "kernel_size",
        "sigma"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactGaussianBlurMask",
    "display_name": "Gaussian Blur Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactDilateMaskInSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "dilation"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactDilateMaskInSEGS",
    "display_name": "Dilate Mask (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactGaussianBlurMaskInSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "kernel_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 10.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "kernel_size",
        "sigma"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactGaussianBlurMaskInSEGS",
    "display_name": "Gaussian Blur Mask (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactScaleBy_BBOX_SEG_ELT": {
    "input": {
      "required": {
        "seg": [
          "SEG_ELT"
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seg",
        "scale_by"
      ]
    },
    "output": [
      "SEG_ELT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEG_ELT"
    ],
    "name": "ImpactScaleBy_BBOX_SEG_ELT",
    "display_name": "ScaleBy BBOX (SEG_ELT)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactFrom_SEG_ELT_bbox": {
    "input": {
      "required": {
        "bbox": [
          "SEG_ELT_bbox"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "left",
      "top",
      "right",
      "bottom"
    ],
    "name": "ImpactFrom_SEG_ELT_bbox",
    "display_name": "From SEG_ELT bbox",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactFrom_SEG_ELT_crop_region": {
    "input": {
      "required": {
        "crop_region": [
          "SEG_ELT_crop_region"
        ]
      }
    },
    "input_order": {
      "required": [
        "crop_region"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "left",
      "top",
      "right",
      "bottom"
    ],
    "name": "ImpactFrom_SEG_ELT_crop_region",
    "display_name": "From SEG_ELT crop_region",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactCount_Elts_in_SEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "ImpactCount_Elts_in_SEGS",
    "display_name": "Count Elts in SEGS",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "BboxDetectorCombined_v2": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 4,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image",
        "threshold",
        "dilation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "BboxDetectorCombined_v2",
    "display_name": "BBOX Detector (combined)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "SegmDetectorCombined_v2": {
    "input": {
      "required": {
        "segm_detector": [
          "SEGM_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segm_detector",
        "image",
        "threshold",
        "dilation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SegmDetectorCombined_v2",
    "display_name": "SEGM Detector (combined)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "SegsToCombinedMask": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SegsToCombinedMask",
    "display_name": "SEGS to MASK (combined)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "KSamplerProvider": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "tooltip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ],
          {
            "tooltip": "noise schedule"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "basic_pipe input for sampling"
          }
        ]
      },
      "optional": {
        "scheduler_func_opt": [
          "SCHEDULER_FUNC",
          {
            "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "basic_pipe"
      ],
      "optional": [
        "scheduler_func_opt"
      ]
    },
    "output": [
      "KSAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "KSAMPLER"
    ],
    "name": "KSamplerProvider",
    "display_name": "KSamplerProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "sampler wrapper. (Can be used when generating a regional_prompt.)"
    ]
  },
  "TwoSamplersForMask": {
    "input": {
      "required": {
        "latent_image": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "base_sampler": [
          "KSAMPLER",
          {
            "tooltip": "Sampler to apply to the region outside the mask."
          }
        ],
        "mask_sampler": [
          "KSAMPLER",
          {
            "tooltip": "Sampler to apply to the masked region."
          }
        ],
        "mask": [
          "MASK",
          {
            "tooltip": "region mask"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_image",
        "base_sampler",
        "mask_sampler",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "TwoSamplersForMask",
    "display_name": "TwoSamplersForMask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "result latent"
    ]
  },
  "TiledKSamplerProvider": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "tooltip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "tooltip": "noise schedule"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64,
            "tooltip": "Sets the width of the tile to be used in TiledKSampler."
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64,
            "tooltip": "Sets the height of the tile to be used in TiledKSampler."
          }
        ],
        "tiling_strategy": [
          [
            "random",
            "padded",
            "simple"
          ],
          {
            "tooltip": "Sets the tiling strategy for TiledKSampler."
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "basic_pipe input for sampling"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "tile_width",
        "tile_height",
        "tiling_strategy",
        "basic_pipe"
      ]
    },
    "output": [
      "KSAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "KSAMPLER"
    ],
    "name": "TiledKSamplerProvider",
    "display_name": "TiledKSamplerProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "sampler wrapper. (Can be used when generating a regional_prompt.)"
    ]
  },
  "KSamplerAdvancedProvider": {
    "input": {
      "required": {
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "toolip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "toolip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ],
          {
            "toolip": "noise schedule"
          }
        ],
        "sigma_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "toolip": "Multiplier of noise schedule"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "toolip": "basic_pipe input for sampling"
          }
        ]
      },
      "optional": {
        "sampler_opt": [
          "SAMPLER",
          {
            "toolip": "[OPTIONAL] Uses the passed sampler instead of internal impact_sampler."
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC",
          {
            "toolip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cfg",
        "sampler_name",
        "scheduler",
        "sigma_factor",
        "basic_pipe"
      ],
      "optional": [
        "sampler_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "KSAMPLER_ADVANCED"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "KSAMPLER_ADVANCED"
    ],
    "name": "KSamplerAdvancedProvider",
    "display_name": "KSamplerAdvancedProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "sampler wrapper. (Can be used when generating a regional_prompt.)"
    ]
  },
  "TwoAdvancedSamplersForMask": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ],
        "samples": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "base_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "Sampler to apply to the region outside the mask."
          }
        ],
        "mask_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "Sampler to apply to the masked region."
          }
        ],
        "mask": [
          "MASK",
          {
            "tooltip": "region mask"
          }
        ],
        "overlap_factor": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000,
            "tooltip": "To smooth the seams of the region boundaries, expand the mask by the overlap_factor amount to overlap with other regions."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "steps",
        "denoise",
        "samples",
        "base_sampler",
        "mask_sampler",
        "mask",
        "overlap_factor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "TwoAdvancedSamplersForMask",
    "display_name": "TwoAdvancedSamplersForMask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "result latent"
    ]
  },
  "ImpactNegativeConditioningPlaceholder": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ImpactNegativeConditioningPlaceholder",
    "display_name": "Negative Cond Placeholder",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/sampling",
    "output_node": false,
    "output_tooltips": [
      "This is a Placeholder for the FLUX model that does not use Negative Conditioning."
    ]
  },
  "PreviewBridge": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "image": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "block": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "if_empty_mask",
            "label_off": "never",
            "tooltip": "is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped."
          }
        ],
        "restore_mask": [
          [
            "never",
            "always",
            "if_same_size"
          ],
          {
            "tooltip": "if_same_size: If the changed input image is the same size as the previous image, restore using the last saved mask\nalways: Whenever the input image changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`"
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "image"
      ],
      "optional": [
        "block",
        "restore_mask"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "PreviewBridge",
    "display_name": "Preview Bridge (Image)",
    "description": "This is a feature that allows you to edit and send a Mask over a image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "PreviewBridgeLatent": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "image": [
          "STRING",
          {
            "default": ""
          }
        ],
        "preview_method": [
          [
            "Latent2RGB-FLUX.1",
            "Latent2RGB-SDXL",
            "Latent2RGB-SD15",
            "Latent2RGB-SD3",
            "Latent2RGB-SD-X4",
            "Latent2RGB-Playground-2.5",
            "Latent2RGB-SC-Prior",
            "Latent2RGB-SC-B",
            "Latent2RGB-LTXV",
            "TAEF1",
            "TAESDXL",
            "TAESD15",
            "TAESD3"
          ]
        ]
      },
      "optional": {
        "vae_opt": [
          "VAE"
        ],
        "block": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "if_empty_mask",
            "label_off": "never",
            "tooltip": "is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped. Instead, it returns a white mask."
          }
        ],
        "restore_mask": [
          [
            "never",
            "always",
            "if_same_size"
          ],
          {
            "tooltip": "if_same_size: If the changed input latent is the same size as the previous latent, restore using the last saved mask\nalways: Whenever the input latent changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`\nIf the input latent already has a mask, do not restore mask."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "latent",
        "image",
        "preview_method"
      ],
      "optional": [
        "vae_opt",
        "block",
        "restore_mask"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "LATENT",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "MASK"
    ],
    "name": "PreviewBridgeLatent",
    "display_name": "Preview Bridge (Latent)",
    "description": "This is a feature that allows you to edit and send a Mask over a latent image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "ImageSender": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ImgSender"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "link_id"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImageSender",
    "display_name": "Image Sender",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "ImageReceiver": {
    "input": {
      "required": {
        "image": [
          [
            "ComfyUI_00168_.png",
            "ComfyUI_00180_.png",
            "ComfyUI_temp_ktysl_00001_-(1).png",
            "ComfyUI_temp_ktysl_00001_.png",
            "example.png",
            "test.png"
          ]
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_to_workflow": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "image_data": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "trigger_always": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "link_id",
        "save_to_workflow",
        "image_data",
        "trigger_always"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageReceiver",
    "display_name": "Image Receiver",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "LatentSender": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "latents/LatentSender"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "preview_method": [
          [
            "Latent2RGB-FLUX.1",
            "Latent2RGB-SDXL",
            "Latent2RGB-SD15",
            "Latent2RGB-SD3",
            "Latent2RGB-SD-X4",
            "Latent2RGB-Playground-2.5",
            "Latent2RGB-SC-Prior",
            "Latent2RGB-SC-B",
            "Latent2RGB-LTXV",
            "TAEF1",
            "TAESDXL",
            "TAESD15",
            "TAESD3"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "filename_prefix",
        "link_id",
        "preview_method"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LatentSender",
    "display_name": "LatentSender",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "LatentReceiver": {
    "input": {
      "required": {
        "latent": [
          []
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "trigger_always": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "link_id",
        "trigger_always"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentReceiver",
    "display_name": "LatentReceiver",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImageMaskSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4,
            "step": 1
          }
        ],
        "images1": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask1_opt": [
          "MASK"
        ],
        "images2_opt": [
          "IMAGE"
        ],
        "mask2_opt": [
          "MASK"
        ],
        "images3_opt": [
          "IMAGE"
        ],
        "mask3_opt": [
          "MASK"
        ],
        "images4_opt": [
          "IMAGE"
        ],
        "mask4_opt": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "select",
        "images1"
      ],
      "optional": [
        "mask1_opt",
        "images2_opt",
        "mask2_opt",
        "images3_opt",
        "mask3_opt",
        "images4_opt",
        "mask4_opt"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageMaskSwitch",
    "display_name": "Switch (images, mask)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "LatentSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999999,
            "step": 1,
            "tooltip": "The input number you want to output among the inputs"
          }
        ],
        "sel_mode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "select_on_prompt",
            "label_off": "select_on_execution",
            "forceInput": false,
            "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
          }
        ]
      },
      "optional": {
        "input1": [
          "*",
          {
            "lazy": true,
            "tooltip": "Any input. When connected, one more input slot is added."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "select",
        "sel_mode"
      ],
      "optional": [
        "input1"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "selected_value",
      "selected_label",
      "selected_index"
    ],
    "name": "LatentSwitch",
    "display_name": "Switch (latent/legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Output is generated only from the input chosen by the 'select' value.",
      "Slot label of the selected input slot",
      "Outputs the select value as is"
    ]
  },
  "SEGSSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999999,
            "step": 1,
            "tooltip": "The input number you want to output among the inputs"
          }
        ],
        "sel_mode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "select_on_prompt",
            "label_off": "select_on_execution",
            "forceInput": false,
            "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
          }
        ]
      },
      "optional": {
        "input1": [
          "*",
          {
            "lazy": true,
            "tooltip": "Any input. When connected, one more input slot is added."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "select",
        "sel_mode"
      ],
      "optional": [
        "input1"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "selected_value",
      "selected_label",
      "selected_index"
    ],
    "name": "SEGSSwitch",
    "display_name": "Switch (SEGS/legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Output is generated only from the input chosen by the 'select' value.",
      "Slot label of the selected input slot",
      "Outputs the select value as is"
    ]
  },
  "ImpactSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999999,
            "step": 1,
            "tooltip": "The input number you want to output among the inputs"
          }
        ],
        "sel_mode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "select_on_prompt",
            "label_off": "select_on_execution",
            "forceInput": false,
            "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
          }
        ]
      },
      "optional": {
        "input1": [
          "*",
          {
            "lazy": true,
            "tooltip": "Any input. When connected, one more input slot is added."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "select",
        "sel_mode"
      ],
      "optional": [
        "input1"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "selected_value",
      "selected_label",
      "selected_index"
    ],
    "name": "ImpactSwitch",
    "display_name": "Switch (Any)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Output is generated only from the input chosen by the 'select' value.",
      "Slot label of the selected input slot",
      "Outputs the select value as is"
    ]
  },
  "ImpactInversedSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999999,
            "step": 1,
            "tooltip": "The output number you want to send from the input"
          }
        ],
        "input": [
          "*",
          {
            "tooltip": "Any input. When connected, one more input slot is added."
          }
        ]
      },
      "optional": {
        "sel_mode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "select_on_prompt",
            "label_off": "select_on_execution",
            "forceInput": false,
            "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "select",
        "input"
      ],
      "optional": [
        "sel_mode"
      ],
      "hidden": [
        "prompt",
        "unique_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactInversedSwitch",
    "display_name": "Inversed Switch (Any)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Output occurs only from the output selected by the 'select' value.\nWhen slots are connected, additional slots are created."
    ]
  },
  "ImpactWildcardProcessor": {
    "input": {
      "required": {
        "wildcard_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "tooltip": "Enter a prompt using wildcard syntax."
          }
        ],
        "populated_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "tooltip": "The actual value passed during the execution of 'ImpactWildcardProcessor' is what is shown here. The behavior varies slightly depending on the mode. Wildcard syntax can also be used in 'populated_text'."
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Populate",
            "label_off": "Fixed",
            "tooltip": "Populate: Before running the workflow, it overwrites the existing value of 'populated_text' with the prompt processed from 'wildcard_text'. In this mode, 'populated_text' cannot be edited.\nFixed: Ignores wildcard_text and keeps 'populated_text' as is. You can edit 'populated_text' in this mode."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Determines the random seed to be used for wildcard processing."
          }
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "wildcard_text",
        "populated_text",
        "mode",
        "seed",
        "Select to add Wildcard"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ImpactWildcardProcessor",
    "display_name": "ImpactWildcardProcessor",
    "description": "The 'ImpactWildcardProcessor' processes text prompts written in wildcard syntax and outputs the processed text prompt.\n\nTIP: Before the workflow is executed, the processing result of 'wildcard_text' is displayed in 'populated_text', and the populated text is saved along with the workflow. If you want to use a seed converted as input, write the prompt directly in 'populated_text' instead of 'wildcard_text', and set the mode to 'Fixed'.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Prompt",
    "output_node": false
  },
  "ImpactWildcardEncode": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "wildcard_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "tooltip": "Enter a prompt using wildcard syntax."
          }
        ],
        "populated_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "tooltip": "The actual value passed during the execution of 'ImpactWildcardEncode' is what is shown here. The behavior varies slightly depending on the mode. Wildcard syntax can also be used in 'populated_text'."
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Populate",
            "label_off": "Fixed",
            "tooltip": "Populate: Before running the workflow, it overwrites the existing value of 'populated_text' with the prompt processed from 'wildcard_text'. In this mode, 'populated_text' cannot be edited.\nFixed: Ignores wildcard_text and keeps 'populated_text' as is. You can edit 'populated_text' in this mode."
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Determines the random seed to be used for wildcard processing."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "wildcard_text",
        "populated_text",
        "mode",
        "Select to add LoRA",
        "Select to add Wildcard",
        "seed"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "conditioning",
      "populated_text"
    ],
    "name": "ImpactWildcardEncode",
    "display_name": "ImpactWildcardEncode",
    "description": "The 'ImpactWildcardEncode' node processes text prompts written in wildcard syntax and outputs them as conditioning. It also supports LoRA syntax, with the applied LoRA reflected in the model's output.\n\nTIP1: Before the workflow is executed, the processing result of 'wildcard_text' is displayed in 'populated_text', and the populated text is saved along with the workflow. If you want to use a seed converted as input, write the prompt directly in 'populated_text' instead of 'wildcard_text', and set the mode to 'Fixed'.\nTIP2: If the 'Inspire Pack' is installed, LBW(LoRA Block Weight) syntax can also be applied.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Prompt",
    "output_node": false
  },
  "SEGSUpscaler": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "resampling_method": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "rounding_modulus": [
          "INT",
          {
            "default": 8,
            "min": 8,
            "max": 1024,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "upscaler_hook_opt": [
          "UPSCALER_HOOK"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "model",
        "clip",
        "vae",
        "rescale_factor",
        "resampling_method",
        "supersample",
        "rounding_modulus",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "feather",
        "inpaint_model",
        "noise_mask_feather"
      ],
      "optional": [
        "upscale_model_opt",
        "upscaler_hook_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSUpscaler",
    "display_name": "Upscaler (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "SEGSUpscalerPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "resampling_method": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "rounding_modulus": [
          "INT",
          {
            "default": 8,
            "min": 8,
            "max": 1024,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "upscaler_hook_opt": [
          "UPSCALER_HOOK"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "basic_pipe",
        "rescale_factor",
        "resampling_method",
        "supersample",
        "rounding_modulus",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "inpaint_model",
        "noise_mask_feather"
      ],
      "optional": [
        "upscale_model_opt",
        "upscaler_hook_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSUpscalerPipe",
    "display_name": "Upscaler (SEGS/pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "SEGSDetailer": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "noise_mask",
        "force_inpaint",
        "basic_pipe",
        "refiner_ratio",
        "batch_size",
        "cycle"
      ],
      "optional": [
        "refiner_basic_pipe_opt",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "SEGS",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "segs",
      "cnet_images"
    ],
    "name": "SEGSDetailer",
    "display_name": "SEGSDetailer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "SEGSPaste": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "alpha": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "optional": {
        "ref_image_opt": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "feather",
        "alpha"
      ],
      "optional": [
        "ref_image_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSPaste",
    "display_name": "SEGSPaste",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "SEGSPreview": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "alpha_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "min_alpha": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "fallback_image_opt": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "alpha_mode",
        "min_alpha"
      ],
      "optional": [
        "fallback_image_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSPreview",
    "display_name": "SEGSPreview",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "SEGSPreviewCNet": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSPreviewCNet",
    "display_name": "SEGSPreview (CNET Image)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "SEGSToImageList": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      },
      "optional": {
        "fallback_image_opt": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ],
      "optional": [
        "fallback_image_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSToImageList",
    "display_name": "SEGSToImageList",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSToMaskList": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactSEGSToMaskList",
    "display_name": "SEGS to Mask List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSToMaskBatch": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactSEGSToMaskBatch",
    "display_name": "SEGS to Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSConcat": {
    "input": {
      "required": {
        "segs1": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs1"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSEGSConcat",
    "display_name": "SEGS Concat",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSPicker": {
    "input": {
      "required": {
        "picks": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "pysssss.autocomplete": false
          }
        ],
        "segs": [
          "SEGS"
        ]
      },
      "optional": {
        "fallback_image_opt": [
          "IMAGE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "picks",
        "segs"
      ],
      "optional": [
        "fallback_image_opt"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSEGSPicker",
    "display_name": "Picker (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeTileSEGS": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "bbox_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 8
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.01
          }
        ],
        "min_overlap": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ],
        "filter_segs_dilation": [
          "INT",
          {
            "default": 20,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "mask_irregularity": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "irregular_mask_mode": [
          [
            "Reuse fast",
            "Reuse quality",
            "All random fast",
            "All random quality"
          ]
        ]
      },
      "optional": {
        "filter_in_segs_opt": [
          "SEGS"
        ],
        "filter_out_segs_opt": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "bbox_size",
        "crop_factor",
        "min_overlap",
        "filter_segs_dilation",
        "mask_irregularity",
        "irregular_mask_mode"
      ],
      "optional": [
        "filter_in_segs_opt",
        "filter_out_segs_opt"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactMakeTileSEGS",
    "display_name": "Make Tile SEGS",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/__for_testing",
    "output_node": false
  },
  "ImpactSEGSMerge": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSEGSMerge",
    "display_name": "SEGS Merge",
    "description": "SEGS contains multiple SEGs. SEGS Merge integrates several SEGs into a single merged SEG. The label is changed to `merged` and the confidence becomes the minimum confidence. The applied controlnet and cropped_image are removed.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "SEGSDetailerForAnimateDiff": {
    "input": {
      "required": {
        "image_frames": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ]
      },
      "optional": {
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_frames",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "basic_pipe",
        "refiner_ratio"
      ],
      "optional": [
        "refiner_basic_pipe_opt",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "SEGS",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "segs",
      "cnet_images"
    ],
    "name": "SEGSDetailerForAnimateDiff",
    "display_name": "SEGSDetailer For AnimateDiff (SEGS/pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "ImpactKSamplerBasicPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "basic_pipe input for sampling"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "tooltip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ],
          {
            "tooltip": "noise schedule"
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ]
      },
      "optional": {
        "scheduler_func_opt": [
          "SCHEDULER_FUNC",
          {
            "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "latent_image",
        "denoise"
      ],
      "optional": [
        "scheduler_func_opt"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "BASIC_PIPE",
      "LATENT",
      "VAE"
    ],
    "name": "ImpactKSamplerBasicPipe",
    "display_name": "KSampler (pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/sampling",
    "output_node": false,
    "output_tooltips": [
      "passthrough input basic_pipe",
      "result latent",
      "VAE in basic_pipe"
    ]
  },
  "ImpactKSamplerAdvancedBasicPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "basic_pipe input for sampling"
          }
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable",
            "tooltip": "Whether to add noise"
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "tooltip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ],
          {
            "tooltip": "noise schedule"
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "tooltip": "The starting step of the sampling to be applied at this node within the range of 'steps'."
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000,
            "tooltip": "The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."
          }
        ],
        "return_with_leftover_noise": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable",
            "tooltip": "Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."
          }
        ]
      },
      "optional": {
        "scheduler_func_opt": [
          "SCHEDULER_FUNC",
          {
            "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise"
      ],
      "optional": [
        "scheduler_func_opt"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "BASIC_PIPE",
      "LATENT",
      "VAE"
    ],
    "name": "ImpactKSamplerAdvancedBasicPipe",
    "display_name": "KSampler (Advanced/pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/sampling",
    "output_node": false,
    "output_tooltips": [
      "passthrough input basic_pipe",
      "result latent",
      "VAE in basic_pipe"
    ]
  },
  "ReencodeLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "tile_mode": [
          [
            "None",
            "Both",
            "Decode(input) only",
            "Encode(output) only"
          ]
        ],
        "input_vae": [
          "VAE"
        ],
        "output_vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "tile_mode",
        "input_vae",
        "output_vae",
        "tile_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "ReencodeLatent",
    "display_name": "Reencode Latent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ReencodeLatentPipe": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "tile_mode": [
          [
            "None",
            "Both",
            "Decode(input) only",
            "Encode(output) only"
          ]
        ],
        "input_basic_pipe": [
          "BASIC_PIPE"
        ],
        "output_basic_pipe": [
          "BASIC_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "tile_mode",
        "input_basic_pipe",
        "output_basic_pipe"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "ReencodeLatentPipe",
    "display_name": "Reencode Latent (pipe)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactImageBatchToImageList": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImpactImageBatchToImageList",
    "display_name": "Image Batch to Image List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeImageList": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImpactMakeImageList",
    "display_name": "Make Image List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeImageBatch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImpactMakeImageBatch",
    "display_name": "Make Image Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeAnyList": {
    "input": {
      "required": {},
      "optional": {
        "value1": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "value1"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactMakeAnyList",
    "display_name": "Make List (Any)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeMaskList": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactMakeMaskList",
    "display_name": "Make Mask List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeMaskBatch": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactMakeMaskBatch",
    "display_name": "Make Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "RegionalSampler": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "seed_2nd": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Additional noise seed. The behavior is determined by seed_2nd_mode."
          }
        ],
        "seed_2nd_mode": [
          [
            "ignore",
            "fixed",
            "seed+seed_2nd",
            "seed-seed_2nd",
            "increment",
            "decrement",
            "randomize"
          ],
          {
            "tooltip": "application method of seed_2nd. 1) ignore: Do not use seed_2nd. In the base only sampling stage, the seed is applied as a noise seed, and in the regional sampling stage, denoising is performed as it is without additional noise. 2) Others: In the base only sampling stage, the seed is applied as a noise seed, and once it is closed so that there is no leftover noise, new noise is added with seed_2nd and the regional samping stage is performed. a) fixed: Use seed_2nd as it is as an additional noise seed. b) seed+seed_2nd: Apply the value of seed+seed_2nd as an additional noise seed. c) seed-seed_2nd: Apply the value of seed-seed_2nd as an additional noise seed. d) increment: Not implemented yet. Same with fixed. e) decrement: Not implemented yet. Same with fixed. f) randomize: Not implemented yet. Same with fixed."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "base_only_steps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ],
        "samples": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "base_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "The sampler applied outside the area set by the regional_prompt."
          }
        ],
        "regional_prompts": [
          "REGIONAL_PROMPTS",
          {
            "tooltip": "The prompt applied to each region"
          }
        ],
        "overlap_factor": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000,
            "tooltip": "To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."
          }
        ],
        "restore_latent": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled",
            "tooltip": "At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."
          }
        ],
        "additional_mode": [
          [
            "DISABLE",
            "ratio additional",
            "ratio between"
          ],
          {
            "default": "ratio between",
            "tooltip": "..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."
          }
        ],
        "additional_sampler": [
          [
            "AUTO",
            "euler",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_fast",
            "dpmpp_2m",
            "ddpm"
          ],
          {
            "tooltip": "1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."
          }
        ],
        "additional_sigma_ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Multiplier of noise schedule to be applied according to additional_mode."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed",
        "seed_2nd",
        "seed_2nd_mode",
        "steps",
        "base_only_steps",
        "denoise",
        "samples",
        "base_sampler",
        "regional_prompts",
        "overlap_factor",
        "restore_latent",
        "additional_mode",
        "additional_sampler",
        "additional_sigma_ratio"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RegionalSampler",
    "display_name": "RegionalSampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Regional",
    "output_node": false,
    "output_tooltips": [
      "result latent"
    ]
  },
  "RegionalSamplerAdvanced": {
    "input": {
      "required": {
        "add_noise": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled",
            "tooltip": "Whether to add noise"
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "tooltip": "The starting step of the sampling to be applied at this node within the range of 'steps'."
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000,
            "tooltip": "The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."
          }
        ],
        "overlap_factor": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000,
            "tooltip": "To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."
          }
        ],
        "restore_latent": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled",
            "tooltip": "At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."
          }
        ],
        "return_with_leftover_noise": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled",
            "tooltip": "Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "base_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "The sampler applied outside the area set by the regional_prompt."
          }
        ],
        "regional_prompts": [
          "REGIONAL_PROMPTS",
          {
            "tooltip": "The prompt applied to each region"
          }
        ],
        "additional_mode": [
          [
            "DISABLE",
            "ratio additional",
            "ratio between"
          ],
          {
            "default": "ratio between",
            "tooltip": "..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."
          }
        ],
        "additional_sampler": [
          [
            "AUTO",
            "euler",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_fast",
            "dpmpp_2m",
            "ddpm"
          ],
          {
            "tooltip": "1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."
          }
        ],
        "additional_sigma_ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Multiplier of noise schedule to be applied according to additional_mode."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "add_noise",
        "noise_seed",
        "steps",
        "start_at_step",
        "end_at_step",
        "overlap_factor",
        "restore_latent",
        "return_with_leftover_noise",
        "latent_image",
        "base_sampler",
        "regional_prompts",
        "additional_mode",
        "additional_sampler",
        "additional_sigma_ratio"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RegionalSamplerAdvanced",
    "display_name": "RegionalSamplerAdvanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Regional",
    "output_node": false,
    "output_tooltips": [
      "result latent"
    ]
  },
  "CombineRegionalPrompts": {
    "input": {
      "required": {
        "regional_prompts1": [
          "REGIONAL_PROMPTS",
          {
            "tooltip": "input regional_prompts. (Connecting to the input slot increases the number of additional slots.)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "regional_prompts1"
      ]
    },
    "output": [
      "REGIONAL_PROMPTS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGIONAL_PROMPTS"
    ],
    "name": "CombineRegionalPrompts",
    "display_name": "CombineRegionalPrompts",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Regional",
    "output_node": false,
    "output_tooltips": [
      "Combined REGIONAL_PROMPTS"
    ]
  },
  "RegionalPrompt": {
    "input": {
      "required": {
        "mask": [
          "MASK",
          {
            "tooltip": "region mask"
          }
        ],
        "advanced_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "sampler for specified region"
          }
        ]
      },
      "optional": {
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Sets the extra seed to be used for noise variation."
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Sets the strength of the noise variation."
          }
        ],
        "variation_method": [
          [
            "linear",
            "slerp"
          ],
          {
            "tooltip": "Sets how the original noise and extra noise are blended together."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "advanced_sampler"
      ],
      "optional": [
        "variation_seed",
        "variation_strength",
        "variation_method"
      ]
    },
    "output": [
      "REGIONAL_PROMPTS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGIONAL_PROMPTS"
    ],
    "name": "RegionalPrompt",
    "display_name": "RegionalPrompt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Regional",
    "output_node": false,
    "output_tooltips": [
      "regional prompts. (Can be used in the RegionalSampler.)"
    ]
  },
  "ImpactCombineConditionings": {
    "input": {
      "required": {
        "conditioning1": [
          "CONDITIONING",
          {
            "tooltip": "input conditionings. (Connecting to the input slot increases the number of additional slots.)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning1"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ImpactCombineConditionings",
    "display_name": "Combine Conditionings",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Combined conditioning"
    ]
  },
  "ImpactConcatConditionings": {
    "input": {
      "required": {
        "conditioning1": [
          "CONDITIONING",
          {
            "tooltip": "input conditionings. (Connecting to the input slot increases the number of additional slots.)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning1"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ImpactConcatConditionings",
    "display_name": "Concat Conditionings",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Concatenated conditioning"
    ]
  },
  "ImpactSEGSLabelAssign": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "List the label to be assigned in order of segs, separated by commas"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "labels"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSEGSLabelAssign",
    "display_name": "SEGS Assign (label)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSLabelFilter": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "preset": [
          [
            "all",
            "hand",
            "face",
            "mouth",
            "eyes",
            "eyebrows",
            "pupils",
            "left_eyebrow",
            "left_eye",
            "left_pupil",
            "right_eyebrow",
            "right_eye",
            "right_pupil",
            "short_sleeved_shirt",
            "long_sleeved_shirt",
            "short_sleeved_outwear",
            "long_sleeved_outwear",
            "vest",
            "sling",
            "shorts",
            "trousers",
            "skirt",
            "short_sleeved_dress",
            "long_sleeved_dress",
            "vest_dress",
            "sling_dress",
            "person",
            "bicycle",
            "car",
            "motorcycle",
            "airplane",
            "bus",
            "train",
            "truck",
            "boat",
            "traffic light",
            "fire hydrant",
            "stop sign",
            "parking meter",
            "bench",
            "bird",
            "cat",
            "dog",
            "horse",
            "sheep",
            "cow",
            "elephant",
            "bear",
            "zebra",
            "giraffe",
            "backpack",
            "umbrella",
            "handbag",
            "tie",
            "suitcase",
            "frisbee",
            "skis",
            "snowboard",
            "sports ball",
            "kite",
            "baseball bat",
            "baseball glove",
            "skateboard",
            "surfboard",
            "tennis racket",
            "bottle",
            "wine glass",
            "cup",
            "fork",
            "knife",
            "spoon",
            "bowl",
            "banana",
            "apple",
            "sandwich",
            "orange",
            "broccoli",
            "carrot",
            "hot dog",
            "pizza",
            "donut",
            "cake",
            "chair",
            "couch",
            "potted plant",
            "bed",
            "dining table",
            "toilet",
            "tv",
            "laptop",
            "mouse",
            "remote",
            "keyboard",
            "cell phone",
            "microwave",
            "oven",
            "toaster",
            "sink",
            "refrigerator",
            "book",
            "clock",
            "vase",
            "scissors",
            "teddy bear",
            "hair drier",
            "toothbrush"
          ]
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "preset",
        "labels"
      ]
    },
    "output": [
      "SEGS",
      "SEGS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filtered_SEGS",
      "remained_SEGS"
    ],
    "name": "ImpactSEGSLabelFilter",
    "display_name": "SEGS Filter (label)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSRangeFilter": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "target": [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "length_percent",
            "confidence(0-100)"
          ]
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "inside",
            "label_off": "outside"
          }
        ],
        "min_value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "max_value": [
          "INT",
          {
            "default": 67108864,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "target",
        "mode",
        "min_value",
        "max_value"
      ]
    },
    "output": [
      "SEGS",
      "SEGS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filtered_SEGS",
      "remained_SEGS"
    ],
    "name": "ImpactSEGSRangeFilter",
    "display_name": "SEGS Filter (range)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSOrderedFilter": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "target": [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "confidence"
          ]
        ],
        "order": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "descending",
            "label_off": "ascending"
          }
        ],
        "take_start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "take_count": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "target",
        "order",
        "take_start",
        "take_count"
      ]
    },
    "output": [
      "SEGS",
      "SEGS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filtered_SEGS",
      "remained_SEGS"
    ],
    "name": "ImpactSEGSOrderedFilter",
    "display_name": "SEGS Filter (ordered)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactCompare": {
    "input": {
      "required": {
        "cmp": [
          [
            "a = b",
            "a <> b",
            "a > b",
            "a < b",
            "a >= b",
            "a <= b",
            "tt",
            "ff"
          ]
        ],
        "a": [
          "*"
        ],
        "b": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "cmp",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactCompare",
    "display_name": "ImpactCompare",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactConditionalBranch": {
    "input": {
      "required": {
        "cond": [
          "BOOLEAN"
        ],
        "tt_value": [
          "*",
          {
            "lazy": true
          }
        ],
        "ff_value": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "tt_value",
        "ff_value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactConditionalBranch",
    "display_name": "ImpactConditionalBranch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactConditionalBranchSelMode": {
    "input": {
      "required": {
        "cond": [
          "BOOLEAN"
        ]
      },
      "optional": {
        "tt_value": [
          "*"
        ],
        "ff_value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond"
      ],
      "optional": [
        "tt_value",
        "ff_value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactConditionalBranchSelMode",
    "display_name": "ImpactConditionalBranchSelMode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactIfNone": {
    "input": {
      "required": {},
      "optional": {
        "signal": [
          "*"
        ],
        "any_input": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "signal",
        "any_input"
      ]
    },
    "output": [
      "*",
      "BOOLEAN"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "signal_opt",
      "bool"
    ],
    "name": "ImpactIfNone",
    "display_name": "ImpactIfNone",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactConvertDataType": {
    "input": {
      "required": {
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "STRING",
      "FLOAT",
      "INT",
      "BOOLEAN"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "STRING",
      "FLOAT",
      "INT",
      "BOOLEAN"
    ],
    "name": "ImpactConvertDataType",
    "display_name": "ImpactConvertDataType",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactLogicalOperators": {
    "input": {
      "required": {
        "operator": [
          [
            "and",
            "or",
            "xor"
          ]
        ],
        "bool_a": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ],
        "bool_b": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "operator",
        "bool_a",
        "bool_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactLogicalOperators",
    "display_name": "ImpactLogicalOperators",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactInt": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "ImpactInt",
    "display_name": "ImpactInt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactFloat": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -3.402823466e+38,
            "max": 3.402823466e+38
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "ImpactFloat",
    "display_name": "ImpactFloat",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactBoolean": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactBoolean",
    "display_name": "ImpactBoolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactValueSender": {
    "input": {
      "required": {
        "value": [
          "*"
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      },
      "optional": {
        "signal_opt": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "link_id"
      ],
      "optional": [
        "signal_opt"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal"
    ],
    "name": "ImpactValueSender",
    "display_name": "ImpactValueSender",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": true
  },
  "ImpactValueReceiver": {
    "input": {
      "required": {
        "typ": [
          [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN"
          ]
        ],
        "value": [
          "STRING",
          {
            "default": ""
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "typ",
        "value",
        "link_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactValueReceiver",
    "display_name": "ImpactValueReceiver",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactImageInfo": {
    "input": {
      "required": {
        "value": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "batch",
      "height",
      "width",
      "channel"
    ],
    "name": "ImpactImageInfo",
    "display_name": "ImpactImageInfo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": false
  },
  "ImpactLatentInfo": {
    "input": {
      "required": {
        "value": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "batch",
      "height",
      "width",
      "channel"
    ],
    "name": "ImpactLatentInfo",
    "display_name": "ImpactLatentInfo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": false
  },
  "ImpactMinMax": {
    "input": {
      "required": {
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "max",
            "label_off": "min"
          }
        ],
        "a": [
          "*"
        ],
        "b": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "ImpactMinMax",
    "display_name": "ImpactMinMax",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": false
  },
  "ImpactNeg": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactNeg",
    "display_name": "ImpactNeg",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactConditionalStopIteration": {
    "input": {
      "required": {
        "cond": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cond"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImpactConditionalStopIteration",
    "display_name": "ImpactConditionalStopIteration",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": true
  },
  "ImpactStringSelector": {
    "input": {
      "required": {
        "strings": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "multiline": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "select": [
          "INT",
          {
            "min": 0,
            "max": 9223372036854775807,
            "step": 1,
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "strings",
        "multiline",
        "select"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ImpactStringSelector",
    "display_name": "String Selector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "StringListToString": {
    "input": {
      "required": {
        "join_with": [
          "STRING",
          {
            "default": "\\n"
          }
        ],
        "string_list": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "join_with",
        "string_list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "StringListToString",
    "display_name": "String List to String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "WildcardPromptFromString": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "multiline": false,
            "default": "\\n"
          }
        ],
        "prefix_all": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "postfix_all": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "restrict_to_tags": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "exclude_tags": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "delimiter",
        "prefix_all",
        "postfix_all",
        "restrict_to_tags",
        "exclude_tags"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "wildcard",
      "segs_labels"
    ],
    "name": "WildcardPromptFromString",
    "display_name": "Wildcard Prompt from String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactExecutionOrderController": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "value"
      ]
    },
    "output": [
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "signal",
      "value"
    ],
    "name": "ImpactExecutionOrderController",
    "display_name": "Execution Order Controller",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactListBridge": {
    "input": {
      "required": {
        "list_input": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "list_input"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "list_output"
    ],
    "name": "ImpactListBridge",
    "display_name": "List Bridge",
    "description": "When passing the list output through this node, it collects and organizes the data before forwarding it, which ensures that the previous stage's sub-workflow has been completed.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "RemoveNoiseMask": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RemoveNoiseMask",
    "display_name": "Remove Noise Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactLogger": {
    "input": {
      "required": {
        "data": [
          "*"
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "data",
        "text"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImpactLogger",
    "display_name": "ImpactLogger",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Debug",
    "output_node": true
  },
  "ImpactDummyInput": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactDummyInput",
    "display_name": "ImpactDummyInput",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Debug",
    "output_node": false
  },
  "ImpactQueueTrigger": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Trigger",
            "label_off": "Don't trigger"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "mode"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal_opt"
    ],
    "name": "ImpactQueueTrigger",
    "display_name": "Queue Trigger",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactQueueTriggerCountdown": {
    "input": {
      "required": {
        "count": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "total": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 18446744073709551615
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Trigger",
            "label_off": "Don't trigger"
          }
        ]
      },
      "optional": {
        "signal": [
          "*"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "count",
        "total",
        "mode"
      ],
      "optional": [
        "signal"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "*",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "signal_opt",
      "count",
      "total"
    ],
    "name": "ImpactQueueTriggerCountdown",
    "display_name": "Queue Trigger (Countdown)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactSetWidgetValue": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "node_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ]
      },
      "optional": {
        "boolean_value": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ],
        "int_value": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "float_value": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "string_value": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "node_id",
        "widget_name"
      ],
      "optional": [
        "boolean_value",
        "int_value",
        "float_value",
        "string_value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal_opt"
    ],
    "name": "ImpactSetWidgetValue",
    "display_name": "Set Widget Value",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactNodeSetMuteState": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "node_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "set_state": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "active",
            "label_off": "mute"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "node_id",
        "set_state"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal_opt"
    ],
    "name": "ImpactNodeSetMuteState",
    "display_name": "Set Mute State",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactControlBridge": {
    "input": {
      "required": {
        "value": [
          "*"
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Active",
            "label_off": "Stop/Mute/Bypass"
          }
        ],
        "behavior": [
          [
            "Stop",
            "Mute",
            "Bypass"
          ]
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "value",
        "mode",
        "behavior"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "ImpactControlBridge",
    "display_name": "Control Bridge",
    "description": "When behavior is Stop and mode is active, the input value is passed directly to the output.\nWhen behavior is Mute/Bypass and mode is active, the node connected to the output is changed to active state.\nWhen behavior is Stop and mode is Stop/Mute/Bypass, the workflow execution of the current node is halted.\nWhen behavior is Mute/Bypass and mode is Stop/Mute/Bypass, the node connected to the output is changed to Mute/Bypass state.",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": true
  },
  "ImpactIsNotEmptySEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactIsNotEmptySEGS",
    "display_name": "SEGS isn't Empty",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactSleep": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "seconds": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 3600
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "seconds"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal_opt"
    ],
    "name": "ImpactSleep",
    "display_name": "Sleep",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactRemoteBoolean": {
    "input": {
      "required": {
        "node_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "value": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "True",
            "label_off": "False"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "node_id",
        "widget_name",
        "value"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImpactRemoteBoolean",
    "display_name": "Remote Boolean (on prompt)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactRemoteInt": {
    "input": {
      "required": {
        "node_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "value": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "node_id",
        "widget_name",
        "value"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImpactRemoteInt",
    "display_name": "Remote Int (on prompt)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactHFTransformersClassifierProvider": {
    "input": {
      "required": {
        "preset_repo_id": [
          [
            "rizvandwiki/gender-classification-2",
            "NTQAI/pedestrian_gender_recognition",
            "Leilab/gender_class",
            "ProjectPersonal/GenderClassifier",
            "crangana/trained-gender",
            "cledoux42/GenderNew_v002",
            "ivensamdh/genderage2",
            "Manual repo id"
          ]
        ],
        "manual_repo_id": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "device_mode": [
          [
            "AUTO",
            "Prefer GPU",
            "CPU"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "preset_repo_id",
        "manual_repo_id",
        "device_mode"
      ]
    },
    "output": [
      "TRANSFORMERS_CLASSIFIER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "TRANSFORMERS_CLASSIFIER"
    ],
    "name": "ImpactHFTransformersClassifierProvider",
    "display_name": "HF Transformers Classifier Provider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/HuggingFace",
    "output_node": false
  },
  "ImpactSEGSClassify": {
    "input": {
      "required": {
        "classifier": [
          "TRANSFORMERS_CLASSIFIER"
        ],
        "segs": [
          "SEGS"
        ],
        "preset_expr": [
          [
            "#Female > #Male",
            "#Female < #Male",
            "female > 0.5",
            "male > 0.5",
            "Age16to25 > 0.1",
            "Age50to69 > 0.1",
            "Manual expr"
          ]
        ],
        "manual_expr": [
          "STRING",
          {
            "multiline": false
          }
        ]
      },
      "optional": {
        "ref_image_opt": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "classifier",
        "segs",
        "preset_expr",
        "manual_expr"
      ],
      "optional": [
        "ref_image_opt"
      ]
    },
    "output": [
      "SEGS",
      "SEGS",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      true
    ],
    "output_name": [
      "filtered_SEGS",
      "remained_SEGS",
      "detected_labels"
    ],
    "name": "ImpactSEGSClassify",
    "display_name": "SEGS Classify",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/HuggingFace",
    "output_node": false
  },
  "ImpactSchedulerAdapter": {
    "input": {
      "required": {
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "defaultInput": true
          }
        ],
        "extra_scheduler": [
          [
            "None",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scheduler",
        "extra_scheduler"
      ]
    },
    "output": [
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal",
        "AYS SDXL",
        "AYS SD1",
        "AYS SVD",
        "GITS[coeff=1.2]",
        "LTXV[default]"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "scheduler"
    ],
    "name": "ImpactSchedulerAdapter",
    "display_name": "Impact Scheduler Adapter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "GITSSchedulerFuncProvider": {
    "input": {
      "required": {
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05,
            "tooltip": "coeff factor of GITS Scheduler"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "denoise amount for noise schedule"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coeff",
        "denoise"
      ]
    },
    "output": [
      "SCHEDULER_FUNC"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCHEDULER_FUNC"
    ],
    "name": "GITSSchedulerFuncProvider",
    "display_name": "GITSScheduler Func Provider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Pack",
    "category": "ImpactPack/sampling",
    "output_node": false,
    "output_tooltips": [
      "Returns a function that generates a noise schedule using GITSScheduler. This can be used in place of a predetermined noise schedule to dynamically generate a noise schedule based on the steps."
    ]
  },
  "SaveImageWebsocket": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWebsocket",
    "display_name": "SaveImageWebsocket",
    "description": "",
    "python_module": "custom_nodes.websocket_image_save",
    "category": "api/image",
    "output_node": true
  },
  "Checkpoint Selector": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      [
        "1.5/aziibpixelmix_v10.safetensors",
        "FLUX1/flux1-dev-fp8.safetensors",
        "SD1.5/aziibpixelmix_v10.safetensors",
        "SDXL/dreamshaper_xl_v2.1.safetensors",
        "SDXL/sd_xl_base_1.0.safetensors",
        "SDXL/sd_xl_refiner_1.0.safetensors",
        "atomixAnimeXL_v10.safetensors",
        "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
        "juggernautXL_juggXIByRundiffusion.safetensors",
        "meinamix.safetensors",
        "photogasm.safetensors",
        "realvisxlV40_v40LightningBakedvae.safetensors",
        "revanimated.safetensors",
        "sd_xl_base_1.0.safetensors",
        "sd_xl_refiner_1.0.safetensors",
        "theAraminta_cv5.safetensors"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ckpt_name"
    ],
    "name": "Checkpoint Selector",
    "display_name": "Checkpoint Selector",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools/utils",
    "output_node": false
  },
  "Save Image w/Metadata": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename": [
          "STRING",
          {
            "default": "%time_%seed",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "extension": [
          [
            "png",
            "jpeg",
            "webp"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "modelname": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      },
      "optional": {
        "positive": [
          "STRING",
          {
            "default": "unknown",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "unknown",
            "multiline": true
          }
        ],
        "seed_value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "lossless_webp": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "quality_jpeg_or_webp": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100
          }
        ],
        "counter": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "time_format": [
          "STRING",
          {
            "default": "%Y-%m-%d-%H%M%S",
            "multiline": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename",
        "path",
        "extension",
        "steps",
        "cfg",
        "modelname",
        "sampler_name",
        "scheduler"
      ],
      "optional": [
        "positive",
        "negative",
        "seed_value",
        "width",
        "height",
        "lossless_webp",
        "quality_jpeg_or_webp",
        "counter",
        "time_format"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Image w/Metadata",
    "display_name": "Save Image w/Metadata",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools",
    "output_node": true
  },
  "Sampler Selector": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name"
      ]
    },
    "output": [
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "gradient_estimation",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "sampler_name"
    ],
    "name": "Sampler Selector",
    "display_name": "Sampler Selector",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools/utils",
    "output_node": false
  },
  "Scheduler Selector": {
    "input": {
      "required": {
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scheduler"
      ]
    },
    "output": [
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "scheduler"
    ],
    "name": "Scheduler Selector",
    "display_name": "Scheduler Selector",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools/utils",
    "output_node": false
  },
  "Seed Generator": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Seed Generator",
    "display_name": "Seed Generator",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools/utils",
    "output_node": false
  },
  "String Literal": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "String Literal",
    "display_name": "String Literal",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools/utils",
    "output_node": false
  },
  "Width/Height Literal": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Width/Height Literal",
    "display_name": "Width/Height Literal",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools/utils",
    "output_node": false
  },
  "Cfg Literal": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "Cfg Literal",
    "display_name": "Cfg Literal",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools/utils",
    "output_node": false
  },
  "Int Literal": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Int Literal",
    "display_name": "Int Literal",
    "description": "",
    "python_module": "custom_nodes.comfy-image-saver",
    "category": "ImageSaverTools/utils",
    "output_node": false
  },
  "InstantIDModelLoader": {
    "input": {
      "required": {
        "instantid_file": [
          [
            "ip-adapter.bin"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "instantid_file"
      ]
    },
    "output": [
      "INSTANTID"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INSTANTID"
    ],
    "name": "InstantIDModelLoader",
    "display_name": "Load InstantID Model",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_InstantID",
    "category": "InstantID",
    "output_node": false
  },
  "InstantIDFaceAnalysis": {
    "input": {
      "required": {
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "CoreML"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "provider"
      ]
    },
    "output": [
      "FACEANALYSIS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACEANALYSIS"
    ],
    "name": "InstantIDFaceAnalysis",
    "display_name": "InstantID Face Analysis",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_InstantID",
    "category": "InstantID",
    "output_node": false
  },
  "ApplyZenID": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "image_source": [
          "IMAGE"
        ],
        "image_face": [
          "IMAGE"
        ],
        "instantid_file": [
          [
            "ip-adapter.bin"
          ]
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "CoreML"
          ]
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "blur_kernel": [
          "INT",
          {
            "default": 51,
            "min": 1,
            "max": 101,
            "step": 2
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "model",
        "clip",
        "vae",
        "image_source",
        "image_face",
        "instantid_file",
        "insightface",
        "weight",
        "start_at",
        "end_at",
        "blur_kernel"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "positive",
      "negative",
      "latent"
    ],
    "name": "ApplyZenID",
    "display_name": "ZenID FaceSwap",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ZenID",
    "category": "ZenID",
    "output_node": false
  },
  "ZenIDCombineFace": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "instantid_file": [
          [
            "ip-adapter.bin"
          ]
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "CoreML"
          ]
        ],
        "balance": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "model",
        "positive",
        "negative",
        "image_1",
        "image_2",
        "instantid_file",
        "insightface",
        "balance",
        "weight",
        "start_at",
        "end_at"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "positive",
      "negative"
    ],
    "name": "ZenIDCombineFace",
    "display_name": "ZenID Combine Face",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ZenID",
    "category": "ZenID",
    "output_node": false
  },
  "XY Input: Lora Block Weight //Inspire": {
    "input": {
      "required": {
        "category_filter": [
          [
            "All",
            "",
            "SDXL-Lightning",
            "SD1.5",
            "ipadapter",
            "SDXL",
            "1.5"
          ]
        ],
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "inverse": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "A": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "B": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "preset": [
          [
            "Preset",
            "SD-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SD-INS:1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-IND:1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0",
            "SD-INALL:1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0",
            "SD-MIDD:1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0",
            "SD-MIDD0.2:1,0,0,0,0,0,0.2,0.4,0.4,0.2,0,0,0,0,0,0,0",
            "SD-MIDD0.8:1,0,0,0,0,0.5,0.8,0.8,0.4,0,0,0,0,0,0,0,0",
            "SD-MOUT:1,0,0,0,0,0,1,1,1,1,1,1,1,1,0.5,0,0",
            "SD-OUTD:1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0",
            "SD-OUTS:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1",
            "SD-OUTALL:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
            "SD-ROUT:1,1,1,1,1,1,1,1,R,R,R,R,R,R,R,R,R",
            "SD-AOUT:A,1,1,1,1,1,1,1,1,1,1,1,A,A,A,A,A",
            "SD-AB:A,B,B,B,B,B,B,B,B,B,B,B,A,A,A,A,A",
            "SD-ALL0.5:0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5",
            "SD-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SD-LyC-INALL:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-MIDALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-NONE:0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-ALL:1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-INALL:1,1,1,1,1,0,0,0,0,0,0,0",
            "SDXL-MIDALL:1,0,0,0,0,1,0,0,0,0,0,0",
            "SDXL-OUTALL:1,0,0,0,0,0,1,1,1,1,1,1",
            "SDXL-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-LyC-INALL:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-MIDALL:1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
            "FLUX-DBL-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "FLUX-DBL-FRONT7:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-DBL-MID6:1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0",
            "FLUX-DBL-TAIL6:1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1",
            "FLUX-SINGLE-ALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "FLUX-SINGLE-1to10:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-11to20:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-21to30:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-31to37:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1",
            "FLUX-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "@SD-FULL-TEST:17",
            "@SD-BLOCK1-TEST:17,12,1",
            "@SD-BLOCK2-TEST:17,12,2",
            "@SD-BLOCK3-TEST:17,12,3",
            "@SD-BLOCK4-TEST:17,12,4",
            "@SD-BLOCK5-TEST:17,12,5",
            "@SD-BLOCK6-TEST:17,12,6",
            "@SD-BLOCK7-TEST:17,12,7",
            "@SD-BLOCK8-TEST:17,12,8",
            "@SD-BLOCK9-TEST:17,12,9",
            "@SD-BLOCK10-TEST:17,12,10",
            "@SD-BLOCK11-TEST:17,12,11",
            "@SD-BLOCK12-TEST:17,12,12",
            "@SD-BLOCK13-TEST:17,12,13",
            "@SD-BLOCK14-TEST:17,12,14",
            "@SD-BLOCK15-TEST:17,12,15",
            "@SD-BLOCK16-TEST:17,12,16",
            "@SD-BLOCK17-TEST:17,12,17",
            "@SD-LyC-FULL-TEST:27",
            "@SDXL-FULL-TEST:12",
            "@SDXL-LyC-FULL-TEST:21",
            "@FLUX-DBL-FULL:19",
            "@FLUX-DBL-SGL-FULL:58",
            "@FLUX-DBL0-TEST:19,14,2",
            "@FLUX-DBL1-TEST:19,14,3",
            "@FLUX-DBL2-TEST:19,14,4",
            "@FLUX-DBL3-TEST:19,14,5",
            "@FLUX-DBL4-TEST:19,14,6",
            "@FLUX-DBL5-TEST:19,14,7",
            "@FLUX-DBL6-TEST:19,14,8",
            "@FLUX-DBL7-TEST:19,14,9",
            "@FLUX-DBL8-TEST:19,14,10",
            "@FLUX-DBL9-TEST:19,14,11",
            "@FLUX-DBL10-TEST:19,14,12",
            "@FLUX-DBL11-TEST:19,14,13",
            "@FLUX-DBL12-TEST:19,14,14",
            "@FLUX-DBL13-TEST:19,14,15",
            "@FLUX-DBL14-TEST:19,14,16",
            "@FLUX-DBL15-TEST:19,14,17",
            "@FLUX-DBL16-TEST:19,14,18",
            "@FLUX-DBL17-TEST:19,14,19",
            "@FLUX-DBL18-TEST:19,14,20",
            "@FLUX-SGL0-TEST:58,6,21",
            "@FLUX-SGL1-TEST:58,6,22",
            "@FLUX-SGL2-TEST:58,6,23",
            "@FLUX-SGL3-TEST:58,6,24",
            "@FLUX-SGL4-TEST:58,6,25",
            "@FLUX-SGL5-TEST:58,6,26",
            "@FLUX-SGL6-TEST:58,6,27",
            "@FLUX-SGL7-TEST:58,6,28",
            "@FLUX-SGL8-TEST:58,6,29",
            "@FLUX-SGL9-TEST:58,6,30",
            "@FLUX-SGL10-TEST:58,6,31",
            "@FLUX-SGL11-TEST:58,6,32",
            "@FLUX-SGL12-TEST:58,6,33",
            "@FLUX-SGL13-TEST:58,6,34",
            "@FLUX-SGL14-TEST:58,6,35",
            "@FLUX-SGL15-TEST:58,6,36",
            "@FLUX-SGL16-TEST:58,6,37",
            "@FLUX-SGL17-TEST:58,6,38",
            "@FLUX-SGL18-TEST:58,6,39",
            "@FLUX-SGL19-TEST:58,6,40",
            "@FLUX-SGL20-TEST:58,6,41",
            "@FLUX-SGL21-TEST:58,6,42",
            "@FLUX-SGL22-TEST:58,6,43",
            "@FLUX-SGL23-TEST:58,6,44",
            "@FLUX-SGL24-TEST:58,6,45",
            "@FLUX-SGL25-TEST:58,6,46",
            "@FLUX-SGL26-TEST:58,6,47",
            "@FLUX-SGL27-TEST:58,6,48",
            "@FLUX-SGL28-TEST:58,6,49",
            "@FLUX-SGL29-TEST:58,6,50",
            "@FLUX-SGL30-TEST:58,6,51",
            "@FLUX-SGL31-TEST:58,6,52",
            "@FLUX-SGL32-TEST:58,6,53",
            "@FLUX-SGL33-TEST:58,6,54",
            "@FLUX-SGL34-TEST:58,6,55",
            "@FLUX-SGL35-TEST:58,6,56",
            "@FLUX-SGL36-TEST:58,6,57",
            "@FLUX-SGL37-TEST:58,6,58",
            "@FLUX-SGL38-TEST:58,6,59"
          ]
        ],
        "block_vectors": [
          "STRING",
          {
            "multiline": true,
            "default": "SD-NONE/SD-ALL\nSD-ALL/SD-ALL\nSD-INS/SD-ALL\nSD-IND/SD-ALL\nSD-INALL/SD-ALL\nSD-MIDD/SD-ALL\nSD-MIDD0.2/SD-ALL\nSD-MIDD0.8/SD-ALL\nSD-MOUT/SD-ALL\nSD-OUTD/SD-ALL\nSD-OUTS/SD-ALL\nSD-OUTALL/SD-ALL",
            "placeholder": "{target vector}/{reference vector}",
            "pysssss.autocomplete": false
          }
        ],
        "heatmap_palette": [
          [
            "viridis",
            "magma",
            "plasma",
            "inferno",
            "cividis"
          ]
        ],
        "heatmap_alpha": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "heatmap_strength": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "xyplot_mode": [
          [
            "Simple",
            "Diff",
            "Diff+Heatmap"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "category_filter",
        "lora_name",
        "strength_model",
        "strength_clip",
        "inverse",
        "seed",
        "A",
        "B",
        "preset",
        "block_vectors",
        "heatmap_palette",
        "heatmap_alpha",
        "heatmap_strength",
        "xyplot_mode"
      ]
    },
    "output": [
      "XY",
      "XY"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "X (vectors)",
      "Y (effect_compares)"
    ],
    "name": "XY Input: Lora Block Weight //Inspire",
    "display_name": "XY Input: LoRA Block Weight",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/LoraBlockWeight",
    "output_node": false
  },
  "LoraLoaderBlockWeight //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "category_filter": [
          [
            "All",
            "",
            "SDXL-Lightning",
            "SD1.5",
            "ipadapter",
            "SDXL",
            "1.5"
          ]
        ],
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "inverse": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False",
            "tooltip": "Apply the following weights for each block:\nTrue: 1 - weight\nFalse: weight"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": ""
          }
        ],
        "A": [
          "FLOAT",
          {
            "default": 4.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "B": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "preset": [
          [
            "Preset",
            "SD-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SD-INS:1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-IND:1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0",
            "SD-INALL:1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0",
            "SD-MIDD:1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0",
            "SD-MIDD0.2:1,0,0,0,0,0,0.2,0.4,0.4,0.2,0,0,0,0,0,0,0",
            "SD-MIDD0.8:1,0,0,0,0,0.5,0.8,0.8,0.4,0,0,0,0,0,0,0,0",
            "SD-MOUT:1,0,0,0,0,0,1,1,1,1,1,1,1,1,0.5,0,0",
            "SD-OUTD:1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0",
            "SD-OUTS:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1",
            "SD-OUTALL:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
            "SD-ROUT:1,1,1,1,1,1,1,1,R,R,R,R,R,R,R,R,R",
            "SD-AOUT:A,1,1,1,1,1,1,1,1,1,1,1,A,A,A,A,A",
            "SD-AB:A,B,B,B,B,B,B,B,B,B,B,B,A,A,A,A,A",
            "SD-ALL0.5:0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5",
            "SD-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SD-LyC-INALL:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-MIDALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-NONE:0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-ALL:1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-INALL:1,1,1,1,1,0,0,0,0,0,0,0",
            "SDXL-MIDALL:1,0,0,0,0,1,0,0,0,0,0,0",
            "SDXL-OUTALL:1,0,0,0,0,0,1,1,1,1,1,1",
            "SDXL-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-LyC-INALL:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-MIDALL:1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
            "FLUX-DBL-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "FLUX-DBL-FRONT7:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-DBL-MID6:1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0",
            "FLUX-DBL-TAIL6:1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1",
            "FLUX-SINGLE-ALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "FLUX-SINGLE-1to10:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-11to20:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-21to30:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-31to37:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1",
            "FLUX-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
          ]
        ],
        "block_vector": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "block weight vectors",
            "default": "1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
            "pysssss.autocomplete": false
          }
        ],
        "bypass": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "category_filter",
        "lora_name",
        "strength_model",
        "strength_clip",
        "inverse",
        "seed",
        "A",
        "B",
        "preset",
        "block_vector",
        "bypass"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "populated_vector"
    ],
    "name": "LoraLoaderBlockWeight //Inspire",
    "display_name": "LoRA Loader (Block Weight)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/LoraBlockWeight",
    "output_node": false
  },
  "LoraBlockInfo //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "block_info": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "block_info"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LoraBlockInfo //Inspire",
    "display_name": "LoRA Block Info",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/LoraBlockWeight",
    "output_node": true
  },
  "MakeLBW //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "category_filter": [
          [
            "All",
            "",
            "SDXL-Lightning",
            "SD1.5",
            "ipadapter",
            "SDXL",
            "1.5"
          ]
        ],
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "inverse": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False",
            "tooltip": "Apply the following weights for each block:\nTrue: 1 - weight\nFalse: weight"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": ""
          }
        ],
        "A": [
          "FLOAT",
          {
            "default": 4.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "B": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "preset": [
          [
            "Preset",
            "SD-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SD-INS:1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-IND:1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0",
            "SD-INALL:1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0",
            "SD-MIDD:1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0",
            "SD-MIDD0.2:1,0,0,0,0,0,0.2,0.4,0.4,0.2,0,0,0,0,0,0,0",
            "SD-MIDD0.8:1,0,0,0,0,0.5,0.8,0.8,0.4,0,0,0,0,0,0,0,0",
            "SD-MOUT:1,0,0,0,0,0,1,1,1,1,1,1,1,1,0.5,0,0",
            "SD-OUTD:1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0",
            "SD-OUTS:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1",
            "SD-OUTALL:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
            "SD-ROUT:1,1,1,1,1,1,1,1,R,R,R,R,R,R,R,R,R",
            "SD-AOUT:A,1,1,1,1,1,1,1,1,1,1,1,A,A,A,A,A",
            "SD-AB:A,B,B,B,B,B,B,B,B,B,B,B,A,A,A,A,A",
            "SD-ALL0.5:0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5",
            "SD-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SD-LyC-INALL:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-MIDALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "SD-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-NONE:0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-ALL:1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-INALL:1,1,1,1,1,0,0,0,0,0,0,0",
            "SDXL-MIDALL:1,0,0,0,0,1,0,0,0,0,0,0",
            "SDXL-OUTALL:1,0,0,0,0,0,1,1,1,1,1,1",
            "SDXL-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "SDXL-LyC-INALL:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-MIDALL:1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0",
            "SDXL-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
            "FLUX-DBL-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "FLUX-DBL-FRONT7:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-DBL-MID6:1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0",
            "FLUX-DBL-TAIL6:1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1",
            "FLUX-SINGLE-ALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
            "FLUX-SINGLE-1to10:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-11to20:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-21to30:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0",
            "FLUX-SINGLE-31to37:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1",
            "FLUX-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
          ]
        ],
        "block_vector": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "block weight vectors",
            "default": "1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
            "pysssss.autocomplete": false
          }
        ],
        "bypass": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "category_filter",
        "lora_name",
        "inverse",
        "seed",
        "A",
        "B",
        "preset",
        "block_vector",
        "bypass"
      ]
    },
    "output": [
      "LBW_MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "lbw_model",
      "populated_vector"
    ],
    "name": "MakeLBW //Inspire",
    "display_name": "Make LoRA Block Weight",
    "description": "Instead of directly applying the LoRA Block Weight to the MODEL, it is generated in a separate LBW_MODEL form.",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/LoraBlockWeight",
    "output_node": false
  },
  "ApplyLBW //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lbw_model": [
          "LBW_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "strength_model",
        "strength_clip",
        "lbw_model"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "ApplyLBW //Inspire",
    "display_name": "Apply LoRA Block Weight",
    "description": "Apply LBW_MODEL to MODEL and CLIP",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/LoraBlockWeight",
    "output_node": false
  },
  "SaveLBW //Inspire": {
    "input": {
      "required": {
        "lbw_model": [
          "LBW_MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "lbw_model",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveLBW //Inspire",
    "display_name": "Save LoRA Block Weight",
    "description": "Save LBW_MODEL as a .lbw.safetensors file",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/LoraBlockWeight",
    "output_node": true
  },
  "LoadLBW //Inspire": {
    "input": {
      "required": {
        "lbw_model": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "lbw_model"
      ]
    },
    "output": [
      "LBW_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LBW_MODEL"
    ],
    "name": "LoadLBW //Inspire",
    "display_name": "Load LoRA Block Weight",
    "description": "Load LBW_MODEL from .lbw.safetensors file",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/LoraBlockWeight",
    "output_node": false
  },
  "OpenPose_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "detect_hand": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "detect_body": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "detect_face": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "resolution_upscale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.5,
            "max": 100,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution_upscale_by"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "OpenPose_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "OpenPose Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "DWPreprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "detect_hand": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "detect_body": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "detect_face": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "resolution_upscale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.5,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.onnx"
          }
        ],
        "pose_estimator": [
          [
            "dw-ll_ucoco_384_bs5.torchscript.pt",
            "dw-ll_ucoco_384.onnx",
            "dw-ll_ucoco.onnx"
          ],
          {
            "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution_upscale_by",
        "bbox_detector",
        "pose_estimator"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "DWPreprocessor_Provider_for_SEGS //Inspire",
    "display_name": "DWPreprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "MiDaS_DepthMap_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.05
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "bg_threshold"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "MiDaS_DepthMap_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "MiDaS Depth Map Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "LeRes_DepthMap_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "rm_nearest": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "rm_background": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "boost": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "rm_nearest",
        "rm_background"
      ],
      "optional": [
        "boost"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "LeRes_DepthMap_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "LeReS Depth Map Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "Canny_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "low_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ],
        "high_threshold": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "low_threshold",
        "high_threshold"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "Canny_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "Canny Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "MediaPipe_FaceMesh_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "max_faces": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "min_confidence": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "resolution_upscale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.5,
            "max": 100,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "max_faces",
        "min_confidence",
        "resolution_upscale_by"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "MediaPipe_FaceMesh_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "MediaPipe FaceMesh Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "HEDPreprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "safe": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "safe"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "HEDPreprocessor_Provider_for_SEGS //Inspire",
    "display_name": "HED Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "FakeScribblePreprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "safe": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "safe"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "FakeScribblePreprocessor_Provider_for_SEGS //Inspire",
    "display_name": "Fake Scribble Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "AnimeLineArt_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "AnimeLineArt_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "AnimeLineArt Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "Manga2Anime_LineArt_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "Manga2Anime_LineArt_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "Manga2Anime LineArt Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "LineArt_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "coarse": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coarse"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "LineArt_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "LineArt Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "Color_Preprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "Color_Preprocessor_Provider_for_SEGS //Inspire",
    "display_name": "Color Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "InpaintPreprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {},
      "optional": {
        "black_pixel_for_xinsir_cn": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "black_pixel_for_xinsir_cn"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "InpaintPreprocessor_Provider_for_SEGS //Inspire",
    "display_name": "Inpaint Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "TilePreprocessor_Provider_for_SEGS //Inspire": {
    "input": {
      "required": {
        "pyrUp_iters": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pyrUp_iters"
      ]
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "TilePreprocessor_Provider_for_SEGS //Inspire",
    "display_name": "Tile Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "MeshGraphormerDepthMapPreprocessorProvider_for_SEGS //Inspire": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "SEGS_PREPROCESSOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS_PREPROCESSOR"
    ],
    "name": "MeshGraphormerDepthMapPreprocessorProvider_for_SEGS //Inspire",
    "display_name": "MeshGraphormer Depth Map Preprocessor Provider (SEGS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/SEGS/ControlNet",
    "output_node": false
  },
  "MediaPipeFaceMeshDetectorProvider //Inspire": {
    "input": {
      "required": {
        "max_faces": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "face": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "mouth": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "left_eyebrow": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "left_eye": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "left_pupil": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "right_eyebrow": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "right_eye": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "right_pupil": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "max_faces",
        "face",
        "mouth",
        "left_eyebrow",
        "left_eye",
        "left_pupil",
        "right_eyebrow",
        "right_eye",
        "right_pupil"
      ]
    },
    "output": [
      "BBOX_DETECTOR",
      "SEGM_DETECTOR"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "BBOX_DETECTOR",
      "SEGM_DETECTOR"
    ],
    "name": "MediaPipeFaceMeshDetectorProvider //Inspire",
    "display_name": "MediaPipeFaceMesh Detector Provider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Detector",
    "output_node": false
  },
  "KSampler //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ],
        "batch_seed_mode": [
          [
            "incremental",
            "comfy",
            "variation str inc:0.01",
            "variation str inc:0.05"
          ]
        ],
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "variation_method": [
          [
            "linear",
            "slerp"
          ]
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise",
        "noise_mode",
        "batch_seed_mode",
        "variation_seed",
        "variation_strength"
      ],
      "optional": [
        "variation_method",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler //Inspire",
    "display_name": "KSampler (inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/a1111_compat",
    "output_node": false
  },
  "KSamplerAdvanced //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ],
        "return_with_leftover_noise": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "batch_seed_mode": [
          [
            "incremental",
            "comfy",
            "variation str inc:0.01",
            "variation str inc:0.05"
          ]
        ],
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "variation_method": [
          [
            "linear",
            "slerp"
          ]
        ],
        "noise_opt": [
          "NOISE"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "noise_mode",
        "return_with_leftover_noise",
        "batch_seed_mode",
        "variation_seed",
        "variation_strength"
      ],
      "optional": [
        "variation_method",
        "noise_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerAdvanced //Inspire",
    "display_name": "KSamplerAdvanced (inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/a1111_compat",
    "output_node": false
  },
  "KSamplerPipe //Inspire": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ],
        "batch_seed_mode": [
          [
            "incremental",
            "comfy",
            "variation str inc:0.01",
            "variation str inc:0.05"
          ]
        ],
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "latent_image",
        "denoise",
        "noise_mode",
        "batch_seed_mode",
        "variation_seed",
        "variation_strength"
      ],
      "optional": [
        "scheduler_func_opt"
      ]
    },
    "output": [
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "VAE"
    ],
    "name": "KSamplerPipe //Inspire",
    "display_name": "KSampler [pipe] (inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/a1111_compat",
    "output_node": false
  },
  "KSamplerAdvancedPipe //Inspire": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ],
        "return_with_leftover_noise": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "batch_seed_mode": [
          [
            "incremental",
            "comfy",
            "variation str inc:0.01",
            "variation str inc:0.05"
          ]
        ],
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "noise_opt": [
          "NOISE"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "noise_mode",
        "return_with_leftover_noise",
        "batch_seed_mode",
        "variation_seed",
        "variation_strength"
      ],
      "optional": [
        "noise_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "VAE"
    ],
    "name": "KSamplerAdvancedPipe //Inspire",
    "display_name": "KSamplerAdvanced [pipe] (inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/a1111_compat",
    "output_node": false
  },
  "RandomNoise //Inspire": {
    "input": {
      "required": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ],
        "batch_seed_mode": [
          [
            "incremental",
            "comfy",
            "variation str inc:0.01",
            "variation str inc:0.05"
          ]
        ],
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "variation_method": [
          [
            "linear",
            "slerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "noise_seed",
        "noise_mode",
        "batch_seed_mode",
        "variation_seed",
        "variation_strength"
      ],
      "optional": [
        "variation_method"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "RandomNoise //Inspire",
    "display_name": "RandomNoise (inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/a1111_compat",
    "output_node": false
  },
  "HyperTile //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "tile_size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 2048
          }
        ],
        "swap_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 128
          }
        ],
        "max_depth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10
          }
        ],
        "scale_depth": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tile_size",
        "swap_size",
        "max_depth",
        "scale_depth",
        "seed"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HyperTile //Inspire",
    "display_name": "HyperTile (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/__for_testing",
    "output_node": false
  },
  "LoadPromptsFromDir //Inspire": {
    "input": {
      "required": {
        "prompt_dir": [
          [
            "example"
          ]
        ]
      },
      "optional": {
        "reload": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "if file changed",
            "label_off": "if value changed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_dir"
      ],
      "optional": [
        "reload"
      ]
    },
    "output": [
      "ZIPPED_PROMPT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "ZIPPED_PROMPT"
    ],
    "name": "LoadPromptsFromDir //Inspire",
    "display_name": "Load Prompts From Dir (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "LoadPromptsFromFile //Inspire": {
    "input": {
      "required": {
        "prompt_file": [
          [
            "example/prompt2.txt",
            "example/prompt1.txt"
          ]
        ]
      },
      "optional": {
        "text_data_opt": [
          "STRING",
          {
            "defaultInput": true
          }
        ],
        "reload": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "if file changed",
            "label_off": "if value changed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_file"
      ],
      "optional": [
        "text_data_opt",
        "reload"
      ]
    },
    "output": [
      "ZIPPED_PROMPT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "ZIPPED_PROMPT"
    ],
    "name": "LoadPromptsFromFile //Inspire",
    "display_name": "Load Prompts From File (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "LoadSinglePromptFromFile //Inspire": {
    "input": {
      "required": {
        "prompt_file": [
          [
            "example/prompt2.txt",
            "example/prompt1.txt"
          ]
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "text_data_opt": [
          "STRING",
          {
            "defaultInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_file",
        "index"
      ],
      "optional": [
        "text_data_opt"
      ]
    },
    "output": [
      "ZIPPED_PROMPT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "ZIPPED_PROMPT"
    ],
    "name": "LoadSinglePromptFromFile //Inspire",
    "display_name": "Load Single Prompt From File (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "UnzipPrompt //Inspire": {
    "input": {
      "required": {
        "zipped_prompt": [
          "ZIPPED_PROMPT"
        ]
      }
    },
    "input_order": {
      "required": [
        "zipped_prompt"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "name"
    ],
    "name": "UnzipPrompt //Inspire",
    "display_name": "Unzip Prompt (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "ZipPrompt //Inspire": {
    "input": {
      "required": {
        "positive": [
          "STRING",
          {
            "forceInput": true,
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "forceInput": true,
            "multiline": true
          }
        ]
      },
      "optional": {
        "name_opt": [
          "STRING",
          {
            "forceInput": true,
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative"
      ],
      "optional": [
        "name_opt"
      ]
    },
    "output": [
      "ZIPPED_PROMPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ZIPPED_PROMPT"
    ],
    "name": "ZipPrompt //Inspire",
    "display_name": "Zip Prompt (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "PromptExtractor //Inspire": {
    "input": {
      "required": {
        "image": [
          [
            "ComfyUI_00168_.png",
            "ComfyUI_00180_.png",
            "ComfyUI_temp_ktysl_00001_-(1).png",
            "ComfyUI_temp_ktysl_00001_.png",
            "example.png",
            "test.png"
          ],
          {
            "image_upload": true
          }
        ],
        "positive_id": [
          "STRING",
          {}
        ],
        "negative_id": [
          "STRING",
          {}
        ],
        "info": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "positive_id",
        "negative_id",
        "info"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PromptExtractor //Inspire",
    "display_name": "Prompt Extractor (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": true
  },
  "GlobalSeed //Inspire": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "control_before_generate",
            "label_off": "control_after_generate"
          }
        ],
        "action": [
          [
            "fixed",
            "increment",
            "decrement",
            "randomize",
            "increment for each node",
            "decrement for each node",
            "randomize for each node"
          ]
        ],
        "last_seed": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "mode",
        "action",
        "last_seed"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "GlobalSeed //Inspire",
    "display_name": "Global Seed (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": true
  },
  "GlobalSampler //Inspire": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name",
        "scheduler"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "GlobalSampler //Inspire",
    "display_name": "Global Sampler (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": true
  },
  "BindImageListPromptList //Inspire": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "zipped_prompts": [
          "ZIPPED_PROMPT"
        ],
        "default_positive": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "default positive"
          }
        ],
        "default_negative": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "default negative"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "zipped_prompts",
        "default_positive",
        "default_negative"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      true
    ],
    "output_name": [
      "image",
      "positive",
      "negative",
      "prompt_label"
    ],
    "name": "BindImageListPromptList //Inspire",
    "display_name": "Bind [ImageList, PromptList] (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "WildcardEncode //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ],
          {
            "default": "comfy++"
          }
        ],
        "wildcard_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "Wildcard Prompt (User Input)"
          }
        ],
        "populated_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "Populated Prompt (Will be generated automatically)"
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Populate",
            "label_off": "Fixed"
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "token_normalization",
        "weight_interpretation",
        "wildcard_text",
        "populated_text",
        "mode",
        "Select to add LoRA",
        "Select to add Wildcard",
        "seed"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "conditioning",
      "populated_text"
    ],
    "name": "WildcardEncode //Inspire",
    "display_name": "Wildcard Encode (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "PromptBuilder //Inspire": {
    "input": {
      "required": {
        "category": [
          [
            "Angle of View",
            "Artists",
            "Character Types",
            "Colors",
            "Composition",
            "Composition Form",
            "Lighting",
            "Negative",
            "Picture Effect",
            "Picture Quality",
            "Setting",
            "Shot",
            "Style",
            "#PLACEHOLDER"
          ]
        ],
        "preset": [
          [
            "#PRESET"
          ]
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "category",
        "preset",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "PromptBuilder //Inspire",
    "display_name": "Prompt Builder (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "SeedExplorer //Inspire": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "seed_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "pysssss.autocomplete": false
          }
        ],
        "enable_additional": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "true",
            "label_off": "false"
          }
        ],
        "additional_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "additional_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ],
        "initial_batch_seed_mode": [
          [
            "incremental",
            "comfy"
          ]
        ]
      },
      "optional": {
        "variation_method": [
          [
            "linear",
            "slerp"
          ]
        ],
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "seed_prompt",
        "enable_additional",
        "additional_seed",
        "additional_strength",
        "noise_mode",
        "initial_batch_seed_mode"
      ],
      "optional": [
        "variation_method",
        "model"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "SeedExplorer //Inspire",
    "display_name": "Seed Explorer (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "ListCounter //Inspire": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "base_value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "signal",
        "base_value"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "ListCounter //Inspire",
    "display_name": "List Counter (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "CLIPTextEncodeWithWeight //Inspire": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "clip": [
          "CLIP"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "add_weight": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip",
        "strength",
        "add_weight"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeWithWeight //Inspire",
    "display_name": "CLIPTextEncodeWithWeight (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "RandomGeneratorForList //Inspire": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "signal",
        "seed"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "*",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "signal",
      "random_value"
    ],
    "name": "RandomGeneratorForList //Inspire",
    "display_name": "Random Generator for List (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "MakeBasicPipe //Inspire": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "ckpt_key_opt": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "If empty, use 'ckpt_name' as the key."
          }
        ],
        "positive_wildcard_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "Positive Prompt (User Input)"
          }
        ],
        "negative_wildcard_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "Negative Prompt (User Input)"
          }
        ],
        "Add selection to": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Positive",
            "label_off": "Negative"
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ],
        "wildcard_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Populate",
            "label_off": "Fixed"
          }
        ],
        "positive_populated_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "Populated Positive Prompt (Will be generated automatically)"
          }
        ],
        "negative_populated_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "Populated Negative Prompt (Will be generated automatically)"
          }
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ],
          {
            "default": "comfy++"
          }
        ],
        "stop_at_clip_layer": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "vae_opt": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "ckpt_key_opt",
        "positive_wildcard_text",
        "negative_wildcard_text",
        "Add selection to",
        "Select to add LoRA",
        "Select to add Wildcard",
        "wildcard_mode",
        "positive_populated_text",
        "negative_populated_text",
        "token_normalization",
        "weight_interpretation",
        "stop_at_clip_layer",
        "seed"
      ],
      "optional": [
        "vae_opt"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "basic_pipe",
      "cache_key"
    ],
    "name": "MakeBasicPipe //Inspire",
    "display_name": "Make Basic Pipe (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "RemoveControlNet //Inspire": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "RemoveControlNet //Inspire",
    "display_name": "Remove ControlNet (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "RemoveControlNetFromRegionalPrompts //Inspire": {
    "input": {
      "required": {
        "regional_prompts": [
          "REGIONAL_PROMPTS"
        ]
      }
    },
    "input_order": {
      "required": [
        "regional_prompts"
      ]
    },
    "output": [
      "REGIONAL_PROMPTS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGIONAL_PROMPTS"
    ],
    "name": "RemoveControlNetFromRegionalPrompts //Inspire",
    "display_name": "Remove ControlNet [RegionalPrompts] (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "CompositeNoise //Inspire": {
    "input": {
      "required": {
        "destination": [
          "NOISE"
        ],
        "source": [
          "NOISE"
        ],
        "mode": [
          [
            "center",
            "left-top",
            "right-top",
            "left-bottom",
            "right-bottom",
            "xy"
          ]
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "mode",
        "x",
        "y"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "CompositeNoise //Inspire",
    "display_name": "Composite Noise (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Prompt",
    "output_node": false
  },
  "LoadImagesFromDir //Inspire": {
    "input": {
      "required": {
        "directory": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "step": 1
          }
        ],
        "load_always": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "image_load_cap",
        "start_index",
        "load_always"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "name": "LoadImagesFromDir //Inspire",
    "display_name": "Load Image Batch From Dir (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "image",
    "output_node": false
  },
  "LoadImageListFromDir //Inspire": {
    "input": {
      "required": {
        "directory": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "load_always": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "image_load_cap",
        "start_index",
        "load_always"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      true
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "FILE PATH"
    ],
    "name": "LoadImageListFromDir //Inspire",
    "display_name": "Load Image List From Dir (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "image",
    "output_node": false
  },
  "LoadImage //Inspire": {
    "input": {
      "required": {
        "image": [
          [
            "ComfyUI_00168_.png",
            "ComfyUI_00180_.png",
            "ComfyUI_temp_ktysl_00001_-(1).png",
            "ComfyUI_temp_ktysl_00001_.png",
            "example.png",
            "test.png",
            "#DATA"
          ],
          {
            "image_upload": true
          }
        ],
        "image_data": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_data"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImage //Inspire",
    "display_name": "Load Image (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/image",
    "output_node": false
  },
  "ChangeImageBatchSize //Inspire": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "mode": [
          [
            "simple"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "batch_size",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ChangeImageBatchSize //Inspire",
    "display_name": "Change Image Batch Size (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "ChangeLatentBatchSize //Inspire": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "mode": [
          [
            "simple"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "batch_size",
        "mode"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "ChangeLatentBatchSize //Inspire",
    "display_name": "Change Latent Batch Size (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "ImageBatchSplitter //Inspire": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "split_count": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "split_count"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchSplitter //Inspire",
    "display_name": "Image Batch Splitter (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "LatentBatchSplitter //Inspire": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "split_count": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "split_count"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatchSplitter //Inspire",
    "display_name": "Latent Batch Splitter (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "ColorMapToMasks //Inspire": {
    "input": {
      "required": {
        "color_map": [
          "IMAGE"
        ],
        "min_pixels": [
          "INT",
          {
            "default": 500,
            "min": 1,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "max_count": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "color_map",
        "min_pixels",
        "max_count"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ColorMapToMasks //Inspire",
    "display_name": "Color Map To Masks (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "SelectNthMask //Inspire": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "idx": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "idx"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SelectNthMask //Inspire",
    "display_name": "Select Nth Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "RegionalPromptSimple //Inspire": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "mask": [
          "MASK"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ],
        "wildcard_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "wildcard prompt"
          }
        ],
        "controlnet_in_pipe": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Keep",
            "label_off": "Override"
          }
        ],
        "sigma_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "variation_method": [
          [
            "linear",
            "slerp"
          ]
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "mask",
        "cfg",
        "sampler_name",
        "scheduler",
        "wildcard_prompt",
        "controlnet_in_pipe",
        "sigma_factor"
      ],
      "optional": [
        "variation_seed",
        "variation_strength",
        "variation_method",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "REGIONAL_PROMPTS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGIONAL_PROMPTS"
    ],
    "name": "RegionalPromptSimple //Inspire",
    "display_name": "Regional Prompt Simple (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalPromptColorMask //Inspire": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "color_mask": [
          "IMAGE"
        ],
        "mask_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ],
        "wildcard_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "wildcard prompt"
          }
        ],
        "controlnet_in_pipe": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Keep",
            "label_off": "Override"
          }
        ],
        "sigma_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "variation_method": [
          [
            "linear",
            "slerp"
          ]
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "color_mask",
        "mask_color",
        "cfg",
        "sampler_name",
        "scheduler",
        "wildcard_prompt",
        "controlnet_in_pipe",
        "sigma_factor"
      ],
      "optional": [
        "variation_seed",
        "variation_strength",
        "variation_method",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "REGIONAL_PROMPTS",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "REGIONAL_PROMPTS",
      "MASK"
    ],
    "name": "RegionalPromptColorMask //Inspire",
    "display_name": "Regional Prompt By Color Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalConditioningSimple //Inspire": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "prompt"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "mask",
        "strength",
        "set_cond_area",
        "prompt"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "RegionalConditioningSimple //Inspire",
    "display_name": "Regional Conditioning Simple (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalConditioningColorMask //Inspire": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "color_mask": [
          "IMAGE"
        ],
        "mask_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "prompt"
          }
        ]
      },
      "optional": {
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "color_mask",
        "mask_color",
        "strength",
        "set_cond_area",
        "prompt"
      ],
      "optional": [
        "dilation"
      ]
    },
    "output": [
      "CONDITIONING",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MASK"
    ],
    "name": "RegionalConditioningColorMask //Inspire",
    "display_name": "Regional Conditioning By Color Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalIPAdapterMask //Inspire": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.7,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "unfold_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "faceid_v2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "weight_v2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "neg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "image",
        "weight",
        "noise",
        "weight_type",
        "start_at",
        "end_at",
        "unfold_batch"
      ],
      "optional": [
        "faceid_v2",
        "weight_v2",
        "combine_embeds",
        "neg_image"
      ]
    },
    "output": [
      "REGIONAL_IPADAPTER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGIONAL_IPADAPTER"
    ],
    "name": "RegionalIPAdapterMask //Inspire",
    "display_name": "Regional IPAdapter Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalIPAdapterColorMask //Inspire": {
    "input": {
      "required": {
        "color_mask": [
          "IMAGE"
        ],
        "mask_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.7,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "unfold_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "faceid_v2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "weight_v2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "neg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "color_mask",
        "mask_color",
        "image",
        "weight",
        "noise",
        "weight_type",
        "start_at",
        "end_at",
        "unfold_batch"
      ],
      "optional": [
        "faceid_v2",
        "weight_v2",
        "combine_embeds",
        "neg_image"
      ]
    },
    "output": [
      "REGIONAL_IPADAPTER",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "REGIONAL_IPADAPTER",
      "MASK"
    ],
    "name": "RegionalIPAdapterColorMask //Inspire",
    "display_name": "Regional IPAdapter By Color Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalIPAdapterEncodedMask //Inspire": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "embeds": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.7,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "unfold_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "neg_embeds": [
          "EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "embeds",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "unfold_batch"
      ],
      "optional": [
        "neg_embeds"
      ]
    },
    "output": [
      "REGIONAL_IPADAPTER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGIONAL_IPADAPTER"
    ],
    "name": "RegionalIPAdapterEncodedMask //Inspire",
    "display_name": "Regional IPAdapter Encoded Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalIPAdapterEncodedColorMask //Inspire": {
    "input": {
      "required": {
        "color_mask": [
          "IMAGE"
        ],
        "mask_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "embeds": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.7,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "unfold_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "neg_embeds": [
          "EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "color_mask",
        "mask_color",
        "embeds",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "unfold_batch"
      ],
      "optional": [
        "neg_embeds"
      ]
    },
    "output": [
      "REGIONAL_IPADAPTER",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "REGIONAL_IPADAPTER",
      "MASK"
    ],
    "name": "RegionalIPAdapterEncodedColorMask //Inspire",
    "display_name": "Regional IPAdapter Encoded By Color Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalSeedExplorerMask //Inspire": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "noise": [
          "NOISE"
        ],
        "seed_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "pysssss.autocomplete": false
          }
        ],
        "enable_additional": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "true",
            "label_off": "false"
          }
        ],
        "additional_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "additional_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ]
      },
      "optional": {
        "variation_method": [
          [
            "linear",
            "slerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "noise",
        "seed_prompt",
        "enable_additional",
        "additional_seed",
        "additional_strength",
        "noise_mode"
      ],
      "optional": [
        "variation_method"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "RegionalSeedExplorerMask //Inspire",
    "display_name": "Regional Seed Explorer By Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalSeedExplorerColorMask //Inspire": {
    "input": {
      "required": {
        "color_mask": [
          "IMAGE"
        ],
        "mask_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "noise": [
          "NOISE"
        ],
        "seed_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "pysssss.autocomplete": false
          }
        ],
        "enable_additional": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "true",
            "label_off": "false"
          }
        ],
        "additional_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "additional_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ]
      },
      "optional": {
        "variation_method": [
          [
            "linear",
            "slerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "color_mask",
        "mask_color",
        "noise",
        "seed_prompt",
        "enable_additional",
        "additional_seed",
        "additional_strength",
        "noise_mode"
      ],
      "optional": [
        "variation_method"
      ]
    },
    "output": [
      "NOISE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "NOISE",
      "MASK"
    ],
    "name": "RegionalSeedExplorerColorMask //Inspire",
    "display_name": "Regional Seed Explorer By Color Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "ToIPAdapterPipe //Inspire": {
    "input": {
      "required": {
        "ipadapter": [
          "IPADAPTER"
        ],
        "model": [
          "MODEL"
        ]
      },
      "optional": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter",
        "model"
      ],
      "optional": [
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "IPADAPTER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IPADAPTER_PIPE"
    ],
    "name": "ToIPAdapterPipe //Inspire",
    "display_name": "ToIPAdapterPipe (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "FromIPAdapterPipe //Inspire": {
    "input": {
      "required": {
        "ipadapter_pipe": [
          "IPADAPTER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter_pipe"
      ]
    },
    "output": [
      "IPADAPTER",
      "MODEL",
      "CLIP_VISION",
      "INSIGHTFACE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "ipadapter",
      "model",
      "clip_vision",
      "insight_face"
    ],
    "name": "FromIPAdapterPipe //Inspire",
    "display_name": "FromIPAdapterPipe (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "ApplyRegionalIPAdapters //Inspire": {
    "input": {
      "required": {
        "ipadapter_pipe": [
          "IPADAPTER_PIPE"
        ],
        "regional_ipadapter1": [
          "REGIONAL_IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter_pipe",
        "regional_ipadapter1"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ApplyRegionalIPAdapters //Inspire",
    "display_name": "Apply Regional IPAdapters (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "RegionalCFG //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "mask"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RegionalCFG //Inspire",
    "display_name": "Regional CFG (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "ColorMaskToDepthMask //Inspire": {
    "input": {
      "required": {
        "color_mask": [
          "IMAGE"
        ],
        "spec": [
          "STRING",
          {
            "multiline": true,
            "default": "#FF0000:1.0\n#000000:1.0"
          }
        ],
        "base_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "flatten_method": [
          [
            "override",
            "sum",
            "max"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "color_mask",
        "spec",
        "base_value",
        "dilation",
        "flatten_method"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ColorMaskToDepthMask //Inspire",
    "display_name": "Color Mask To Depth Mask (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Regional",
    "output_node": false
  },
  "KSamplerProgress //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ],
        "interval": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "omit_start_latent": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "True",
            "label_off": "False"
          }
        ],
        "omit_final_latent": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ]
      },
      "optional": {
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise",
        "noise_mode",
        "interval",
        "omit_start_latent",
        "omit_final_latent"
      ],
      "optional": [
        "scheduler_func_opt"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "latent",
      "progress_latent"
    ],
    "name": "KSamplerProgress //Inspire",
    "display_name": "KSampler Progress (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/analysis",
    "output_node": false
  },
  "KSamplerAdvancedProgress //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "noise_mode": [
          [
            "GPU(=A1111)",
            "CPU"
          ]
        ],
        "return_with_leftover_noise": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "interval": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "omit_start_latent": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ],
        "omit_final_latent": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ]
      },
      "optional": {
        "prev_progress_latent_opt": [
          "LATENT"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "noise_mode",
        "return_with_leftover_noise",
        "interval",
        "omit_start_latent",
        "omit_final_latent"
      ],
      "optional": [
        "prev_progress_latent_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "latent",
      "progress_latent"
    ],
    "name": "KSamplerAdvancedProgress //Inspire",
    "display_name": "KSampler Advanced Progress (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/analysis",
    "output_node": false
  },
  "ScheduledCFGGuider //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "from_cfg": [
          "FLOAT",
          {
            "default": 6.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "to_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "schedule": [
          [
            "linear",
            "log",
            "exp",
            "cos"
          ],
          {
            "default": "log"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "sigmas",
        "from_cfg",
        "to_cfg",
        "schedule"
      ]
    },
    "output": [
      "GUIDER",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "GUIDER",
      "SIGMAS"
    ],
    "name": "ScheduledCFGGuider //Inspire",
    "display_name": "Scheduled CFGGuider (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "ScheduledPerpNegCFGGuider //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "from_cfg": [
          "FLOAT",
          {
            "default": 6.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "to_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "schedule": [
          [
            "linear",
            "log",
            "exp",
            "cos"
          ],
          {
            "default": "log"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "empty_conditioning",
        "neg_scale",
        "sigmas",
        "from_cfg",
        "to_cfg",
        "schedule"
      ]
    },
    "output": [
      "GUIDER",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "GUIDER",
      "SIGMAS"
    ],
    "name": "ScheduledPerpNegCFGGuider //Inspire",
    "display_name": "Scheduled PerpNeg CFGGuider (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "CacheBackendData //Inspire": {
    "input": {
      "required": {
        "key": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "Input data key (e.g. 'model a', 'chunli lora', 'girl latent 3', ...)"
          }
        ],
        "tag": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "Tag: short description"
          }
        ],
        "data": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "key",
        "tag",
        "data"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "data opt"
    ],
    "name": "CacheBackendData //Inspire",
    "display_name": "Cache Backend Data (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": true
  },
  "CacheBackendDataNumberKey //Inspire": {
    "input": {
      "required": {
        "key": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "tag": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "Tag: short description"
          }
        ],
        "data": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "key",
        "tag",
        "data"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "data opt"
    ],
    "name": "CacheBackendDataNumberKey //Inspire",
    "display_name": "Cache Backend Data [NumberKey] (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": true
  },
  "CacheBackendDataList //Inspire": {
    "input": {
      "required": {
        "key": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "Input data key (e.g. 'model a', 'chunli lora', 'girl latent 3', ...)"
          }
        ],
        "tag": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "Tag: short description"
          }
        ],
        "data": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "key",
        "tag",
        "data"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "data opt"
    ],
    "name": "CacheBackendDataList //Inspire",
    "display_name": "Cache Backend Data List (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": true
  },
  "CacheBackendDataNumberKeyList //Inspire": {
    "input": {
      "required": {
        "key": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "tag": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "Tag: short description"
          }
        ],
        "data": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "key",
        "tag",
        "data"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "data opt"
    ],
    "name": "CacheBackendDataNumberKeyList //Inspire",
    "display_name": "Cache Backend Data List [NumberKey] (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": true
  },
  "RetrieveBackendData //Inspire": {
    "input": {
      "required": {
        "key": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "Input data key (e.g. 'model a', 'chunli lora', 'girl latent 3', ...)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "key"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "data"
    ],
    "name": "RetrieveBackendData //Inspire",
    "display_name": "Retrieve Backend Data (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": false
  },
  "RetrieveBackendDataNumberKey //Inspire": {
    "input": {
      "required": {
        "key": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "key"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "data"
    ],
    "name": "RetrieveBackendDataNumberKey //Inspire",
    "display_name": "Retrieve Backend Data [NumberKey] (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": false
  },
  "RemoveBackendData //Inspire": {
    "input": {
      "required": {
        "key": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "Input data key ('*' = clear all)"
          }
        ]
      },
      "optional": {
        "signal_opt": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "key"
      ],
      "optional": [
        "signal_opt"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal"
    ],
    "name": "RemoveBackendData //Inspire",
    "display_name": "Remove Backend Data (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": true
  },
  "RemoveBackendDataNumberKey //Inspire": {
    "input": {
      "required": {
        "key": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "signal_opt": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "key"
      ],
      "optional": [
        "signal_opt"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal"
    ],
    "name": "RemoveBackendDataNumberKey //Inspire",
    "display_name": "Remove Backend Data [NumberKey] (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": true
  },
  "ShowCachedInfo //Inspire": {
    "input": {
      "required": {
        "cache_info": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "key": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "cache_info",
        "key"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ShowCachedInfo //Inspire",
    "display_name": "Show Cached Info (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": true
  },
  "CheckpointLoaderSimpleShared //Inspire": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "key_opt": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "If empty, use 'ckpt_name' as the key."
          }
        ]
      },
      "optional": {
        "mode": [
          [
            "Auto",
            "Override Cache",
            "Read Only"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "key_opt"
      ],
      "optional": [
        "mode"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "cache key"
    ],
    "name": "CheckpointLoaderSimpleShared //Inspire",
    "display_name": "Shared Checkpoint Loader (Inspire)",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "StableCascade_CheckpointLoader //Inspire": {
    "input": {
      "required": {
        "stage_b": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ],
          {
            "default": "1.5/aziibpixelmix_v10.safetensors"
          }
        ],
        "key_opt_b": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "If empty, use 'stage_b' as the key."
          }
        ],
        "stage_c": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ],
          {
            "default": "1.5/aziibpixelmix_v10.safetensors"
          }
        ],
        "key_opt_c": [
          "STRING",
          {
            "multiline": false,
            "placeholder": "If empty, use 'stage_c' as the key."
          }
        ],
        "cache_mode": [
          [
            "none",
            "stage_b",
            "stage_c",
            "all"
          ],
          {
            "default": "none"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "stage_b",
        "key_opt_b",
        "stage_c",
        "key_opt_c",
        "cache_mode"
      ]
    },
    "output": [
      "MODEL",
      "VAE",
      "MODEL",
      "VAE",
      "CLIP_VISION",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "b_model",
      "b_vae",
      "c_model",
      "c_vae",
      "c_clip_vision",
      "clip",
      "key_b",
      "key_c"
    ],
    "name": "StableCascade_CheckpointLoader //Inspire",
    "display_name": "Stable Cascade Checkpoint Loader (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": false
  },
  "IsCached //Inspire": {
    "input": {
      "required": {
        "key": [
          "STRING",
          {
            "multiline": false
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "key"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "IsCached //Inspire",
    "display_name": "Is Cached (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Backend",
    "output_node": false
  },
  "FloatRange //Inspire": {
    "input": {
      "required": {
        "start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -100.0,
            "max": 100.0,
            "step": 1e-09
          }
        ],
        "stop": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 1e-09
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 100.0,
            "step": 1e-09
          }
        ],
        "limit": [
          "INT",
          {
            "default": 100,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "ensure_end": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start",
        "stop",
        "step",
        "limit",
        "ensure_end"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "FloatRange //Inspire",
    "display_name": "Float Range (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/List",
    "output_node": false
  },
  "WorklistToItemList //Inspire": {
    "input": {
      "required": {
        "item": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "item"
      ]
    },
    "output": [
      "ITEM_LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "item_list"
    ],
    "name": "WorklistToItemList //Inspire",
    "display_name": "Worklist To Item List (Inspire)",
    "description": "The list in ComfyUI allows for repeated execution of a sub-workflow.\nThis groups these repetitions (a.k.a. list) into a single ITEM_LIST output.\nITEM_LIST can then be used in ForeachList.",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/List",
    "output_node": false
  },
  "ForeachListBegin //Inspire": {
    "input": {
      "required": {
        "item_list": [
          "ITEM_LIST",
          {
            "tooltip": "ITEM_LIST containing items to be processed iteratively."
          }
        ]
      },
      "optional": {
        "initial_input": [
          "*",
          {
            "tooltip": "If initial_input is omitted, the first item in item_list is used as the initial value, and the processing starts from the second item in item_list."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "item_list"
      ],
      "optional": [
        "initial_input"
      ]
    },
    "output": [
      "FOREACH_LIST_CONTROL",
      "ITEM_LIST",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "flow_control",
      "remained_list",
      "item",
      "intermediate_output"
    ],
    "name": "ForeachListBegin //Inspire",
    "display_name": "\u25b6Foreach List (Inspire)",
    "description": "A starting node for performing iterative tasks by retrieving items one by one from the ITEM_LIST.\nGenerate a new intermediate_output using item and intermediate_output as inputs, then connect it to ForeachListEnd.\nNOTE:If initial_input is omitted, the first item in item_list is used as the initial value, and the processing starts from the second item in item_list.",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/List",
    "output_node": false,
    "output_tooltips": [
      "Pass ForeachListEnd as is to indicate the end of the iteration.",
      "Output the ITEM_LIST containing the remaining items during the iteration, passing ForeachListEnd as is to indicate the end of the iteration.",
      "Output the current item during the iteration.",
      "Output the intermediate results during the iteration."
    ]
  },
  "ForeachListEnd //Inspire": {
    "input": {
      "required": {
        "flow_control": [
          "FOREACH_LIST_CONTROL",
          {
            "rawLink": true,
            "tooltip": "Directly connect the output of ForeachListBegin, the starting node of the iteration."
          }
        ],
        "remained_list": [
          "ITEM_LIST",
          {
            "tooltip": "Directly connect the output of ForeachListBegin, the starting node of the iteration."
          }
        ],
        "intermediate_output": [
          "*",
          {
            "tooltip": "Connect the intermediate outputs processed within the iteration here."
          }
        ]
      },
      "hidden": {
        "dynprompt": "DYNPROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "flow_control",
        "remained_list",
        "intermediate_output"
      ],
      "hidden": [
        "dynprompt",
        "unique_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "result"
    ],
    "name": "ForeachListEnd //Inspire",
    "display_name": "Foreach List\u25c0 (Inspire)",
    "description": "A end node for performing iterative tasks by retrieving items one by one from the ITEM_LIST.\nNOTE:Directly connect the outputs of ForeachListBegin to 'flow_control' and 'remained_list'.",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/List",
    "output_node": false,
    "output_tooltips": [
      "This is the final output value."
    ]
  },
  "ConcatConditioningsWithMultiplier //Inspire": {
    "input": {
      "required": {
        "conditioning1": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "multiplier1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning1"
      ],
      "optional": [
        "multiplier1"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConcatConditioningsWithMultiplier //Inspire",
    "display_name": "Concat Conditionings with Multiplier (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/__for_testing",
    "output_node": false
  },
  "ConditioningUpscale //Inspire": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "scalar": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 100,
            "step": 0.5
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "scalar"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningUpscale //Inspire",
    "display_name": "Conditioning Upscale (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/conditioning",
    "output_node": false
  },
  "ConditioningStretch //Inspire": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "resolutionX": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "resolutionY": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "newWidth": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "newHeight": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "resolutionX",
        "resolutionY",
        "newWidth",
        "newHeight"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningStretch //Inspire",
    "display_name": "Conditioning Stretch (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/conditioning",
    "output_node": false
  },
  "IPAdapterModelHelper //Inspire": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "SD1.5",
            "SD1.5 Light v11",
            "SD1.5 Light",
            "SD1.5 Plus",
            "SD1.5 Plus Face",
            "SD1.5 Full Face",
            "SD1.5 ViT-G",
            "SDXL",
            "SDXL ViT-H",
            "SDXL Plus ViT-H",
            "SDXL Plus Face ViT-H",
            "Kolors Plus",
            "SD1.5 FaceID",
            "SD1.5 FaceID Plus v2",
            "SD1.5 FaceID Plus",
            "SD1.5 FaceID Portrait v11",
            "SD1.5 FaceID Portrait",
            "SDXL FaceID",
            "SDXL FaceID Portrait",
            "SDXL FaceID Portrait unnorm",
            "Kolors FaceID Plus",
            "SD1.5 Plus Composition",
            "SDXL Plus Composition"
          ]
        ],
        "lora_strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "lora_strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "insightface_provider": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "all",
            "none"
          ],
          {
            "default": "insightface only"
          }
        ]
      },
      "optional": {
        "clip": [
          "CLIP"
        ],
        "insightface_model_name": [
          [
            "buffalo_l",
            "antelopev2"
          ]
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset",
        "lora_strength_model",
        "lora_strength_clip",
        "insightface_provider",
        "cache_mode"
      ],
      "optional": [
        "clip",
        "insightface_model_name"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "IPADAPTER_PIPE",
      "IPADAPTER",
      "CLIP_VISION",
      "INSIGHTFACE",
      "MODEL",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IPADAPTER_PIPE",
      "IPADAPTER",
      "CLIP_VISION",
      "INSIGHTFACE",
      "MODEL",
      "CLIP",
      "insightface_cache_key",
      "clip_vision_cache_key"
    ],
    "name": "IPAdapterModelHelper //Inspire",
    "display_name": "IPAdapter Model Helper (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/models",
    "output_node": false
  },
  "RGB_HexToHSV //Inspire": {
    "input": {
      "required": {
        "rgb_hex": [
          "STRING",
          {
            "defaultInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "rgb_hex"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "hue",
      "saturation",
      "value"
    ],
    "name": "RGB_HexToHSV //Inspire",
    "display_name": "RGB Hex To HSV (Inspire)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
    "category": "InspirePack/Util",
    "output_node": false
  },
  "KSampler (Efficient)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "preview_method": [
          [
            "auto",
            "latent2rgb",
            "taesd",
            "vae_decoded_only",
            "none"
          ]
        ],
        "vae_decode": [
          [
            "true",
            "true (tiled)",
            "false"
          ]
        ]
      },
      "optional": {
        "optional_vae": [
          "VAE"
        ],
        "script": [
          "SCRIPT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise",
        "preview_method",
        "vae_decode"
      ],
      "optional": [
        "optional_vae",
        "script"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING+",
      "CONDITIONING-",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "name": "KSampler (Efficient)",
    "display_name": "KSampler (Efficient)",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Sampling",
    "output_node": true
  },
  "KSampler Adv. (Efficient)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ],
        "preview_method": [
          [
            "auto",
            "latent2rgb",
            "taesd",
            "none"
          ]
        ],
        "vae_decode": [
          [
            "true",
            "true (tiled)",
            "false",
            "output only",
            "output only (tiled)"
          ]
        ]
      },
      "optional": {
        "optional_vae": [
          "VAE"
        ],
        "script": [
          "SCRIPT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise",
        "preview_method",
        "vae_decode"
      ],
      "optional": [
        "optional_vae",
        "script"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING+",
      "CONDITIONING-",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "name": "KSampler Adv. (Efficient)",
    "display_name": "KSampler Adv. (Efficient)",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Sampling",
    "output_node": true
  },
  "KSampler SDXL (Eff.)": {
    "input": {
      "required": {
        "sdxl_tuple": [
          "SDXL_TUPLE"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "refine_at_step": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 10000
          }
        ],
        "preview_method": [
          [
            "auto",
            "latent2rgb",
            "taesd",
            "none"
          ]
        ],
        "vae_decode": [
          [
            "true",
            "true (tiled)",
            "false",
            "output only",
            "output only (tiled)"
          ]
        ]
      },
      "optional": {
        "optional_vae": [
          "VAE"
        ],
        "script": [
          "SCRIPT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "sdxl_tuple",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "latent_image",
        "start_at_step",
        "refine_at_step",
        "preview_method",
        "vae_decode"
      ],
      "optional": [
        "optional_vae",
        "script"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "SDXL_TUPLE",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "SDXL_TUPLE",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "name": "KSampler SDXL (Eff.)",
    "display_name": "KSampler SDXL (Eff.)",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Sampling",
    "output_node": true
  },
  "Efficient Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "CLIP_POSITIVE",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "CLIP_NEGATIVE",
            "multiline": true
          }
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 262144
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ],
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "clip_skip",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "positive",
        "negative",
        "token_normalization",
        "weight_interpretation",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size"
      ],
      "optional": [
        "lora_stack",
        "cnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "DEPENDENCIES"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING+",
      "CONDITIONING-",
      "LATENT",
      "VAE",
      "CLIP",
      "DEPENDENCIES"
    ],
    "name": "Efficient Loader",
    "display_name": "Efficient Loader",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Loaders",
    "output_node": false
  },
  "Eff. Loader SDXL": {
    "input": {
      "required": {
        "base_ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "base_clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "refiner_ckpt_name": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "refiner_clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "positive_ascore": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "negative_ascore": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "positive": [
          "STRING",
          {
            "default": "CLIP_POSITIVE",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "CLIP_NEGATIVE",
            "multiline": true
          }
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ],
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "base_ckpt_name",
        "base_clip_skip",
        "refiner_ckpt_name",
        "refiner_clip_skip",
        "positive_ascore",
        "negative_ascore",
        "vae_name",
        "positive",
        "negative",
        "token_normalization",
        "weight_interpretation",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size"
      ],
      "optional": [
        "lora_stack",
        "cnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "SDXL_TUPLE",
      "LATENT",
      "VAE",
      "DEPENDENCIES"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "SDXL_TUPLE",
      "LATENT",
      "VAE",
      "DEPENDENCIES"
    ],
    "name": "Eff. Loader SDXL",
    "display_name": "Eff. Loader SDXL",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Loaders",
    "output_node": false
  },
  "LoRA Stacker": {
    "input": {
      "required": {
        "input_mode": [
          [
            "simple",
            "advanced"
          ]
        ],
        "lora_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "lora_name_1": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_2": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_3": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_4": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_5": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_6": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_7": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_8": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_9": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_10": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_11": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_12": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_13": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_14": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_15": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_16": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_17": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_18": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_19": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_20": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_21": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_22": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_23": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_24": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_25": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_26": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_27": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_28": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_29": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_30": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_31": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_32": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_33": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_34": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_35": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_36": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_37": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_38": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_39": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_40": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_41": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_42": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_43": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_44": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_45": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_46": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_47": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_48": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_49": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_wt_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "lora_count",
        "lora_name_1",
        "lora_wt_1",
        "model_str_1",
        "clip_str_1",
        "lora_name_2",
        "lora_wt_2",
        "model_str_2",
        "clip_str_2",
        "lora_name_3",
        "lora_wt_3",
        "model_str_3",
        "clip_str_3",
        "lora_name_4",
        "lora_wt_4",
        "model_str_4",
        "clip_str_4",
        "lora_name_5",
        "lora_wt_5",
        "model_str_5",
        "clip_str_5",
        "lora_name_6",
        "lora_wt_6",
        "model_str_6",
        "clip_str_6",
        "lora_name_7",
        "lora_wt_7",
        "model_str_7",
        "clip_str_7",
        "lora_name_8",
        "lora_wt_8",
        "model_str_8",
        "clip_str_8",
        "lora_name_9",
        "lora_wt_9",
        "model_str_9",
        "clip_str_9",
        "lora_name_10",
        "lora_wt_10",
        "model_str_10",
        "clip_str_10",
        "lora_name_11",
        "lora_wt_11",
        "model_str_11",
        "clip_str_11",
        "lora_name_12",
        "lora_wt_12",
        "model_str_12",
        "clip_str_12",
        "lora_name_13",
        "lora_wt_13",
        "model_str_13",
        "clip_str_13",
        "lora_name_14",
        "lora_wt_14",
        "model_str_14",
        "clip_str_14",
        "lora_name_15",
        "lora_wt_15",
        "model_str_15",
        "clip_str_15",
        "lora_name_16",
        "lora_wt_16",
        "model_str_16",
        "clip_str_16",
        "lora_name_17",
        "lora_wt_17",
        "model_str_17",
        "clip_str_17",
        "lora_name_18",
        "lora_wt_18",
        "model_str_18",
        "clip_str_18",
        "lora_name_19",
        "lora_wt_19",
        "model_str_19",
        "clip_str_19",
        "lora_name_20",
        "lora_wt_20",
        "model_str_20",
        "clip_str_20",
        "lora_name_21",
        "lora_wt_21",
        "model_str_21",
        "clip_str_21",
        "lora_name_22",
        "lora_wt_22",
        "model_str_22",
        "clip_str_22",
        "lora_name_23",
        "lora_wt_23",
        "model_str_23",
        "clip_str_23",
        "lora_name_24",
        "lora_wt_24",
        "model_str_24",
        "clip_str_24",
        "lora_name_25",
        "lora_wt_25",
        "model_str_25",
        "clip_str_25",
        "lora_name_26",
        "lora_wt_26",
        "model_str_26",
        "clip_str_26",
        "lora_name_27",
        "lora_wt_27",
        "model_str_27",
        "clip_str_27",
        "lora_name_28",
        "lora_wt_28",
        "model_str_28",
        "clip_str_28",
        "lora_name_29",
        "lora_wt_29",
        "model_str_29",
        "clip_str_29",
        "lora_name_30",
        "lora_wt_30",
        "model_str_30",
        "clip_str_30",
        "lora_name_31",
        "lora_wt_31",
        "model_str_31",
        "clip_str_31",
        "lora_name_32",
        "lora_wt_32",
        "model_str_32",
        "clip_str_32",
        "lora_name_33",
        "lora_wt_33",
        "model_str_33",
        "clip_str_33",
        "lora_name_34",
        "lora_wt_34",
        "model_str_34",
        "clip_str_34",
        "lora_name_35",
        "lora_wt_35",
        "model_str_35",
        "clip_str_35",
        "lora_name_36",
        "lora_wt_36",
        "model_str_36",
        "clip_str_36",
        "lora_name_37",
        "lora_wt_37",
        "model_str_37",
        "clip_str_37",
        "lora_name_38",
        "lora_wt_38",
        "model_str_38",
        "clip_str_38",
        "lora_name_39",
        "lora_wt_39",
        "model_str_39",
        "clip_str_39",
        "lora_name_40",
        "lora_wt_40",
        "model_str_40",
        "clip_str_40",
        "lora_name_41",
        "lora_wt_41",
        "model_str_41",
        "clip_str_41",
        "lora_name_42",
        "lora_wt_42",
        "model_str_42",
        "clip_str_42",
        "lora_name_43",
        "lora_wt_43",
        "model_str_43",
        "clip_str_43",
        "lora_name_44",
        "lora_wt_44",
        "model_str_44",
        "clip_str_44",
        "lora_name_45",
        "lora_wt_45",
        "model_str_45",
        "clip_str_45",
        "lora_name_46",
        "lora_wt_46",
        "model_str_46",
        "clip_str_46",
        "lora_name_47",
        "lora_wt_47",
        "model_str_47",
        "clip_str_47",
        "lora_name_48",
        "lora_wt_48",
        "model_str_48",
        "clip_str_48",
        "lora_name_49",
        "lora_wt_49",
        "model_str_49",
        "clip_str_49"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "LORA_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LORA_STACK"
    ],
    "name": "LoRA Stacker",
    "display_name": "LoRA Stacker",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Stackers",
    "output_node": false
  },
  "Control Net Stacker": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "cnet_stack"
      ]
    },
    "output": [
      "CONTROL_NET_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CNET_STACK"
    ],
    "name": "Control Net Stacker",
    "display_name": "Control Net Stacker",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Stackers",
    "output_node": false
  },
  "Apply ControlNet Stack": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative"
      ],
      "optional": [
        "cnet_stack"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING+",
      "CONDITIONING-"
    ],
    "name": "Apply ControlNet Stack",
    "display_name": "Apply ControlNet Stack",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Stackers",
    "output_node": false
  },
  "Unpack SDXL Tuple": {
    "input": {
      "required": {
        "sdxl_tuple": [
          "SDXL_TUPLE"
        ]
      }
    },
    "input_order": {
      "required": [
        "sdxl_tuple"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "BASE_MODEL",
      "BASE_CLIP",
      "BASE_CONDITIONING+",
      "BASE_CONDITIONING-",
      "REFINER_MODEL",
      "REFINER_CLIP",
      "REFINER_CONDITIONING+",
      "REFINER_CONDITIONING-"
    ],
    "name": "Unpack SDXL Tuple",
    "display_name": "Unpack SDXL Tuple",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Misc",
    "output_node": false
  },
  "Pack SDXL Tuple": {
    "input": {
      "required": {
        "base_model": [
          "MODEL"
        ],
        "base_clip": [
          "CLIP"
        ],
        "base_positive": [
          "CONDITIONING"
        ],
        "base_negative": [
          "CONDITIONING"
        ],
        "refiner_model": [
          "MODEL"
        ],
        "refiner_clip": [
          "CLIP"
        ],
        "refiner_positive": [
          "CONDITIONING"
        ],
        "refiner_negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_model",
        "base_clip",
        "base_positive",
        "base_negative",
        "refiner_model",
        "refiner_clip",
        "refiner_positive",
        "refiner_negative"
      ]
    },
    "output": [
      "SDXL_TUPLE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SDXL_TUPLE"
    ],
    "name": "Pack SDXL Tuple",
    "display_name": "Pack SDXL Tuple",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Misc",
    "output_node": false
  },
  "XY Plot": {
    "input": {
      "required": {
        "grid_spacing": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 500,
            "step": 5
          }
        ],
        "XY_flip": [
          [
            "False",
            "True"
          ]
        ],
        "Y_label_orientation": [
          [
            "Horizontal",
            "Vertical"
          ]
        ],
        "cache_models": [
          [
            "True",
            "False"
          ]
        ],
        "ksampler_output_image": [
          [
            "Images",
            "Plot"
          ]
        ]
      },
      "optional": {
        "dependencies": [
          "DEPENDENCIES"
        ],
        "X": [
          "XY"
        ],
        "Y": [
          "XY"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "grid_spacing",
        "XY_flip",
        "Y_label_orientation",
        "cache_models",
        "ksampler_output_image"
      ],
      "optional": [
        "dependencies",
        "X",
        "Y"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "SCRIPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCRIPT"
    ],
    "name": "XY Plot",
    "display_name": "XY Plot",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Scripts",
    "output_node": false
  },
  "XY Input: Seeds++ Batch": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Seeds++ Batch",
    "display_name": "XY Input: Seeds++ Batch",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Add/Return Noise": {
    "input": {
      "required": {
        "XY_type": [
          [
            "add_noise",
            "return_with_leftover_noise"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "XY_type"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Add/Return Noise",
    "display_name": "XY Input: Add/Return Noise",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Steps": {
    "input": {
      "required": {
        "target_parameter": [
          [
            "steps",
            "start_at_step",
            "end_at_step",
            "refine_at_step"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_step": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "last_step": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "first_start_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "last_start_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "first_end_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "last_end_step": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000
          }
        ],
        "first_refine_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "last_refine_step": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_parameter",
        "batch_count",
        "first_step",
        "last_step",
        "first_start_step",
        "last_start_step",
        "first_end_step",
        "last_end_step",
        "first_refine_step",
        "last_refine_step"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Steps",
    "display_name": "XY Input: Steps",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: CFG Scale": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "last_cfg": [
          "FLOAT",
          {
            "default": 9.0,
            "min": 0.0,
            "max": 100.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_cfg",
        "last_cfg"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: CFG Scale",
    "display_name": "XY Input: CFG Scale",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Sampler/Scheduler": {
    "input": {
      "required": {
        "target_parameter": [
          [
            "sampler",
            "scheduler",
            "sampler & scheduler"
          ]
        ],
        "input_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "sampler_1": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_1": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_2": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_2": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_3": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_3": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_4": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_4": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_5": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_5": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_6": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_6": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_7": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_7": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_8": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_8": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_9": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_9": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_10": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_10": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_11": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_11": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_12": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_12": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_13": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_13": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_14": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_14": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_15": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_15": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_16": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_16": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_17": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_17": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_18": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_18": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_19": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_19": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_20": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_20": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_21": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_21": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_22": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_22": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_23": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_23": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_24": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_24": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_25": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_25": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_26": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_26": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_27": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_27": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_28": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_28": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_29": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_29": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_30": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_30": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_31": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_31": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_32": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_32": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_33": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_33": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_34": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_34": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_35": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_35": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_36": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_36": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_37": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_37": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_38": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_38": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_39": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_39": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_40": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_40": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_41": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_41": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_42": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_42": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_43": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_43": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_44": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_44": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_45": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_45": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_46": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_46": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_47": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_47": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_48": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_48": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_49": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_49": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ],
        "sampler_50": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_50": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "target_parameter",
        "input_count",
        "sampler_1",
        "scheduler_1",
        "sampler_2",
        "scheduler_2",
        "sampler_3",
        "scheduler_3",
        "sampler_4",
        "scheduler_4",
        "sampler_5",
        "scheduler_5",
        "sampler_6",
        "scheduler_6",
        "sampler_7",
        "scheduler_7",
        "sampler_8",
        "scheduler_8",
        "sampler_9",
        "scheduler_9",
        "sampler_10",
        "scheduler_10",
        "sampler_11",
        "scheduler_11",
        "sampler_12",
        "scheduler_12",
        "sampler_13",
        "scheduler_13",
        "sampler_14",
        "scheduler_14",
        "sampler_15",
        "scheduler_15",
        "sampler_16",
        "scheduler_16",
        "sampler_17",
        "scheduler_17",
        "sampler_18",
        "scheduler_18",
        "sampler_19",
        "scheduler_19",
        "sampler_20",
        "scheduler_20",
        "sampler_21",
        "scheduler_21",
        "sampler_22",
        "scheduler_22",
        "sampler_23",
        "scheduler_23",
        "sampler_24",
        "scheduler_24",
        "sampler_25",
        "scheduler_25",
        "sampler_26",
        "scheduler_26",
        "sampler_27",
        "scheduler_27",
        "sampler_28",
        "scheduler_28",
        "sampler_29",
        "scheduler_29",
        "sampler_30",
        "scheduler_30",
        "sampler_31",
        "scheduler_31",
        "sampler_32",
        "scheduler_32",
        "sampler_33",
        "scheduler_33",
        "sampler_34",
        "scheduler_34",
        "sampler_35",
        "scheduler_35",
        "sampler_36",
        "scheduler_36",
        "sampler_37",
        "scheduler_37",
        "sampler_38",
        "scheduler_38",
        "sampler_39",
        "scheduler_39",
        "sampler_40",
        "scheduler_40",
        "sampler_41",
        "scheduler_41",
        "sampler_42",
        "scheduler_42",
        "sampler_43",
        "scheduler_43",
        "sampler_44",
        "scheduler_44",
        "sampler_45",
        "scheduler_45",
        "sampler_46",
        "scheduler_46",
        "sampler_47",
        "scheduler_47",
        "sampler_48",
        "scheduler_48",
        "sampler_49",
        "scheduler_49",
        "sampler_50",
        "scheduler_50"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Sampler/Scheduler",
    "display_name": "XY Input: Sampler/Scheduler",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Denoise": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_denoise": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "last_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_denoise",
        "last_denoise"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Denoise",
    "display_name": "XY Input: Denoise",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: VAE": {
    "input": {
      "required": {
        "input_mode": [
          [
            "VAE Names",
            "VAE Batch"
          ]
        ],
        "batch_path": [
          "STRING",
          {
            "default": "/example_folder",
            "multiline": false
          }
        ],
        "subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_sort": [
          [
            "ascending",
            "descending"
          ]
        ],
        "batch_max": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 50,
            "step": 1
          }
        ],
        "vae_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "vae_name_1": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_2": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_3": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_4": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_5": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_6": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_7": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_8": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_9": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_10": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_11": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_12": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_13": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_14": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_15": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_16": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_17": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_18": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_19": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_20": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_21": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_22": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_23": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_24": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_25": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_26": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_27": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_28": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_29": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_30": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_31": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_32": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_33": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_34": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_35": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_36": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_37": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_38": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_39": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_40": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_41": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_42": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_43": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_44": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_45": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_46": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_47": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_48": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_49": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "vae_name_50": [
          [
            "None",
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "batch_path",
        "subdirectories",
        "batch_sort",
        "batch_max",
        "vae_count",
        "vae_name_1",
        "vae_name_2",
        "vae_name_3",
        "vae_name_4",
        "vae_name_5",
        "vae_name_6",
        "vae_name_7",
        "vae_name_8",
        "vae_name_9",
        "vae_name_10",
        "vae_name_11",
        "vae_name_12",
        "vae_name_13",
        "vae_name_14",
        "vae_name_15",
        "vae_name_16",
        "vae_name_17",
        "vae_name_18",
        "vae_name_19",
        "vae_name_20",
        "vae_name_21",
        "vae_name_22",
        "vae_name_23",
        "vae_name_24",
        "vae_name_25",
        "vae_name_26",
        "vae_name_27",
        "vae_name_28",
        "vae_name_29",
        "vae_name_30",
        "vae_name_31",
        "vae_name_32",
        "vae_name_33",
        "vae_name_34",
        "vae_name_35",
        "vae_name_36",
        "vae_name_37",
        "vae_name_38",
        "vae_name_39",
        "vae_name_40",
        "vae_name_41",
        "vae_name_42",
        "vae_name_43",
        "vae_name_44",
        "vae_name_45",
        "vae_name_46",
        "vae_name_47",
        "vae_name_48",
        "vae_name_49",
        "vae_name_50"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: VAE",
    "display_name": "XY Input: VAE",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Prompt S/R": {
    "input": {
      "required": {
        "target_prompt": [
          [
            "positive",
            "negative"
          ]
        ],
        "search_txt": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 49
          }
        ],
        "replace_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_6": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_7": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_8": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_9": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_10": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_11": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_12": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_13": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_14": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_15": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_16": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_17": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_18": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_19": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_20": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_21": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_22": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_23": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_24": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_25": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_26": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_27": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_28": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_29": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_30": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_31": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_32": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_33": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_34": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_35": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_36": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_37": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_38": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_39": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_40": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_41": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_42": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_43": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_44": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_45": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_46": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_47": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_48": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_49": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_prompt",
        "search_txt",
        "replace_count",
        "replace_1",
        "replace_2",
        "replace_3",
        "replace_4",
        "replace_5",
        "replace_6",
        "replace_7",
        "replace_8",
        "replace_9",
        "replace_10",
        "replace_11",
        "replace_12",
        "replace_13",
        "replace_14",
        "replace_15",
        "replace_16",
        "replace_17",
        "replace_18",
        "replace_19",
        "replace_20",
        "replace_21",
        "replace_22",
        "replace_23",
        "replace_24",
        "replace_25",
        "replace_26",
        "replace_27",
        "replace_28",
        "replace_29",
        "replace_30",
        "replace_31",
        "replace_32",
        "replace_33",
        "replace_34",
        "replace_35",
        "replace_36",
        "replace_37",
        "replace_38",
        "replace_39",
        "replace_40",
        "replace_41",
        "replace_42",
        "replace_43",
        "replace_44",
        "replace_45",
        "replace_46",
        "replace_47",
        "replace_48",
        "replace_49"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Prompt S/R",
    "display_name": "XY Input: Prompt S/R",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Aesthetic Score": {
    "input": {
      "required": {
        "target_ascore": [
          [
            "positive",
            "negative"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_ascore": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "last_ascore": [
          "FLOAT",
          {
            "default": 10.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_ascore",
        "batch_count",
        "first_ascore",
        "last_ascore"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Aesthetic Score",
    "display_name": "XY Input: Aesthetic Score",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Refiner On/Off": {
    "input": {
      "required": {
        "refine_at_percent": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "refine_at_percent"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Refiner On/Off",
    "display_name": "XY Input: Refiner On/Off",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Checkpoint": {
    "input": {
      "required": {
        "target_ckpt": [
          [
            "Base",
            "Refiner"
          ]
        ],
        "input_mode": [
          [
            "Ckpt Names",
            "Ckpt Names+ClipSkip",
            "Ckpt Names+ClipSkip+VAE",
            "Checkpoint Batch"
          ]
        ],
        "batch_path": [
          "STRING",
          {
            "default": "/example_folder",
            "multiline": false
          }
        ],
        "subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_sort": [
          [
            "ascending",
            "descending"
          ]
        ],
        "batch_max": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 50,
            "step": 1
          }
        ],
        "ckpt_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "ckpt_name_1": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_1": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_1": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_2": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_2": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_2": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_3": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_3": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_3": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_4": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_4": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_4": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_5": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_5": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_5": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_6": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_6": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_6": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_7": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_7": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_7": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_8": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_8": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_8": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_9": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_9": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_9": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_10": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_10": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_10": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_11": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_11": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_11": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_12": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_12": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_12": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_13": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_13": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_13": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_14": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_14": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_14": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_15": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_15": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_15": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_16": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_16": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_16": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_17": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_17": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_17": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_18": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_18": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_18": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_19": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_19": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_19": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_20": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_20": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_20": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_21": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_21": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_21": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_22": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_22": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_22": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_23": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_23": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_23": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_24": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_24": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_24": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_25": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_25": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_25": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_26": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_26": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_26": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_27": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_27": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_27": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_28": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_28": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_28": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_29": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_29": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_29": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_30": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_30": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_30": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_31": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_31": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_31": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_32": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_32": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_32": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_33": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_33": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_33": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_34": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_34": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_34": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_35": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_35": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_35": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_36": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_36": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_36": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_37": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_37": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_37": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_38": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_38": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_38": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_39": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_39": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_39": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_40": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_40": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_40": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_41": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_41": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_41": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_42": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_42": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_42": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_43": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_43": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_43": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_44": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_44": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_44": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_45": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_45": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_45": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_46": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_46": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_46": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_47": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_47": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_47": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_48": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_48": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_48": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_49": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_49": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_49": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "ckpt_name_50": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "clip_skip_50": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_50": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "target_ckpt",
        "input_mode",
        "batch_path",
        "subdirectories",
        "batch_sort",
        "batch_max",
        "ckpt_count",
        "ckpt_name_1",
        "clip_skip_1",
        "vae_name_1",
        "ckpt_name_2",
        "clip_skip_2",
        "vae_name_2",
        "ckpt_name_3",
        "clip_skip_3",
        "vae_name_3",
        "ckpt_name_4",
        "clip_skip_4",
        "vae_name_4",
        "ckpt_name_5",
        "clip_skip_5",
        "vae_name_5",
        "ckpt_name_6",
        "clip_skip_6",
        "vae_name_6",
        "ckpt_name_7",
        "clip_skip_7",
        "vae_name_7",
        "ckpt_name_8",
        "clip_skip_8",
        "vae_name_8",
        "ckpt_name_9",
        "clip_skip_9",
        "vae_name_9",
        "ckpt_name_10",
        "clip_skip_10",
        "vae_name_10",
        "ckpt_name_11",
        "clip_skip_11",
        "vae_name_11",
        "ckpt_name_12",
        "clip_skip_12",
        "vae_name_12",
        "ckpt_name_13",
        "clip_skip_13",
        "vae_name_13",
        "ckpt_name_14",
        "clip_skip_14",
        "vae_name_14",
        "ckpt_name_15",
        "clip_skip_15",
        "vae_name_15",
        "ckpt_name_16",
        "clip_skip_16",
        "vae_name_16",
        "ckpt_name_17",
        "clip_skip_17",
        "vae_name_17",
        "ckpt_name_18",
        "clip_skip_18",
        "vae_name_18",
        "ckpt_name_19",
        "clip_skip_19",
        "vae_name_19",
        "ckpt_name_20",
        "clip_skip_20",
        "vae_name_20",
        "ckpt_name_21",
        "clip_skip_21",
        "vae_name_21",
        "ckpt_name_22",
        "clip_skip_22",
        "vae_name_22",
        "ckpt_name_23",
        "clip_skip_23",
        "vae_name_23",
        "ckpt_name_24",
        "clip_skip_24",
        "vae_name_24",
        "ckpt_name_25",
        "clip_skip_25",
        "vae_name_25",
        "ckpt_name_26",
        "clip_skip_26",
        "vae_name_26",
        "ckpt_name_27",
        "clip_skip_27",
        "vae_name_27",
        "ckpt_name_28",
        "clip_skip_28",
        "vae_name_28",
        "ckpt_name_29",
        "clip_skip_29",
        "vae_name_29",
        "ckpt_name_30",
        "clip_skip_30",
        "vae_name_30",
        "ckpt_name_31",
        "clip_skip_31",
        "vae_name_31",
        "ckpt_name_32",
        "clip_skip_32",
        "vae_name_32",
        "ckpt_name_33",
        "clip_skip_33",
        "vae_name_33",
        "ckpt_name_34",
        "clip_skip_34",
        "vae_name_34",
        "ckpt_name_35",
        "clip_skip_35",
        "vae_name_35",
        "ckpt_name_36",
        "clip_skip_36",
        "vae_name_36",
        "ckpt_name_37",
        "clip_skip_37",
        "vae_name_37",
        "ckpt_name_38",
        "clip_skip_38",
        "vae_name_38",
        "ckpt_name_39",
        "clip_skip_39",
        "vae_name_39",
        "ckpt_name_40",
        "clip_skip_40",
        "vae_name_40",
        "ckpt_name_41",
        "clip_skip_41",
        "vae_name_41",
        "ckpt_name_42",
        "clip_skip_42",
        "vae_name_42",
        "ckpt_name_43",
        "clip_skip_43",
        "vae_name_43",
        "ckpt_name_44",
        "clip_skip_44",
        "vae_name_44",
        "ckpt_name_45",
        "clip_skip_45",
        "vae_name_45",
        "ckpt_name_46",
        "clip_skip_46",
        "vae_name_46",
        "ckpt_name_47",
        "clip_skip_47",
        "vae_name_47",
        "ckpt_name_48",
        "clip_skip_48",
        "vae_name_48",
        "ckpt_name_49",
        "clip_skip_49",
        "vae_name_49",
        "ckpt_name_50",
        "clip_skip_50",
        "vae_name_50"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Checkpoint",
    "display_name": "XY Input: Checkpoint",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Clip Skip": {
    "input": {
      "required": {
        "target_ckpt": [
          [
            "Base",
            "Refiner"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "last_clip_skip": [
          "INT",
          {
            "default": -3,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_ckpt",
        "batch_count",
        "first_clip_skip",
        "last_clip_skip"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Clip Skip",
    "display_name": "XY Input: Clip Skip",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: LoRA": {
    "input": {
      "required": {
        "input_mode": [
          [
            "LoRA Names",
            "LoRA Names+Weights",
            "LoRA Batch"
          ]
        ],
        "batch_path": [
          "STRING",
          {
            "default": "/example_folder",
            "multiline": false
          }
        ],
        "subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_sort": [
          [
            "ascending",
            "descending"
          ]
        ],
        "batch_max": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 50,
            "step": 1
          }
        ],
        "lora_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_1": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_2": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_3": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_4": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_5": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_6": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_7": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_8": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_9": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_10": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_11": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_12": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_13": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_14": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_15": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_16": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_17": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_18": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_19": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_20": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_21": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_22": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_23": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_24": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_25": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_26": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_27": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_28": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_29": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_30": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_31": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_32": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_33": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_34": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_35": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_36": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_37": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_38": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_39": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_40": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_41": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_42": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_43": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_44": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_45": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_46": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_47": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_48": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_49": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_50": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_str_50": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_50": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "batch_path",
        "subdirectories",
        "batch_sort",
        "batch_max",
        "lora_count",
        "model_strength",
        "clip_strength",
        "lora_name_1",
        "model_str_1",
        "clip_str_1",
        "lora_name_2",
        "model_str_2",
        "clip_str_2",
        "lora_name_3",
        "model_str_3",
        "clip_str_3",
        "lora_name_4",
        "model_str_4",
        "clip_str_4",
        "lora_name_5",
        "model_str_5",
        "clip_str_5",
        "lora_name_6",
        "model_str_6",
        "clip_str_6",
        "lora_name_7",
        "model_str_7",
        "clip_str_7",
        "lora_name_8",
        "model_str_8",
        "clip_str_8",
        "lora_name_9",
        "model_str_9",
        "clip_str_9",
        "lora_name_10",
        "model_str_10",
        "clip_str_10",
        "lora_name_11",
        "model_str_11",
        "clip_str_11",
        "lora_name_12",
        "model_str_12",
        "clip_str_12",
        "lora_name_13",
        "model_str_13",
        "clip_str_13",
        "lora_name_14",
        "model_str_14",
        "clip_str_14",
        "lora_name_15",
        "model_str_15",
        "clip_str_15",
        "lora_name_16",
        "model_str_16",
        "clip_str_16",
        "lora_name_17",
        "model_str_17",
        "clip_str_17",
        "lora_name_18",
        "model_str_18",
        "clip_str_18",
        "lora_name_19",
        "model_str_19",
        "clip_str_19",
        "lora_name_20",
        "model_str_20",
        "clip_str_20",
        "lora_name_21",
        "model_str_21",
        "clip_str_21",
        "lora_name_22",
        "model_str_22",
        "clip_str_22",
        "lora_name_23",
        "model_str_23",
        "clip_str_23",
        "lora_name_24",
        "model_str_24",
        "clip_str_24",
        "lora_name_25",
        "model_str_25",
        "clip_str_25",
        "lora_name_26",
        "model_str_26",
        "clip_str_26",
        "lora_name_27",
        "model_str_27",
        "clip_str_27",
        "lora_name_28",
        "model_str_28",
        "clip_str_28",
        "lora_name_29",
        "model_str_29",
        "clip_str_29",
        "lora_name_30",
        "model_str_30",
        "clip_str_30",
        "lora_name_31",
        "model_str_31",
        "clip_str_31",
        "lora_name_32",
        "model_str_32",
        "clip_str_32",
        "lora_name_33",
        "model_str_33",
        "clip_str_33",
        "lora_name_34",
        "model_str_34",
        "clip_str_34",
        "lora_name_35",
        "model_str_35",
        "clip_str_35",
        "lora_name_36",
        "model_str_36",
        "clip_str_36",
        "lora_name_37",
        "model_str_37",
        "clip_str_37",
        "lora_name_38",
        "model_str_38",
        "clip_str_38",
        "lora_name_39",
        "model_str_39",
        "clip_str_39",
        "lora_name_40",
        "model_str_40",
        "clip_str_40",
        "lora_name_41",
        "model_str_41",
        "clip_str_41",
        "lora_name_42",
        "model_str_42",
        "clip_str_42",
        "lora_name_43",
        "model_str_43",
        "clip_str_43",
        "lora_name_44",
        "model_str_44",
        "clip_str_44",
        "lora_name_45",
        "model_str_45",
        "clip_str_45",
        "lora_name_46",
        "model_str_46",
        "clip_str_46",
        "lora_name_47",
        "model_str_47",
        "clip_str_47",
        "lora_name_48",
        "model_str_48",
        "clip_str_48",
        "lora_name_49",
        "model_str_49",
        "clip_str_49",
        "lora_name_50",
        "model_str_50",
        "clip_str_50"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: LoRA",
    "display_name": "XY Input: LoRA",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: LoRA Plot": {
    "input": {
      "required": {
        "input_mode": [
          [
            "X: LoRA Batch, Y: LoRA Weight",
            "X: LoRA Batch, Y: Model Strength",
            "X: LoRA Batch, Y: Clip Strength",
            "X: Model Strength, Y: Clip Strength"
          ]
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "X_batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "X_batch_path": [
          "STRING",
          {
            "default": "/example_folder",
            "multiline": false
          }
        ],
        "X_subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "X_batch_sort": [
          [
            "ascending",
            "descending"
          ]
        ],
        "X_first_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "X_last_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "Y_batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "Y_first_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "Y_last_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "lora_name",
        "model_strength",
        "clip_strength",
        "X_batch_count",
        "X_batch_path",
        "X_subdirectories",
        "X_batch_sort",
        "X_first_value",
        "X_last_value",
        "Y_batch_count",
        "Y_first_value",
        "Y_last_value"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "XY",
      "XY"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "X",
      "Y"
    ],
    "name": "XY Input: LoRA Plot",
    "display_name": "XY Input: LoRA Plot",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: LoRA Stacks": {
    "input": {
      "required": {
        "node_state": [
          [
            "Enabled"
          ]
        ]
      },
      "optional": {
        "lora_stack_1": [
          "LORA_STACK"
        ],
        "lora_stack_2": [
          "LORA_STACK"
        ],
        "lora_stack_3": [
          "LORA_STACK"
        ],
        "lora_stack_4": [
          "LORA_STACK"
        ],
        "lora_stack_5": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "node_state"
      ],
      "optional": [
        "lora_stack_1",
        "lora_stack_2",
        "lora_stack_3",
        "lora_stack_4",
        "lora_stack_5"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: LoRA Stacks",
    "display_name": "XY Input: LoRA Stacks",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Control Net": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "target_parameter": [
          [
            "strength",
            "start_percent",
            "end_percent"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "last_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "first_start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "last_start_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "first_end_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "last_end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "image",
        "target_parameter",
        "batch_count",
        "first_strength",
        "last_strength",
        "first_start_percent",
        "last_start_percent",
        "first_end_percent",
        "last_end_percent",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "cnet_stack"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Control Net",
    "display_name": "XY Input: Control Net",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Control Net Plot": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "plot_type": [
          [
            "X: Strength, Y: Start%",
            "X: Strength, Y: End%",
            "X: Start%, Y: Strength",
            "X: Start%, Y: End%",
            "X: End%, Y: Strength",
            "X: End%, Y: Start%"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "X_batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "X_first_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "X_last_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "Y_batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "Y_first_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "Y_last_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "image",
        "plot_type",
        "strength",
        "start_percent",
        "end_percent",
        "X_batch_count",
        "X_first_value",
        "X_last_value",
        "Y_batch_count",
        "Y_first_value",
        "Y_last_value"
      ],
      "optional": [
        "cnet_stack"
      ]
    },
    "output": [
      "XY",
      "XY"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "X",
      "Y"
    ],
    "name": "XY Input: Control Net Plot",
    "display_name": "XY Input: Control Net Plot",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Manual XY Entry": {
    "input": {
      "required": {
        "plot_type": [
          [
            "Nothing",
            "Seeds++ Batch",
            "Steps",
            "StartStep",
            "EndStep",
            "CFG Scale",
            "Sampler",
            "Scheduler",
            "Denoise",
            "VAE",
            "Positive Prompt S/R",
            "Negative Prompt S/R",
            "Checkpoint",
            "Clip Skip",
            "LoRA"
          ]
        ],
        "plot_value": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "plot_type",
        "plot_value"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Manual XY Entry",
    "display_name": "XY Input: Manual XY Entry",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "Manual XY Entry Info": {
    "input": {
      "required": {
        "notes": [
          "STRING",
          {
            "default": "_____________SYNTAX_____________\n(X/Y_types)     (X/Y_values)\nSeeds++ Batch   batch_count\nSteps           steps_1;steps_2;...\nStartStep       start_step_1;start_step_2;...\nEndStep         end_step_1;end_step_2;...\nCFG Scale       cfg_1;cfg_2;...\nSampler(1)      sampler_1;sampler_2;...\nSampler(2)      sampler_1,scheduler_1;...\nSampler(3)      sampler_1;...;,default_scheduler\nScheduler       scheduler_1;scheduler_2;...\nDenoise         denoise_1;denoise_2;...\nVAE             vae_1;vae_2;vae_3;...\n+Prompt S/R     search_txt;replace_1;replace_2;...\n-Prompt S/R     search_txt;replace_1;replace_2;...\nCheckpoint(1)   ckpt_1;ckpt_2;ckpt_3;...\nCheckpoint(2)   ckpt_1,clip_skip_1;...\nCheckpoint(3)   ckpt_1;ckpt_2;...;,default_clip_skip\nClip Skip       clip_skip_1;clip_skip_2;...\nLoRA(1)         lora_1;lora_2;lora_3;...\nLoRA(2)         lora_1;...;,default_model_str,default_clip_str\nLoRA(3)         lora_1,model_str_1,clip_str_1;...\n\n____________SAMPLERS____________\neuler;\neuler_cfg_pp;\neuler_ancestral;\neuler_ancestral_cfg_pp;\nheun;\nheunpp2;\ndpm_2;\ndpm_2_ancestral;\nlms;\ndpm_fast;\ndpm_adaptive;\ndpmpp_2s_ancestral;\ndpmpp_2s_ancestral_cfg_pp;\ndpmpp_sde;\ndpmpp_sde_gpu;\ndpmpp_2m;\ndpmpp_2m_cfg_pp;\ndpmpp_2m_sde;\ndpmpp_2m_sde_gpu;\ndpmpp_3m_sde;\ndpmpp_3m_sde_gpu;\nddpm;\nlcm;\nipndm;\nipndm_v;\ndeis;\nres_multistep;\nres_multistep_cfg_pp;\ngradient_estimation;\nddim;\nuni_pc;\nuni_pc_bh2\n\n___________SCHEDULERS___________\nnormal;\nkarras;\nexponential;\nsgm_uniform;\nsimple;\nddim_uniform;\nbeta;\nlinear_quadratic;\nkl_optimal;\nAYS SD1;\nAYS SDXL;\nAYS SVD\n\n_____________VAES_______________\nFLUX1/ae.safetensors;\nSDXL/sdxl_vae.safetensors;\nae.safetensors\n\n___________CHECKPOINTS__________\n1.5/aziibpixelmix_v10.safetensors;\nFLUX1/flux1-dev-fp8.safetensors;\nSD1.5/aziibpixelmix_v10.safetensors;\nSDXL/dreamshaper_xl_v2.1.safetensors;\nSDXL/sd_xl_base_1.0.safetensors;\nSDXL/sd_xl_refiner_1.0.safetensors;\natomixAnimeXL_v10.safetensors;\nduchaitenAiartSDXL_v33515LightningTCD.safetensors;\njuggernautXL_juggXIByRundiffusion.safetensors;\nmeinamix.safetensors;\nphotogasm.safetensors;\nrealismByStableYogi_v40FP16.safetensors;\nrealvisxlV40_v40LightningBakedvae.safetensors;\nrevanimated.safetensors;\nsd_xl_base_1.0.safetensors;\nsd_xl_refiner_1.0.safetensors;\ntheAraminta_cv5.safetensors\n\n_____________LORAS______________\n1.5/pixel-art-xl-v1.0.safetensors;\n1.5/pixel-art-xl-v1.1.safetensors;\n1990sAnalogStyle.safetensors;\nInstagram_Selfie_SDXL.safetensors;\nMJ52_v2.0.safetensors;\nNSFWFilter.safetensors;\nPinterest_Selfie_V4.safetensors;\nPinterest_Selfie_V5_20_epochs.safetensors;\nPinterest_Snap_Selfie.safetensors;\nSD1.5/pixel-art-xl-v1.0.safetensors;\nSD1.5/pixel-art-xl-v1.1.safetensors;\nSDXL-Lightning/sdxl_lightning_8step_lora.safetensors;\nSDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors;\nbadquality.safetensors;\nblurxl.safetensors;\ndark.safetensors;\nenvyzoomslider.safetensors;\nhand_5_5.safetensors;\nip-adapter-faceid-plusv2_sd15_lora.safetensors;\nip-adapter-faceid-plusv2_sdxl_lora.safetensors;\nip-adapter-faceid_sd15_lora.safetensors;\nipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors;\nlcm.safetensors;\nlcm_sdxl.safetensors;\nlcmxl.safetensors;\nmidjourney.safetensors;\nmore_details.safetensors;\noutdoor_selife_epoch_10.safetensors;\nselfie_epoch_10.safetensors\n",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "notes"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Manual XY Entry Info",
    "display_name": "Manual XY Entry Info",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "Join XY Inputs of Same Type": {
    "input": {
      "required": {
        "XY_1": [
          "XY"
        ],
        "XY_2": [
          "XY"
        ]
      }
    },
    "input_order": {
      "required": [
        "XY_1",
        "XY_2"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "Join XY Inputs of Same Type",
    "display_name": "Join XY Inputs of Same Type",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "Image Overlay": {
    "input": {
      "required": {
        "base_image": [
          "IMAGE"
        ],
        "overlay_image": [
          "IMAGE"
        ],
        "overlay_resize": [
          [
            "None",
            "Fit",
            "Resize by rescale_factor",
            "Resize to width & heigth"
          ]
        ],
        "resize_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 16.0,
            "step": 0.1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 10
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 10
          }
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 5
          }
        ],
        "opacity": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 5
          }
        ]
      },
      "optional": {
        "optional_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_image",
        "overlay_image",
        "overlay_resize",
        "resize_method",
        "rescale_factor",
        "width",
        "height",
        "x_offset",
        "y_offset",
        "rotation",
        "opacity"
      ],
      "optional": [
        "optional_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Overlay",
    "display_name": "Image Overlay",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Image",
    "output_node": false
  },
  "Noise Control Script": {
    "input": {
      "required": {
        "rng_source": [
          [
            "cpu",
            "gpu",
            "nv"
          ]
        ],
        "cfg_denoiser": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "add_seed_noise": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.015,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "script": [
          "SCRIPT"
        ]
      }
    },
    "input_order": {
      "required": [
        "rng_source",
        "cfg_denoiser",
        "add_seed_noise",
        "seed",
        "weight"
      ],
      "optional": [
        "script"
      ]
    },
    "output": [
      "SCRIPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCRIPT"
    ],
    "name": "Noise Control Script",
    "display_name": "Noise Control Script",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Scripts",
    "output_node": false
  },
  "HighRes-Fix Script": {
    "input": {
      "required": {
        "upscale_type": [
          [
            "latent",
            "pixel",
            "both"
          ]
        ],
        "hires_ckpt_name": [
          [
            "(use same)",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "latent_upscaler": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp",
            "city96.v1",
            "city96.xl",
            "ttl_nn.SDXL",
            "ttl_nn.SD 1.x"
          ]
        ],
        "pixel_upscaler": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth"
          ]
        ],
        "upscale_by": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.01,
            "max": 8.0,
            "step": 0.05
          }
        ],
        "use_same_seed": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "hires_steps": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.56,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 1
          }
        ],
        "use_controlnet": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "control_net_name": [
          [
            "1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "1.5/control_v11p_sd15_canny_fp16.safetensors",
            "OpenPoseXL2.safetensors",
            "SD1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "SD1.5/control_v11p_sd15_canny_fp16.safetensors",
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_sd15_inpaint_depth_hand_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "diffusion_pytorch_model.safetensors"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "preprocessor": [
          [
            "none",
            "LineartStandardPreprocessor",
            "AnimeFace_SemSegPreprocessor",
            "DepthAnythingV2Preprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "BAE-NormalMapPreprocessor",
            "PyraCannyPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "M-LSDPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "SAMPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "AnyLineArtPreprocessor_aux",
            "Zoe-DepthMapPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "PiDiNetPreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "ColorPreprocessor",
            "BinaryPreprocessor",
            "ShufflePreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "DSINE-NormalMapPreprocessor",
            "LineArtPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "AnimeLineArtPreprocessor",
            "OpenposePreprocessor",
            "TEEDPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "DensePosePreprocessor",
            "CannyEdgePreprocessor"
          ],
          {
            "default": "none"
          }
        ],
        "preprocessor_imgs": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "script": [
          "SCRIPT"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "upscale_type",
        "hires_ckpt_name",
        "latent_upscaler",
        "pixel_upscaler",
        "upscale_by",
        "use_same_seed",
        "seed",
        "hires_steps",
        "denoise",
        "iterations",
        "use_controlnet",
        "control_net_name",
        "strength",
        "preprocessor",
        "preprocessor_imgs"
      ],
      "optional": [
        "script"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "SCRIPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCRIPT"
    ],
    "name": "HighRes-Fix Script",
    "display_name": "HighRes-Fix Script",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Scripts",
    "output_node": false
  },
  "Tiled Upscaler Script": {
    "input": {
      "required": {
        "upscale_by": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.01,
            "max": 8.0,
            "step": 0.05
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 256,
            "max": 16384,
            "step": 64
          }
        ],
        "tiling_strategy": [
          [
            "random",
            "random strict",
            "padded",
            "simple",
            "none"
          ]
        ],
        "tiling_steps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 10000
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "use_controlnet": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "tile_controlnet": [
          [
            "1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "1.5/control_v11p_sd15_canny_fp16.safetensors",
            "OpenPoseXL2.safetensors",
            "SD1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "SD1.5/control_v11p_sd15_canny_fp16.safetensors",
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_sd15_inpaint_depth_hand_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "diffusion_pytorch_model.safetensors"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "script": [
          "SCRIPT"
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_by",
        "tile_size",
        "tiling_strategy",
        "tiling_steps",
        "seed",
        "denoise",
        "use_controlnet",
        "tile_controlnet",
        "strength"
      ],
      "optional": [
        "script"
      ]
    },
    "output": [
      "SCRIPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCRIPT"
    ],
    "name": "Tiled Upscaler Script",
    "display_name": "Tiled Upscaler Script",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Scripts",
    "output_node": false
  },
  "LoRA Stack to String converter": {
    "input": {
      "required": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_stack"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LoRA string"
    ],
    "name": "LoRA Stack to String converter",
    "display_name": "LoRA Stack to String converter",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Misc",
    "output_node": false
  },
  "PlaySound|pysssss": {
    "input": {
      "required": {
        "any": [
          "*",
          {}
        ],
        "mode": [
          [
            "always",
            "on empty queue"
          ],
          {}
        ],
        "volume": [
          "FLOAT",
          {
            "min": 0,
            "max": 1,
            "step": 0.1,
            "default": 0.5
          }
        ],
        "file": [
          "STRING",
          {
            "default": "notify.mp3"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "mode",
        "volume",
        "file"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "PlaySound|pysssss",
    "display_name": "PlaySound \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "Repeater|pysssss": {
    "input": {
      "required": {
        "source": [
          "*",
          {}
        ],
        "repeats": [
          "INT",
          {
            "min": 0,
            "max": 5000,
            "default": 2
          }
        ],
        "output": [
          [
            "single",
            "multi"
          ],
          {}
        ],
        "node_mode": [
          [
            "reuse",
            "create"
          ],
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "repeats",
        "output",
        "node_mode"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "Repeater|pysssss",
    "display_name": "Repeater \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": false
  },
  "LoadText|pysssss": {
    "input": {
      "required": {
        "root_dir": [
          [
            "input",
            "output",
            "temp"
          ],
          {}
        ],
        "file": [
          [
            "[none]"
          ],
          {
            "pysssss.binding": [
              {
                "source": "root_dir",
                "callback": [
                  {
                    "type": "set",
                    "target": "$this.disabled",
                    "value": true
                  },
                  {
                    "type": "fetch",
                    "url": "/pysssss/text-file/{$source.value}",
                    "then": [
                      {
                        "type": "set",
                        "target": "$this.options.values",
                        "value": "$result"
                      },
                      {
                        "type": "validate-combo"
                      },
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": false
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "root_dir",
        "file"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LoadText|pysssss",
    "display_name": "Load Text \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": false
  },
  "SaveText|pysssss": {
    "input": {
      "required": {
        "root_dir": [
          [
            "input",
            "output",
            "temp"
          ],
          {}
        ],
        "file": [
          "STRING",
          {
            "default": "file.txt"
          }
        ],
        "append": [
          [
            "append",
            "overwrite",
            "new only"
          ],
          {}
        ],
        "insert": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "new line",
            "label_off": "none",
            "pysssss.binding": [
              {
                "source": "append",
                "callback": [
                  {
                    "type": "if",
                    "condition": [
                      {
                        "left": "$source.value",
                        "op": "eq",
                        "right": "\"append\""
                      }
                    ],
                    "true": [
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": false
                      }
                    ],
                    "false": [
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": true
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "text": [
          "STRING",
          {
            "forceInput": true,
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "root_dir",
        "file",
        "append",
        "insert",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "SaveText|pysssss",
    "display_name": "Save Text \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "ConstrainImage|pysssss": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "max_width": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "max_height": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "crop_if_required": [
          [
            "yes",
            "no"
          ],
          {
            "default": "no"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "max_width",
        "max_height",
        "min_width",
        "min_height",
        "crop_if_required"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ConstrainImage|pysssss",
    "display_name": "Constrain Image \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "image",
    "output_node": false
  },
  "StringFunction|pysssss": {
    "input": {
      "required": {
        "action": [
          [
            "append",
            "replace"
          ],
          {}
        ],
        "tidy_tags": [
          [
            "yes",
            "no"
          ],
          {}
        ]
      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "text_b": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "text_c": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "action",
        "tidy_tags"
      ],
      "optional": [
        "text_a",
        "text_b",
        "text_c"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "StringFunction|pysssss",
    "display_name": "String Function \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "ReroutePrimitive|pysssss": {
    "input": {
      "required": {
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ReroutePrimitive|pysssss",
    "display_name": "Reroute Primitive \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "__hidden__",
    "output_node": false
  },
  "ShowText|pysssss": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ShowText|pysssss",
    "display_name": "Show Text \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "SystemNotification|pysssss": {
    "input": {
      "required": {
        "message": [
          "STRING",
          {
            "default": "Your notification has triggered."
          }
        ],
        "any": [
          "*",
          {}
        ],
        "mode": [
          [
            "always",
            "on empty queue"
          ],
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "message",
        "any",
        "mode"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "SystemNotification|pysssss",
    "display_name": "SystemNotification \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "ConstrainImageforVideo|pysssss": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "max_width": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "max_height": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "crop_if_required": [
          [
            "yes",
            "no"
          ],
          {
            "default": "no"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "max_width",
        "max_height",
        "min_width",
        "min_height",
        "crop_if_required"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ConstrainImageforVideo|pysssss",
    "display_name": "Constrain Image for Video \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "image",
    "output_node": false
  },
  "LoraLoader|pysssss": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [
            {
              "content": "1.5/pixel-art-xl-v1.0.safetensors",
              "image": null
            },
            {
              "content": "1.5/pixel-art-xl-v1.1.safetensors",
              "image": null
            },
            {
              "content": "1990sAnalogStyle.safetensors",
              "image": null
            },
            {
              "content": "badquality.safetensors",
              "image": null
            },
            {
              "content": "blurxl.safetensors",
              "image": null
            },
            {
              "content": "dark.safetensors",
              "image": null
            },
            {
              "content": "envyzoomslider.safetensors",
              "image": null
            },
            {
              "content": "hand_5_5.safetensors",
              "image": null
            },
            {
              "content": "Instagram_Selfie_SDXL.safetensors",
              "image": null
            },
            {
              "content": "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
              "image": null
            },
            {
              "content": "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "image": null
            },
            {
              "content": "ip-adapter-faceid_sd15_lora.safetensors",
              "image": null
            },
            {
              "content": "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "image": null
            },
            {
              "content": "lcm.safetensors",
              "image": null
            },
            {
              "content": "lcm_sdxl.safetensors",
              "image": null
            },
            {
              "content": "lcmxl.safetensors",
              "image": null
            },
            {
              "content": "midjourney.safetensors",
              "image": null
            },
            {
              "content": "MJ52_v2.0.safetensors",
              "image": null
            },
            {
              "content": "more_details.safetensors",
              "image": null
            },
            {
              "content": "NSFWFilter.safetensors",
              "image": null
            },
            {
              "content": "outdoor_selife_epoch_10.safetensors",
              "image": null
            },
            {
              "content": "Pinterest_Selfie_V4.safetensors",
              "image": null
            },
            {
              "content": "Pinterest_Selfie_V5_20_epochs.safetensors",
              "image": null
            },
            {
              "content": "Pinterest_Snap_Selfie.safetensors",
              "image": null
            },
            {
              "content": "SD1.5/pixel-art-xl-v1.0.safetensors",
              "image": null
            },
            {
              "content": "SD1.5/pixel-art-xl-v1.1.safetensors",
              "image": null
            },
            {
              "content": "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
              "image": null
            },
            {
              "content": "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
              "image": null
            },
            {
              "content": "selfie_epoch_10.safetensors",
              "image": null
            }
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      },
      "optional": {
        "prompt": [
          "HIDDEN"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prompt"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "name": "LoraLoader|pysssss",
    "display_name": "Lora Loader \ud83d\udc0d",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CheckpointLoader|pysssss": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            {
              "content": "1.5/aziibpixelmix_v10.safetensors",
              "image": null
            },
            {
              "content": "atomixAnimeXL_v10.safetensors",
              "image": null
            },
            {
              "content": "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
              "image": null
            },
            {
              "content": "FLUX1/flux1-dev-fp8.safetensors",
              "image": null
            },
            {
              "content": "juggernautXL_juggXIByRundiffusion.safetensors",
              "image": null
            },
            {
              "content": "meinamix.safetensors",
              "image": null
            },
            {
              "content": "photogasm.safetensors",
              "image": null
            },
            {
              "content": "realismByStableYogi_v40FP16.safetensors",
              "image": null
            },
            {
              "content": "realvisxlV40_v40LightningBakedvae.safetensors",
              "image": null
            },
            {
              "content": "revanimated.safetensors",
              "image": null
            },
            {
              "content": "SD1.5/aziibpixelmix_v10.safetensors",
              "image": null
            },
            {
              "content": "sd_xl_base_1.0.safetensors",
              "image": null
            },
            {
              "content": "sd_xl_refiner_1.0.safetensors",
              "image": null
            },
            {
              "content": "SDXL/dreamshaper_xl_v2.1.safetensors",
              "image": null
            },
            {
              "content": "SDXL/sd_xl_base_1.0.safetensors",
              "image": null
            },
            {
              "content": "SDXL/sd_xl_refiner_1.0.safetensors",
              "image": null
            },
            {
              "content": "theAraminta_cv5.safetensors",
              "image": null
            }
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      },
      "optional": {
        "prompt": [
          "HIDDEN"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ],
      "optional": [
        "prompt"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "name": "CheckpointLoader|pysssss",
    "display_name": "Checkpoint Loader \ud83d\udc0d",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "MathExpression|pysssss": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "pysssss.autocomplete": {
              "words": [
                {
                  "text": "round",
                  "value": "round()",
                  "showValue": false,
                  "hint": "number, dp? = 0",
                  "caretOffset": -1
                },
                {
                  "text": "ceil",
                  "value": "ceil()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "floor",
                  "value": "floor()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "min",
                  "value": "min()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "max",
                  "value": "max()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "randomint",
                  "value": "randomint()",
                  "showValue": false,
                  "hint": "min, max",
                  "caretOffset": -1
                },
                {
                  "text": "randomchoice",
                  "value": "randomchoice()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "sqrt",
                  "value": "sqrt()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "int",
                  "value": "int()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "iif",
                  "value": "iif()",
                  "showValue": false,
                  "hint": "value, truepart, falsepart",
                  "caretOffset": -1
                }
              ],
              "separator": ""
            }
          }
        ]
      },
      "optional": {
        "a": [
          "*"
        ],
        "b": [
          "*"
        ],
        "c": [
          "*"
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "expression"
      ],
      "optional": [
        "a",
        "b",
        "c"
      ],
      "hidden": [
        "extra_pnginfo",
        "prompt"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "MathExpression|pysssss",
    "display_name": "Math Expression \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Custom-Scripts",
    "category": "utils",
    "output_node": true
  },
  "DepthAnything_V2": {
    "input": {
      "required": {
        "da_model": [
          "DAMODEL"
        ],
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "da_model",
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "DepthAnything_V2",
    "display_name": "Depth Anything V2",
    "description": "\nhttps://depth-anything-v2.github.io\n",
    "python_module": "custom_nodes.ComfyUI-DepthAnythingV2",
    "category": "DepthAnythingV2",
    "output_node": false
  },
  "DownloadAndLoadDepthAnythingV2Model": {
    "input": {
      "required": {
        "model": [
          [
            "depth_anything_v2_vits_fp16.safetensors",
            "depth_anything_v2_vits_fp32.safetensors",
            "depth_anything_v2_vitb_fp16.safetensors",
            "depth_anything_v2_vitb_fp32.safetensors",
            "depth_anything_v2_vitl_fp16.safetensors",
            "depth_anything_v2_vitl_fp32.safetensors",
            "depth_anything_v2_metric_hypersim_vitl_fp32.safetensors",
            "depth_anything_v2_metric_vkitti_vitl_fp32.safetensors"
          ],
          {
            "default": "depth_anything_v2_vitl_fp32.safetensors"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "DAMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "da_v2_model"
    ],
    "name": "DownloadAndLoadDepthAnythingV2Model",
    "display_name": "DownloadAndLoadDepthAnythingV2Model",
    "description": "\nModels autodownload to `ComfyUI\\models\\depthanything` from   \nhttps://huggingface.co/Kijai/DepthAnythingV2-safetensors/tree/main   \n   \nfp16 reduces quality by a LOT, not recommended.\n",
    "python_module": "custom_nodes.ComfyUI-DepthAnythingV2",
    "category": "DepthAnythingV2",
    "output_node": false
  },
  "BRIA_RMBG_ModelLoader_Zho": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "RMBGMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "rmbgmodel"
    ],
    "name": "BRIA_RMBG_ModelLoader_Zho",
    "display_name": "\ud83e\uddf9BRIA_RMBG Model Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-BRIA_AI-RMBG",
    "category": "\ud83e\uddf9BRIA RMBG",
    "output_node": false
  },
  "BRIA_RMBG_Zho": {
    "input": {
      "required": {
        "rmbgmodel": [
          "RMBGMODEL"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "rmbgmodel",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "BRIA_RMBG_Zho",
    "display_name": "\ud83e\uddf9BRIA RMBG",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-BRIA_AI-RMBG",
    "category": "\ud83e\uddf9BRIA RMBG",
    "output_node": false
  },
  "Seed Everywhere": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "hidden": {
        "id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Seed Everywhere",
    "display_name": "Seed Everywhere",
    "description": "",
    "python_module": "custom_nodes.cg-use-everywhere",
    "category": "everywhere",
    "output_node": true
  },
  "Anything Everywhere": {
    "input": {
      "required": {},
      "optional": {
        "anything": [
          "*",
          {}
        ]
      },
      "hidden": {
        "id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "anything"
      ],
      "hidden": [
        "id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Anything Everywhere",
    "display_name": "Anything Everywhere",
    "description": "",
    "python_module": "custom_nodes.cg-use-everywhere",
    "category": "everywhere",
    "output_node": true
  },
  "Anything Everywhere3": {
    "input": {
      "required": {},
      "optional": {
        "anything": [
          "*",
          {}
        ],
        "anything2": [
          "*",
          {}
        ],
        "anything3": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "anything",
        "anything2",
        "anything3"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Anything Everywhere3",
    "display_name": "Anything Everywhere3",
    "description": "",
    "python_module": "custom_nodes.cg-use-everywhere",
    "category": "everywhere",
    "output_node": true
  },
  "Anything Everywhere?": {
    "input": {
      "required": {},
      "optional": {
        "anything": [
          "*",
          {}
        ],
        "title_regex": [
          "STRING",
          {
            "default": ".*"
          }
        ],
        "input_regex": [
          "STRING",
          {
            "default": ".*"
          }
        ],
        "group_regex": [
          "STRING",
          {
            "default": ".*"
          }
        ]
      },
      "hidden": {
        "id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "anything",
        "title_regex",
        "input_regex",
        "group_regex"
      ],
      "hidden": [
        "id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Anything Everywhere?",
    "display_name": "Anything Everywhere?",
    "description": "",
    "python_module": "custom_nodes.cg-use-everywhere",
    "category": "everywhere",
    "output_node": true
  },
  "Prompts Everywhere": {
    "input": {
      "required": {},
      "optional": {
        "+ve": [
          "*",
          {}
        ],
        "-ve": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "+ve",
        "-ve"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Prompts Everywhere",
    "display_name": "Prompts Everywhere",
    "description": "",
    "python_module": "custom_nodes.cg-use-everywhere",
    "category": "everywhere",
    "output_node": true
  },
  "Simple String": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Simple String",
    "display_name": "Simple String",
    "description": "",
    "python_module": "custom_nodes.cg-use-everywhere",
    "category": "everywhere",
    "output_node": false
  },
  "HF Downloader": {
    "input": {
      "required": {
        "repo_id": [
          "STRING",
          {
            "multiline": false,
            "default": "runwayml/stable-diffusion-v1-5"
          }
        ],
        "filename": [
          "STRING",
          {
            "multiline": false,
            "default": "v1-5-pruned-emaonly.ckpt"
          }
        ],
        "local_path": [
          [
            "diffusers",
            "configs",
            "style_models",
            "photomaker",
            "controlnet",
            "vae_approx",
            "text_encoders",
            "upscale_models",
            "insightface",
            "onnx",
            "hypernetworks",
            "models",
            "nsfw_detector",
            "facedetection",
            "embeddings",
            "loras",
            "ipadapter",
            "diffusion_models",
            "reactor",
            "ultralytics",
            "clip",
            "instantid",
            "gligen",
            "clip_vision",
            "unet",
            "checkpoints",
            "vae",
            "facerestore_models",
            "sams"
          ]
        ]
      },
      "optional": {
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "local_path_override": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "hidden": {
        "node_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "repo_id",
        "filename",
        "local_path"
      ],
      "optional": [
        "overwrite",
        "local_path_override"
      ],
      "hidden": [
        "node_id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "HF Downloader",
    "display_name": "HF Download",
    "description": "",
    "python_module": "custom_nodes.comfyui-model-downloader",
    "category": "loaders",
    "output_node": true
  },
  "Auto Model Downloader": {
    "input": {
      "required": {
        "select_model": [
          [
            "Scan First"
          ],
          {
            "choices": [
              "Scan First"
            ],
            "default": "Scan First"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "node_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "select_model"
      ],
      "hidden": [
        "prompt",
        "node_id"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "repo_id",
      "filename",
      "local_path"
    ],
    "name": "Auto Model Downloader",
    "display_name": "Auto Model Finder (Experimental)",
    "description": "",
    "python_module": "custom_nodes.comfyui-model-downloader",
    "category": "loaders",
    "output_node": true
  },
  "CivitAI Downloader": {
    "input": {
      "required": {
        "model_id": [
          "STRING",
          {
            "multiline": false,
            "default": "360292"
          }
        ],
        "token_id": [
          "STRING",
          {
            "multiline": false,
            "default": "API_token_here"
          }
        ],
        "save_dir": [
          [
            "diffusers",
            "configs",
            "style_models",
            "photomaker",
            "controlnet",
            "vae_approx",
            "text_encoders",
            "upscale_models",
            "insightface",
            "onnx",
            "hypernetworks",
            "models",
            "nsfw_detector",
            "facedetection",
            "embeddings",
            "loras",
            "ipadapter",
            "diffusion_models",
            "reactor",
            "ultralytics",
            "clip",
            "instantid",
            "gligen",
            "clip_vision",
            "unet",
            "checkpoints",
            "vae",
            "facerestore_models",
            "sams"
          ]
        ]
      },
      "hidden": {
        "node_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model_id",
        "token_id",
        "save_dir"
      ],
      "hidden": [
        "node_id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CivitAI Downloader",
    "display_name": "CivitAI Download",
    "description": "",
    "python_module": "custom_nodes.comfyui-model-downloader",
    "category": "loaders",
    "output_node": true
  },
  "JDCN_AnyFileList": {
    "input": {
      "required": {
        "folder_path": [
          "STRING",
          {
            "multiline": false,
            "default": "undefined"
          }
        ],
        "filter_by": [
          [
            "*",
            "images",
            "audio",
            "video",
            "text",
            "tensors",
            "folder"
          ]
        ],
        "extension": [
          [
            "*",
            ".latent",
            ".ckpt",
            ".pt",
            ".bin",
            ".pth",
            ".safetensors",
            ".jpg",
            ".jpeg",
            ".png",
            ".gif",
            ".bmp",
            ".tiff",
            ".ico",
            ".svg",
            ".webp",
            ".psd",
            ".ai",
            ".eps",
            ".indd",
            ".cdr",
            ".raw",
            ".cr2",
            ".nef",
            ".orf",
            ".sr2",
            ".pef",
            ".x3f",
            ".dng",
            ".raf",
            ".rw2",
            ".arw",
            ".mef",
            ".mrw",
            ".fff",
            ".srf",
            ".kdc",
            ".mos",
            ".rwl",
            ".dcr",
            ".erf",
            ".3fr",
            ".srw",
            ".bay",
            ".nrw",
            ".ptx",
            ".cap",
            ".iiq",
            ".eip",
            ".rwz",
            ".r3d",
            ".qtk",
            ".dcs",
            ".rw1",
            ".rpp",
            ".fff",
            ".rwl",
            ".pef",
            ".xmp",
            ".mp3",
            ".wav",
            ".flac",
            ".aac",
            ".ogg",
            ".wma",
            ".m4a",
            ".ape",
            ".alac",
            ".aiff",
            ".mid",
            ".opus",
            ".amr",
            ".pcm",
            ".mp2",
            ".ac3",
            ".ra",
            ".au",
            ".mka",
            ".snd",
            ".mp4",
            ".avi",
            ".mkv",
            ".mov",
            ".wmv",
            ".flv",
            ".webm",
            ".mpg",
            ".mpeg",
            ".m4v",
            ".3gp",
            ".rmvb",
            ".divx",
            ".vob",
            ".ts",
            ".ogv",
            ".m2ts",
            ".mts",
            ".f4v",
            ".asf",
            ".txt",
            ".doc",
            ".docx",
            ".xls",
            ".xlsx",
            ".ppt",
            ".pptx",
            ".pdf",
            ".rtf",
            ".html",
            ".htm",
            ".xml",
            ".json",
            ".csv",
            ".dat",
            ".ini",
            ".cfg",
            ".inf",
            ".log",
            ".md",
            ".sql",
            ".php",
            ".cpp",
            ".java",
            ".py",
            ".c",
            ".h",
            ".hpp",
            ".js",
            ".css",
            ".asp",
            ".aspx",
            ".jsp",
            ".jspx",
            ".xhtml",
            ".rss",
            ".atom",
            ".pl",
            ".cgi",
            ".nfo",
            ".diz",
            ".reg",
            ".key",
            ".sfv",
            ".cue",
            ".url",
            ".bat",
            ".sh",
            ".ps1",
            ".vbs",
            ".asm",
            ".bak",
            ".tmp",
            ".temp"
          ]
        ],
        "deep_search": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "folder_path",
        "filter_by",
        "extension",
        "deep_search"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "PathList",
      "NameList",
      "Total"
    ],
    "name": "JDCN_AnyFileList",
    "display_name": "JDCN_AnyFileList",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_AnyFileListHelper": {
    "input": {
      "required": {
        "List": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "search": [
          "STRING",
          {}
        ],
        "filter_by": [
          [
            "*",
            "images",
            "audio",
            "video",
            "text",
            "folder"
          ]
        ],
        "extension": [
          [
            "*",
            ".jpg",
            ".jpeg",
            ".png",
            ".gif",
            ".bmp",
            ".tiff",
            ".ico",
            ".svg",
            ".webp",
            ".psd",
            ".ai",
            ".eps",
            ".indd",
            ".cdr",
            ".raw",
            ".cr2",
            ".nef",
            ".orf",
            ".sr2",
            ".pef",
            ".x3f",
            ".dng",
            ".raf",
            ".rw2",
            ".arw",
            ".mef",
            ".mrw",
            ".fff",
            ".srf",
            ".kdc",
            ".mos",
            ".rwl",
            ".dcr",
            ".erf",
            ".3fr",
            ".srw",
            ".bay",
            ".nrw",
            ".ptx",
            ".cap",
            ".iiq",
            ".eip",
            ".rwz",
            ".r3d",
            ".qtk",
            ".dcs",
            ".rw1",
            ".rpp",
            ".fff",
            ".rwl",
            ".pef",
            ".xmp",
            ".mp3",
            ".wav",
            ".flac",
            ".aac",
            ".ogg",
            ".wma",
            ".m4a",
            ".ape",
            ".alac",
            ".aiff",
            ".mid",
            ".opus",
            ".amr",
            ".pcm",
            ".mp2",
            ".ac3",
            ".ra",
            ".au",
            ".mka",
            ".snd",
            ".mp4",
            ".avi",
            ".mkv",
            ".mov",
            ".wmv",
            ".flv",
            ".webm",
            ".mpg",
            ".mpeg",
            ".m4v",
            ".3gp",
            ".rmvb",
            ".divx",
            ".vob",
            ".ts",
            ".ogv",
            ".m2ts",
            ".mts",
            ".f4v",
            ".asf",
            ".txt",
            ".doc",
            ".docx",
            ".xls",
            ".xlsx",
            ".ppt",
            ".pptx",
            ".pdf",
            ".rtf",
            ".html",
            ".htm",
            ".xml",
            ".json",
            ".csv",
            ".dat",
            ".ini",
            ".cfg",
            ".inf",
            ".log",
            ".md",
            ".sql",
            ".php",
            ".cpp",
            ".java",
            ".py",
            ".c",
            ".h",
            ".hpp",
            ".js",
            ".css",
            ".asp",
            ".aspx",
            ".jsp",
            ".jspx",
            ".xhtml",
            ".rss",
            ".atom",
            ".pl",
            ".cgi",
            ".nfo",
            ".diz",
            ".reg",
            ".key",
            ".sfv",
            ".cue",
            ".url",
            ".bat",
            ".sh",
            ".ps1",
            ".vbs",
            ".asm",
            ".bak",
            ".tmp",
            ".temp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "List",
        "search",
        "filter_by",
        "extension"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "out"
    ],
    "name": "JDCN_AnyFileListHelper",
    "display_name": "JDCN_AnyFileListHelper",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_AnyFileSelector": {
    "input": {
      "required": {
        "List": [
          "STRING",
          {}
        ],
        "Index": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "Change": [
          [
            "fixed",
            "increment",
            "decrement"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "List",
        "Index",
        "Change"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "out"
    ],
    "name": "JDCN_AnyFileSelector",
    "display_name": "JDCN_AnyFileSelector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_AnyFileListRandom": {
    "input": {
      "required": {
        "folder_path": [
          "STRING",
          {
            "multiline": false,
            "default": "undefined"
          }
        ],
        "filter_by": [
          [
            "*",
            "images",
            "audio",
            "video",
            "text",
            "tensors",
            "folder"
          ]
        ],
        "extension": [
          [
            "*",
            ".latent",
            ".ckpt",
            ".pt",
            ".bin",
            ".pth",
            ".safetensors",
            ".jpg",
            ".jpeg",
            ".png",
            ".gif",
            ".bmp",
            ".tiff",
            ".ico",
            ".svg",
            ".webp",
            ".psd",
            ".ai",
            ".eps",
            ".indd",
            ".cdr",
            ".raw",
            ".cr2",
            ".nef",
            ".orf",
            ".sr2",
            ".pef",
            ".x3f",
            ".dng",
            ".raf",
            ".rw2",
            ".arw",
            ".mef",
            ".mrw",
            ".fff",
            ".srf",
            ".kdc",
            ".mos",
            ".rwl",
            ".dcr",
            ".erf",
            ".3fr",
            ".srw",
            ".bay",
            ".nrw",
            ".ptx",
            ".cap",
            ".iiq",
            ".eip",
            ".rwz",
            ".r3d",
            ".qtk",
            ".dcs",
            ".rw1",
            ".rpp",
            ".fff",
            ".rwl",
            ".pef",
            ".xmp",
            ".mp3",
            ".wav",
            ".flac",
            ".aac",
            ".ogg",
            ".wma",
            ".m4a",
            ".ape",
            ".alac",
            ".aiff",
            ".mid",
            ".opus",
            ".amr",
            ".pcm",
            ".mp2",
            ".ac3",
            ".ra",
            ".au",
            ".mka",
            ".snd",
            ".mp4",
            ".avi",
            ".mkv",
            ".mov",
            ".wmv",
            ".flv",
            ".webm",
            ".mpg",
            ".mpeg",
            ".m4v",
            ".3gp",
            ".rmvb",
            ".divx",
            ".vob",
            ".ts",
            ".ogv",
            ".m2ts",
            ".mts",
            ".f4v",
            ".asf",
            ".txt",
            ".doc",
            ".docx",
            ".xls",
            ".xlsx",
            ".ppt",
            ".pptx",
            ".pdf",
            ".rtf",
            ".html",
            ".htm",
            ".xml",
            ".json",
            ".csv",
            ".dat",
            ".ini",
            ".cfg",
            ".inf",
            ".log",
            ".md",
            ".sql",
            ".php",
            ".cpp",
            ".java",
            ".py",
            ".c",
            ".h",
            ".hpp",
            ".js",
            ".css",
            ".asp",
            ".aspx",
            ".jsp",
            ".jspx",
            ".xhtml",
            ".rss",
            ".atom",
            ".pl",
            ".cgi",
            ".nfo",
            ".diz",
            ".reg",
            ".key",
            ".sfv",
            ".cue",
            ".url",
            ".bat",
            ".sh",
            ".ps1",
            ".vbs",
            ".asm",
            ".bak",
            ".tmp",
            ".temp"
          ]
        ],
        "random_seed": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 18446744073709551615
          }
        ],
        "seed_change": [
          [
            "fixed",
            "increment",
            "decrement",
            "random"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "deep_search": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "folder_path",
        "filter_by",
        "extension",
        "random_seed",
        "seed_change",
        "batch_size",
        "deep_search"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "PathList",
      "PathNames",
      "Total"
    ],
    "name": "JDCN_AnyFileListRandom",
    "display_name": "JDCN_AnyFileListRandom",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_AnyCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_path": [
          "STRING",
          {
            "default": "undefined"
          }
        ],
        "config_path": [
          "STRING",
          {
            "default": "Optional"
          }
        ],
        "embedding_folder": [
          "STRING",
          {
            "default": "Optional"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_path",
        "config_path",
        "embedding_folder"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "JDCN_AnyCheckpointLoader",
    "display_name": "JDCN_AnyCheckpointLoader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": false
  },
  "JDCN_BatchImageLoadFromList": {
    "input": {
      "required": {
        "PathList": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "Index": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "BatchSize": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 9999
          }
        ],
        "BatchDirection": [
          [
            "TOPTOBOTTOM",
            "BOTTOMTOTOP",
            "RANDOM"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "PathList",
        "Index",
        "BatchSize",
        "BatchDirection"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      true,
      true,
      true,
      false
    ],
    "output_name": [
      "Images",
      "ImageNames",
      "ImagePaths",
      "Index"
    ],
    "name": "JDCN_BatchImageLoadFromList",
    "display_name": "JDCN_BatchImageLoadFromList",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_BatchLatentLoadFromList": {
    "input": {
      "required": {
        "PathList": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "Index": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "BatchSize": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 9999
          }
        ],
        "BatchDirection": [
          [
            "TOPTOBOTTOM",
            "BOTTOMTOTOP",
            "RANDOM"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "PathList",
        "Index",
        "BatchSize",
        "BatchDirection"
      ]
    },
    "output": [
      "LATENT",
      "STRING",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      true,
      true,
      true,
      false
    ],
    "output_name": [
      "Latents",
      "LatentNames",
      "LatentPaths",
      "Index"
    ],
    "name": "JDCN_BatchLatentLoadFromList",
    "display_name": "JDCN_BatchLatentLoadFromList",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_BatchLatentLoadFromDir": {
    "input": {
      "required": {
        "Directory": [
          "STRING",
          {
            "default": "directory path"
          }
        ],
        "Load_Cap": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "Skip_Frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Directory",
        "Load_Cap",
        "Skip_Frame"
      ]
    },
    "output": [
      "LATENT",
      "STRING",
      "STRING",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      true,
      true,
      true,
      false,
      false,
      false
    ],
    "output_name": [
      "Latent",
      "Latent_Names",
      "Latent_Paths",
      "Load_Cap",
      "Skip_Frame",
      "Count"
    ],
    "name": "JDCN_BatchLatentLoadFromDir",
    "display_name": "JDCN_BatchLatentLoadFromDir",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_BatchImageLoadFromDir": {
    "input": {
      "required": {
        "Directory": [
          "STRING",
          {
            "default": "directory path"
          }
        ],
        "Load_Cap": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "Skip_Frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Directory",
        "Load_Cap",
        "Skip_Frame"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      true,
      true,
      true,
      false,
      false,
      false
    ],
    "output_name": [
      "Images",
      "Image_Names",
      "Image_Paths",
      "Load_Cap",
      "Skip_Frame",
      "Count"
    ],
    "name": "JDCN_BatchImageLoadFromDir",
    "display_name": "JDCN_BatchImageLoadFromDir",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_BatchSaveLatent": {
    "input": {
      "required": {
        "Latents": [
          "LATENT"
        ],
        "Directory": [
          "STRING",
          {}
        ],
        "FilenamePrefix": [
          "STRING",
          {
            "default": "Latent"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Latents",
        "Directory",
        "FilenamePrefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JDCN_BatchSaveLatent",
    "display_name": "JDCN_BatchSaveLatent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_FileMover": {
    "input": {
      "required": {
        "FilePaths": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "OutputDirectory": [
          "STRING",
          {
            "default": "directory path"
          }
        ],
        "OverwriteFile": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "FilePaths",
        "OutputDirectory",
        "OverwriteFile"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "NewFilePaths"
    ],
    "name": "JDCN_FileMover",
    "display_name": "JDCN_FileMover",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_ImageSaver": {
    "input": {
      "required": {
        "Images": [
          "IMAGE"
        ],
        "Directory": [
          "STRING",
          {}
        ],
        "FilenamePrefix": [
          "STRING",
          {
            "default": "Image"
          }
        ],
        "OpenOutputDirectory": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "Images",
        "Directory",
        "FilenamePrefix",
        "OpenOutputDirectory"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JDCN_ImageSaver",
    "display_name": "JDCN_ImageSaver",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_ListToString": {
    "input": {
      "required": {
        "list": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "JDCN_ListToString",
    "display_name": "JDCN_ListToString",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_ReBatch": {
    "input": {
      "required": {
        "FileNames": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "BatchSize": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "TextList": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "FileNames",
        "BatchSize",
        "TextList"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "FilePaths"
    ],
    "name": "JDCN_ReBatch",
    "display_name": "JDCN_ReBatch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_SplitString": {
    "input": {
      "required": {
        "MainString": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "SearchFor": [
          "STRING",
          {}
        ],
        "StartFrom": [
          [
            "front",
            "rear"
          ]
        ],
        "Occurence": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "IncludeSearchFor": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "MainString",
        "SearchFor",
        "StartFrom",
        "Occurence",
        "IncludeSearchFor"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "Prefix",
      "Suffix",
      "FoundAt"
    ],
    "name": "JDCN_SplitString",
    "display_name": "JDCN_SplitString",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": false
  },
  "JDCN_StringToList": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "list"
    ],
    "name": "JDCN_StringToList",
    "display_name": "JDCN_StringToList",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_SeamlessExperience": {
    "input": {
      "required": {
        "inputDirectory": [
          "STRING",
          {
            "default": "directory path"
          }
        ],
        "BatchSize": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "OverlapSize": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputDirectory",
        "BatchSize",
        "OverlapSize"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "NewImagePaths",
      "Log"
    ],
    "name": "JDCN_SeamlessExperience",
    "display_name": "JDCN_SeamlessExperience",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_VHSFileMover": {
    "input": {
      "required": {
        "FileNames": [
          "VHS_FILENAMES",
          {}
        ],
        "OutputDirectory": [
          "STRING",
          {
            "default": "directory path"
          }
        ],
        "OverwriteFile": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "FileNames",
        "OutputDirectory",
        "OverwriteFile"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "FilePaths"
    ],
    "name": "JDCN_VHSFileMover",
    "display_name": "JDCN_VHSFileMover",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_TXTFileSaver": {
    "input": {
      "required": {
        "content": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "file_name": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "directory": [
          "STRING",
          {
            "default": "directory path"
          }
        ],
        "mode": [
          [
            "Merge",
            "Overwrite",
            "SaveNew",
            "MergeAndSaveNew"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "content",
        "file_name",
        "directory",
        "mode"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JDCN_TXTFileSaver",
    "display_name": "JDCN_TXTFileSaver",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_BatchCounter": {
    "input": {
      "required": {
        "Lap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "Range": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "LapChange": [
          [
            "fixed",
            "increment",
            "decrement"
          ]
        ],
        "Log": [
          "STRING",
          {
            "default": "Log",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Lap",
        "Range",
        "LapChange",
        "Log"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "result",
      "lap",
      "range"
    ],
    "name": "JDCN_BatchCounter",
    "display_name": "JDCN_BatchCounter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": true
  },
  "JDCN_BatchCounterAdvance": {
    "input": {
      "required": {
        "Lap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "LapChange": [
          [
            "fixed",
            "increment",
            "decrement"
          ]
        ],
        "Range": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "Overlap": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9999
          }
        ],
        "Frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Lap",
        "LapChange",
        "Range",
        "Overlap",
        "Frames"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "Lap",
      "Range",
      "FinalRange",
      "Overlap",
      "TotalLapsNeeded",
      "Frames",
      "SkipFrame",
      "WithoutSkipFrame"
    ],
    "name": "JDCN_BatchCounterAdvance",
    "display_name": "JDCN_BatchCounterAdvance",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": false
  },
  "JDCN_StringManipulator": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "concept"
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "index_change": [
          [
            "fixed",
            "increment",
            "decrement",
            "random"
          ]
        ],
        "order": [
          [
            "toptobottom",
            "bottomtotop",
            "random"
          ]
        ],
        "separator": [
          [
            "Comma",
            "Semicolon",
            "Pipe",
            "Hyphen",
            "Colon",
            "Period",
            "Question Mark",
            "Exclamation Mark",
            "Space",
            "Tab",
            "Newline",
            "Carriage Return",
            "Form Feed",
            "Vertical Tab",
            "Custom"
          ]
        ],
        "custom_separator": [
          "STRING",
          {
            "default": "NA"
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1
          }
        ],
        "joiner": [
          [
            "Comma",
            "Semicolon",
            "Pipe",
            "Hyphen",
            "Colon",
            "Period",
            "Question Mark",
            "Exclamation Mark",
            "Space",
            "Tab",
            "Newline",
            "Carriage Return",
            "Form Feed",
            "Vertical Tab",
            "Custom"
          ]
        ],
        "custom_joiner": [
          "STRING",
          {
            "default": "NA"
          }
        ],
        "space_before_join": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "index",
        "index_change",
        "order",
        "separator",
        "custom_separator",
        "batch_size",
        "joiner",
        "custom_joiner",
        "space_before_join"
      ]
    },
    "output": [
      "STRING",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "text",
      "index_from",
      "index_to",
      "batch_size"
    ],
    "name": "JDCN_StringManipulator",
    "display_name": "JDCN_StringManipulator",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": false
  },
  "JDCN_SwapInputs": {
    "input": {
      "required": {
        "inputA": [
          "*"
        ],
        "inputB": [
          "*"
        ],
        "SwapIT": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputA",
        "inputB",
        "SwapIT"
      ]
    },
    "output": [
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "outputA",
      "outputB"
    ],
    "name": "JDCN_SwapInputs",
    "display_name": "JDCN_SwapInputs",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": false
  },
  "JDCN_BoolInt": {
    "input": {
      "required": {
        "Boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Boolean"
      ]
    },
    "output": [
      "BOOLEAN",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "boolean",
      "int"
    ],
    "name": "JDCN_BoolInt",
    "display_name": "JDCN_BoolInt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": false
  },
  "JDCN_EnableDisable": {
    "input": {
      "required": {
        "Enable": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Enable"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "JDCN_EnableDisable",
    "display_name": "JDCN_EnableDisable",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": false
  },
  "JDCN_LoadImage": {
    "input": {
      "required": {
        "image": [
          [
            "ComfyUI_00168_.png",
            "ComfyUI_00180_.png",
            "ComfyUI_temp_ktysl_00001_-(1).png",
            "ComfyUI_temp_ktysl_00001_.png",
            "example.png",
            "test.png"
          ],
          {
            "image_upload": true
          }
        ],
        "save_in_export": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "save_in_export"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "image_mask"
    ],
    "name": "JDCN_LoadImage",
    "display_name": "JDCN_LoadImage",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "\ud83d\udd35 JDCN \ud83d\udd35",
    "output_node": false
  },
  "LogicUtil_SleepNodeAny": {
    "input": {
      "required": {
        "interval": [
          "FLOAT",
          {
            "default": 0.0
          }
        ]
      },
      "optional": {
        "inputs": [
          "*",
          {
            "default": 0.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "interval"
      ],
      "optional": [
        "inputs"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_SleepNodeAny",
    "display_name": "LogicUtil_SleepNode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_SleepNodeImage": {
    "input": {
      "required": {
        "interval": [
          "FLOAT",
          {
            "default": 0.0
          }
        ],
        "image": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "interval",
        "image"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_SleepNodeImage",
    "display_name": "LogicUtil_Sleep (Image tunnel)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ErrorNode": {
    "input": {
      "required": {
        "error_msg": [
          "STRING",
          {
            "default": "Error"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "error_msg"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_ErrorNode",
    "display_name": "LogicUtil_ErrorNode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_DebugComboInputNode": {
    "input": {
      "required": {
        "input1": [
          [
            "0",
            "1",
            "2"
          ],
          {
            "default": "0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_DebugComboInputNode",
    "display_name": "LogicUtil_Debug Combo Input",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_TextPreviewNode": {
    "input": {
      "required": {
        "text": [
          "*",
          {
            "default": "text",
            "type": "output"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LogicUtil_TextPreviewNode",
    "display_name": "LogicUtil_Text Preview",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": true
  },
  "LogicUtil_ParseExifNode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_ParseExifNode",
    "display_name": "LogicUtil_Parse Exif",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_SaveImageCustomNode": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "subfolder_dir": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "subfolder_dir"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_SaveImageCustomNode",
    "display_name": "LogicUtil_Save Image Custom Node",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": true
  },
  "LogicUtil_SaveTextCustomNode": {
    "input": {
      "required": {
        "text": [
          "*"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "subfolder_dir": [
          "STRING",
          {
            "default": ""
          }
        ],
        "filename": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "filename_prefix",
        "subfolder_dir",
        "filename"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_SaveTextCustomNode",
    "display_name": "LogicUtil_Save Text Custom Node",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateCompare": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0
          }
        ],
        "input2": [
          "*",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOL"
    ],
    "name": "LogicUtil_LogicGateCompare",
    "display_name": "LogicUtil_ABiggerThanB",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateInvertBasic": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_LogicGateInvertBasic",
    "display_name": "LogicUtil_Invert Basic",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateNegateValue": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_LogicGateNegateValue",
    "display_name": "LogicUtil_Negate Value",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateBitwiseShift": {
    "input": {
      "required": {
        "input1": [
          "INT",
          {
            "default": 0
          }
        ],
        "input2": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_LogicGateBitwiseShift",
    "display_name": "LogicUtil_Bitwise Shift",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateBitwiseAnd": {
    "input": {
      "required": {
        "input1": [
          "INT",
          {
            "default": 0
          }
        ],
        "input2": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_LogicGateBitwiseAnd",
    "display_name": "LogicUtil_Bitwise And",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateBitwiseOr": {
    "input": {
      "required": {
        "input1": [
          "INT",
          {
            "default": 0
          }
        ],
        "input2": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_LogicGateBitwiseOr",
    "display_name": "LogicUtil_Bitwise Or",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateBitwiseXor": {
    "input": {
      "required": {
        "input1": [
          "INT",
          {
            "default": 0
          }
        ],
        "input2": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_LogicGateBitwiseXor",
    "display_name": "LogicUtil_Bitwise Xor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateBitwiseNot": {
    "input": {
      "required": {
        "input1": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_LogicGateBitwiseNot",
    "display_name": "LogicUtil_Bitwise Not",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateCompareString": {
    "input": {
      "required": {
        "regex": [
          "STRING",
          {
            "default": ""
          }
        ],
        "input2": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "regex",
        "input2"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOL"
    ],
    "name": "LogicUtil_LogicGateCompareString",
    "display_name": "LogicUtil_AContainsB(String)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_StaticNumberInt": {
    "input": {
      "required": {
        "number": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_StaticNumberInt",
    "display_name": "LogicUtil_Static Number Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_StaticNumberFloat": {
    "input": {
      "required": {
        "number": [
          "FLOAT",
          {
            "default": 0.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "LogicUtil_StaticNumberFloat",
    "display_name": "LogicUtil_Static Number Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_StaticString": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_StaticString",
    "display_name": "LogicUtil_Static String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateAnd": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0.0
          }
        ],
        "input2": [
          "*",
          {
            "default": 0.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOL"
    ],
    "name": "LogicUtil_LogicGateAnd",
    "display_name": "LogicUtil_AAndBGate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateOr": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0
          }
        ],
        "input2": [
          "*",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOL"
    ],
    "name": "LogicUtil_LogicGateOr",
    "display_name": "LogicUtil_AOrBGate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogicGateEither": {
    "input": {
      "required": {
        "condition": [
          "*",
          {
            "default": 0
          }
        ],
        "input1": [
          "*",
          {
            "default": ""
          }
        ],
        "input2": [
          "*",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "condition",
        "input1",
        "input2"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_LogicGateEither",
    "display_name": "LogicUtil_ReturnAorBValue",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_AddNode": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0
          }
        ],
        "input2": [
          "*",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_AddNode",
    "display_name": "LogicUtil_Add Values",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_MergeString": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": ""
          }
        ],
        "input2": [
          "*",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_MergeString",
    "display_name": "LogicUtil_Merge String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ReplaceString": {
    "input": {
      "required": {
        "String": [
          "STRING",
          {
            "default": ""
          }
        ],
        "Regex": [
          "STRING",
          {
            "default": ""
          }
        ],
        "ReplaceWith": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "String",
        "Regex",
        "ReplaceWith"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_ReplaceString",
    "display_name": "LogicUtil_Replace String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_MemoryNode": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": ""
          }
        ],
        "flag": [
          "*",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "flag"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_MemoryNode",
    "display_name": "LogicUtil_Memory String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_UniformRandomFloat": {
    "input": {
      "required": {
        "min_val": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -999999999,
            "max": 999999999.0,
            "step": 0.02,
            "display": "number"
          }
        ],
        "max_val": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -999999999,
            "max": 999999999.0,
            "step": 0.02,
            "display": "number"
          }
        ],
        "decimal_places": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10,
            "step": 1,
            "display": "number"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "min_val",
        "max_val",
        "decimal_places",
        "seed"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "LogicUtil_UniformRandomFloat",
    "display_name": "LogicUtil_Uniform Random Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_UniformRandomInt": {
    "input": {
      "required": {
        "min_val": [
          "INT",
          {
            "default": 0,
            "min": -999999999,
            "max": 999999999,
            "step": 1,
            "display": "number"
          }
        ],
        "max_val": [
          "INT",
          {
            "default": 1,
            "min": -999999999,
            "max": 999999999,
            "step": 1,
            "display": "number"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "min_val",
        "max_val",
        "seed"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_UniformRandomInt",
    "display_name": "LogicUtil_Uniform Random Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_UniformRandomChoice": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "default": "a$b$c",
            "display": "text"
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$",
            "display": "text"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_UniformRandomChoice",
    "display_name": "LogicUtil_Uniform Random Choice",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ManualChoiceString": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "default": "a$b$c",
            "display": "text"
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$",
            "display": "text"
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "separator",
        "index"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_ManualChoiceString",
    "display_name": "LogicUtil_Manual Choice String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ManualChoiceInt": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "default": "1$2$3",
            "display": "text"
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$",
            "display": "text"
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "separator",
        "index"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_ManualChoiceInt",
    "display_name": "LogicUtil_Manual Choice Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ManualChoiceFloat": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "default": "1.0$2.0$3.0",
            "display": "text"
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$",
            "display": "text"
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "separator",
        "index"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "LogicUtil_ManualChoiceFloat",
    "display_name": "LogicUtil_Manual Choice Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_RandomShuffleInt": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "default": "1$2$3",
            "display": "text"
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$",
            "display": "text"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_RandomShuffleInt",
    "display_name": "LogicUtil_Random Shuffle Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_RandomShuffleFloat": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "default": "1.0$2.0$3.0",
            "display": "text"
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$",
            "display": "text"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_RandomShuffleFloat",
    "display_name": "LogicUtil_Random Shuffle Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_RandomShuffleString": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "default": "a$b$c",
            "display": "text"
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$",
            "display": "text"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_RandomShuffleString",
    "display_name": "LogicUtil_Random Shuffle String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_YieldableIteratorString": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "default": "a$b$c",
            "display": "text"
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$",
            "display": "text"
          }
        ],
        "reset": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "separator",
        "reset"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_YieldableIteratorString",
    "display_name": "LogicUtil_Yieldable Iterator String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_YieldableIteratorInt": {
    "input": {
      "required": {
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ],
        "end": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ],
        "step": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9999999999,
            "step": 1,
            "display": "number"
          }
        ],
        "reset": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 1,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start",
        "end",
        "step",
        "reset"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_YieldableIteratorInt",
    "display_name": "LogicUtil_Yieldable (Sequential) Iterator Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_StringListToCombo": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": ""
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$"
          }
        ]
      },
      "optional": {
        "index": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "separator"
      ],
      "optional": [
        "index"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_StringListToCombo",
    "display_name": "LogicUtil_String List to Combo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ConvertComboToString": {
    "input": {
      "required": {
        "combo": [
          "*",
          {
            "default": []
          }
        ],
        "separator": [
          "STRING",
          {
            "default": "$"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "combo",
        "separator"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_ConvertComboToString",
    "display_name": "LogicUtil_Convert Combo to String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ConvertAny2Int": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_ConvertAny2Int",
    "display_name": "LogicUtil_Convert to Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ConvertAny2Float": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "LogicUtil_ConvertAny2Float",
    "display_name": "LogicUtil_Convert to Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ConvertAny2Bool": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "BOOL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOL"
    ],
    "name": "LogicUtil_ConvertAny2Bool",
    "display_name": "LogicUtil_Convert to Bool",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_ConvertAny2String": {
    "input": {
      "required": {
        "input1": [
          "*",
          {
            "default": 0.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LogicUtil_ConvertAny2String",
    "display_name": "LogicUtil_Convert to String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_MinNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ],
        "input2": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_MinNode",
    "display_name": "LogicUtil_Min",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_MaxNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ],
        "input2": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_MaxNode",
    "display_name": "LogicUtil_Max",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_RoundNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_RoundNode",
    "display_name": "LogicUtil_Round",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_AbsNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_AbsNode",
    "display_name": "LogicUtil_Abs",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_FloorNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_FloorNode",
    "display_name": "LogicUtil_Floor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_CeilNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "LogicUtil_CeilNode",
    "display_name": "LogicUtil_Ceil",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_PowerNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ],
        "power": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "power"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_PowerNode",
    "display_name": "LogicUtil_Power",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_LogNode": {
    "input": {
      "required": {
        "input1": [
          "FLOAT"
        ],
        "base": [
          "FLOAT"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "base"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "LogicUtil_LogNode",
    "display_name": "LogicUtil_Log",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_MultiplyNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ],
        "input2": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "LogicUtil_MultiplyNode",
    "display_name": "LogicUtil_Multiply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "LogicUtil_DivideNode": {
    "input": {
      "required": {
        "input1": [
          "*"
        ],
        "input2": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input1",
        "input2"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "LogicUtil_DivideNode",
    "display_name": "LogicUtil_Divide",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-JDCN",
    "category": "LogicUtil",
    "output_node": false
  },
  "CR Image Output": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "output_type": [
          [
            "Preview",
            "Save",
            "UI (no batch)"
          ]
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "CR"
          }
        ],
        "prefix_presets": [
          [
            "None",
            "yyyyMMdd"
          ]
        ],
        "file_format": [
          [
            "png",
            "jpg",
            "webp",
            "tif"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      },
      "optional": {
        "trigger": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "output_type",
        "filename_prefix",
        "prefix_presets",
        "file_format"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ],
      "optional": [
        "trigger"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "trigger"
    ],
    "name": "CR Image Output",
    "display_name": "\ud83d\udcbe CR Image Output",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
    "output_node": true
  },
  "CR Latent Batch Size": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "CR Latent Batch Size",
    "display_name": "\u2699\ufe0f CR Latent Batch Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
    "output_node": false
  },
  "CR Conditioning Mixer": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ],
        "mix_method": [
          [
            "Combine",
            "Average",
            "Concatenate"
          ]
        ],
        "average_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2",
        "mix_method",
        "average_strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "show_help"
    ],
    "name": "CR Conditioning Mixer",
    "display_name": "\u2699\ufe0f CR Conditioning Mixer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
    "output_node": false
  },
  "CR Select Model": {
    "input": {
      "required": {
        "ckpt_name1": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "ckpt_name2": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "ckpt_name3": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "ckpt_name4": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "ckpt_name5": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "select_model": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 5
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name1",
        "ckpt_name2",
        "ckpt_name3",
        "ckpt_name4",
        "ckpt_name5",
        "select_model"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "ckpt_name",
      "show_help"
    ],
    "name": "CR Select Model",
    "display_name": "\ud83d\udd2e CR Select Model",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
    "output_node": false
  },
  "CR Seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "seed",
      "show_help"
    ],
    "name": "CR Seed",
    "display_name": "\ud83c\udf31 CR Seed",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
    "output_node": true
  },
  "CR Prompt Text": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": "prompt",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "prompt",
      "show_help"
    ],
    "name": "CR Prompt Text",
    "display_name": "\u2699\ufe0f CR Prompt Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
    "output_node": false
  },
  "CR Combine Prompt": {
    "input": {
      "required": {},
      "optional": {
        "part1": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "part2": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "part3": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "part4": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "part1",
        "part2",
        "part3",
        "part4",
        "separator"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "prompt",
      "show_help"
    ],
    "name": "CR Combine Prompt",
    "display_name": "\u2699\ufe0f CR Combine Prompt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
    "output_node": false
  },
  "CR VAE Decode": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "circular": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "tiled",
        "circular"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR VAE Decode",
    "display_name": "\u2699\ufe0f CR VAE Decode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
    "output_node": false
  },
  "CR Text List": {
    "input": {
      "required": {
        "multiline_text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_rows": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "multiline_text",
        "start_index",
        "max_rows"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text List",
    "display_name": "\ud83d\udcdc CR Text List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Prompt List": {
    "input": {
      "required": {
        "prepend_text": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "multiline_text": [
          "STRING",
          {
            "multiline": true,
            "default": "body_text"
          }
        ],
        "append_text": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_rows": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prepend_text",
        "multiline_text",
        "append_text",
        "start_index",
        "max_rows"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "prompt",
      "body_text",
      "show_help"
    ],
    "name": "CR Prompt List",
    "display_name": "\ud83d\udcdc CR Prompt List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Simple List": {
    "input": {
      "required": {
        "list_values": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "list_values"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "LIST",
      "show_help"
    ],
    "name": "CR Simple List",
    "display_name": "\ud83d\udcdc CR Simple List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Float Range List": {
    "input": {
      "required": {
        "start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -99999.99,
            "max": 99999.99,
            "step": 0.01
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -99999.99,
            "max": 99999.99,
            "step": 0.01
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -99999.99,
            "max": 99999.99,
            "step": 0.01
          }
        ],
        "operation": [
          [
            "none",
            "sin",
            "cos",
            "tan"
          ]
        ],
        "decimal_places": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10
          }
        ],
        "ignore_first_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "max_values_per_loop": [
          "INT",
          {
            "default": 128,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999
          }
        ],
        "ping_pong": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start",
        "end",
        "step",
        "operation",
        "decimal_places",
        "ignore_first_value",
        "max_values_per_loop",
        "loops",
        "ping_pong"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "FLOAT",
      "show_help"
    ],
    "name": "CR Float Range List",
    "display_name": "\ud83d\udcdc CR Float Range List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Integer Range List": {
    "input": {
      "required": {
        "start": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "max": 99999
          }
        ],
        "end": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "max": 99999
          }
        ],
        "step": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999
          }
        ],
        "ping_pong": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start",
        "end",
        "step",
        "loops",
        "ping_pong"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Integer Range List",
    "display_name": "\ud83d\udcdc CR Integer Range List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Load Text List": {
    "input": {
      "required": {
        "input_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input_file_path",
        "file_name",
        "file_extension"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Load Text List",
    "display_name": "\ud83d\udcdc CR Load Text List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Binary To Bit List": {
    "input": {
      "required": {
        "bit_string": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bit_string"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Binary To Bit List",
    "display_name": "\ud83d\udcdc CR Binary To Bit List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Text Cycler": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "repeats",
        "loops"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_text"
    ],
    "name": "CR Text Cycler",
    "display_name": "\ud83d\udcdc CR Text Cycler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Value Cycler": {
    "input": {
      "required": {
        "values": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "values",
        "repeats",
        "loops"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT",
      "show_text"
    ],
    "name": "CR Value Cycler",
    "display_name": "\ud83d\udcdc CR Value Cycler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
    "output_node": false
  },
  "CR Load Image List": {
    "input": {
      "required": {
        "input_folder": [
          [
            "3d"
          ]
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ]
      },
      "optional": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_folder",
        "start_index",
        "max_images"
      ],
      "optional": [
        "input_path"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Load Image List",
    "display_name": "\u2328\ufe0f CR Load Image List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\u2328\ufe0f IO",
    "output_node": false
  },
  "CR Load Image List Plus": {
    "input": {
      "required": {
        "input_folder": [
          [
            "3d"
          ]
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999
          }
        ],
        "max_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      },
      "optional": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_folder",
        "start_index",
        "max_images"
      ],
      "optional": [
        "input_path"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "STRING",
      "INT",
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      true,
      true,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "index",
      "filename",
      "width",
      "height",
      "list_length",
      "show_help"
    ],
    "name": "CR Load Image List Plus",
    "display_name": "\u2328\ufe0f CR Load Image List Plus",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\u2328\ufe0f IO",
    "output_node": false
  },
  "CR Load GIF As List": {
    "input": {
      "required": {
        "input_folder": [
          [
            "3d"
          ]
        ],
        "gif_filename": [
          "STRING",
          {
            "multiline": false,
            "default": "text"
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999
          }
        ],
        "max_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      },
      "optional": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_folder",
        "gif_filename",
        "start_frame",
        "max_frames"
      ],
      "optional": [
        "input_path"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "show_help"
    ],
    "name": "CR Load GIF As List",
    "display_name": "\u2328\ufe0f CR Load GIF As List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\u2328\ufe0f IO",
    "output_node": false
  },
  "CR Font File List": {
    "input": {
      "required": {
        "source_folder": [
          [
            "system",
            "Comfyroll",
            "from folder"
          ]
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_rows": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 9999
          }
        ]
      },
      "optional": {
        "folder_path": [
          "STRING",
          {
            "default": "C:\\Windows\\Fonts",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source_folder",
        "start_index",
        "max_rows"
      ],
      "optional": [
        "folder_path"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "LIST",
      "show_help"
    ],
    "name": "CR Font File List",
    "display_name": "\u2328\ufe0f CR Font File List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\u2328\ufe0f IO",
    "output_node": false
  },
  "CR Batch Images From List": {
    "input": {
      "required": {
        "image_list": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_list"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image_batch",
      "show_help"
    ],
    "name": "CR Batch Images From List",
    "display_name": "\ud83d\udee0\ufe0f CR Batch Images From List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
    "output_node": false
  },
  "CR Intertwine Lists": {
    "input": {
      "required": {
        "list1": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ],
        "list2": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "list1",
        "list2"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Intertwine Lists",
    "display_name": "\ud83d\udee0\ufe0f CR Intertwine Lists",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
    "output_node": false
  },
  "CR Repeater": {
    "input": {
      "required": {
        "input_data": [
          "*"
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_data",
        "repeats"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "list",
      "show_help"
    ],
    "name": "CR Repeater",
    "display_name": "\ud83d\udee0\ufe0f CR Repeater",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
    "output_node": false
  },
  "CR XY Product": {
    "input": {
      "required": {
        "text_x": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "text_y": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_x",
        "text_y"
      ]
    },
    "output": [
      "*",
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "x_values",
      "y_values",
      "show_help"
    ],
    "name": "CR XY Product",
    "display_name": "\ud83d\udee0\ufe0f CR XY Product",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
    "output_node": false
  },
  "CR Text List To String": {
    "input": {
      "required": {
        "text_list": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_list"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text List To String",
    "display_name": "\ud83d\udee0\ufe0f CR Text List To String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
    "output_node": false
  },
  "CR SD1.5 Aspect Ratio": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "1:1 square 512x512",
            "1:1 square 1024x1024",
            "2:3 portrait 512x768",
            "3:4 portrait 512x682",
            "3:2 landscape 768x512",
            "4:3 landscape 682x512",
            "16:9 cinema 910x512",
            "1.85:1 cinema 952x512",
            "2:1 cinema 1024x512",
            "2.39:1 anamorphic 1224x512"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR SD1.5 Aspect Ratio",
    "display_name": "\ud83d\udd33 CR SD1.5 Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
    "output_node": false
  },
  "CR SDXL Aspect Ratio": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "1:1 square 1024x1024",
            "3:4 portrait 896x1152",
            "5:8 portrait 832x1216",
            "9:16 portrait 768x1344",
            "9:21 portrait 640x1536",
            "4:3 landscape 1152x896",
            "3:2 landscape 1216x832",
            "16:9 landscape 1344x768",
            "21:9 landscape 1536x640"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR SDXL Aspect Ratio",
    "display_name": "\ud83d\udd33 CR SDXL Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
    "output_node": false
  },
  "CR Aspect Ratio": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "SD1.5 - 1:1 square 512x512",
            "SD1.5 - 2:3 portrait 512x768",
            "SD1.5 - 3:4 portrait 512x682",
            "SD1.5 - 3:2 landscape 768x512",
            "SD1.5 - 4:3 landscape 682x512",
            "SD1.5 - 16:9 cinema 910x512",
            "SD1.5 - 1.85:1 cinema 952x512",
            "SD1.5 - 2:1 cinema 1024x512",
            "SDXL - 1:1 square 1024x1024",
            "SDXL - 3:4 portrait 896x1152",
            "SDXL - 5:8 portrait 832x1216",
            "SDXL - 9:16 portrait 768x1344",
            "SDXL - 9:21 portrait 640x1536",
            "SDXL - 4:3 landscape 1152x896",
            "SDXL - 3:2 landscape 1216x832",
            "SDXL - 16:9 landscape 1344x768",
            "SDXL - 21:9 landscape 1536x640"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "prescale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR Aspect Ratio",
    "display_name": "\ud83d\udd33 CR Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
    "output_node": false
  },
  "CR Aspect Ratio Banners": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "Large Rectangle - 336x280",
            "Medium Rectangle - 300x250",
            "Small Rectangle - 180x150",
            "Square - 250x250",
            "Small Square - 200x200",
            "Button - 125x125",
            "Half Page - 300x600",
            "Vertical Banner - 120x240",
            "Wide Skyscraper - 160x600",
            "Skyscraper - 120x600",
            "Billboard - 970x250",
            "Portrait - 300x1050",
            "Banner - 468x60",
            "Leaderboard - 728x90"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "prescale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR Aspect Ratio Banners",
    "display_name": "\ud83d\udd33 CR Aspect Ratio Banners",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
    "output_node": false
  },
  "CR Aspect Ratio Social Media": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "Instagram Portrait - 1080x1350",
            "Instagram Square - 1080x1080",
            "Instagram Landscape - 1080x608",
            "Instagram Stories/Reels - 1080x1920",
            "Facebook Landscape - 1080x1350",
            "Facebook Marketplace - 1200x1200",
            "Facebook Stories - 1080x1920",
            "TikTok - 1080x1920",
            "YouTube Banner - 2560\u00d71440",
            "LinkedIn Profile Banner - 1584x396",
            "LinkedIn Page Cover - 1128x191",
            "LinkedIn Post - 1200x627",
            "Pinterest Pin Image - 1000x1500",
            "CivitAI Cover - 1600x400",
            "OpenArt App - 1500x1000"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "prescale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR Aspect Ratio Social Media",
    "display_name": "\ud83d\udd33 CR Aspect Ratio Social Media",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
    "output_node": false
  },
  "CR_Aspect Ratio For Print": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "A4 - 2480x3508",
            "A5 - 1748x2480",
            "A6 - 1240x1748",
            "A7 - 874x1240",
            "A8 - 614x874",
            "A9 - 437x614",
            "A10 - 307x437",
            "B4 - 2953x4169",
            "B5 - 2079x2953",
            "B6 - 1476x2079",
            "B7 - 1039x1476",
            "B8 - 732x1039",
            "B9 - 520x732",
            "B10 - 366x520",
            "C4 - 2705x3827",
            "C5 - 1913x2705",
            "C6 - 1346x1913",
            "C7 - 957x1346",
            "C8 - 673x957",
            "C9 - 472x673",
            "C10 - 331x472",
            "Letter (8.5 x 11 inches) - 2550x3300",
            "Legal (8.5 x 14 inches) - 2550x4200"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "prescale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR_Aspect Ratio For Print",
    "display_name": "\ud83d\udd33 CR_Aspect Ratio For Print",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
    "output_node": false
  },
  "CR Image Size": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "upscale_factor"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "Width",
      "Height",
      "upscale_factor",
      "show_help"
    ],
    "name": "CR Image Size",
    "display_name": "CR Image Size (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Aspect Ratio SDXL": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 2048
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 2048
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "1:1 square 1024x1024",
            "3:4 portrait 896x1152",
            "5:8 portrait 832x1216",
            "9:16 portrait 768x1344",
            "9:21 portrait 640x1536",
            "4:3 landscape 1152x896",
            "3:2 landscape 1216x832",
            "16:9 landscape 1344x768",
            "21:9 landscape 1536x640"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor1": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000
          }
        ],
        "upscale_factor2": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor1",
        "upscale_factor2",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "show_help"
    ],
    "name": "CR Aspect Ratio SDXL",
    "display_name": "CR Aspect Ratio SDXL (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR SDXL Prompt Mixer": {
    "input": {
      "required": {},
      "optional": {
        "prompt_positive": [
          "STRING",
          {
            "multiline": true,
            "default": "BASE_POSITIVE"
          }
        ],
        "prompt_negative": [
          "STRING",
          {
            "multiline": true,
            "default": "BASE_NEGATIVE"
          }
        ],
        "style_positive": [
          "STRING",
          {
            "multiline": true,
            "default": "REFINER_POSTIVE"
          }
        ],
        "style_negative": [
          "STRING",
          {
            "multiline": true,
            "default": "REFINER_NEGATIVE"
          }
        ],
        "preset": [
          [
            "preset 1",
            "preset 2",
            "preset 3",
            "preset 4",
            "preset 5"
          ]
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "prompt_positive",
        "prompt_negative",
        "style_positive",
        "style_negative",
        "preset"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pos_g",
      "pos_l",
      "pos_r",
      "neg_g",
      "neg_l",
      "neg_r"
    ],
    "name": "CR SDXL Prompt Mixer",
    "display_name": "CR SDXL Prompt Mixer (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Seed to Int": {
    "input": {
      "required": {
        "seed": [
          "SEED"
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Seed to Int",
    "display_name": "CR Seed to Int (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Apply ControlNet": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "switch": [
          [
            "On",
            "Off"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "switch",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "show_help"
    ],
    "name": "CR Apply ControlNet",
    "display_name": "\ud83d\udd79\ufe0f CR Apply ControlNet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd79\ufe0f ControlNet",
    "output_node": false
  },
  "CR Multi-ControlNet Stack": {
    "input": {
      "required": {},
      "optional": {
        "switch_1": [
          [
            "Off",
            "On"
          ]
        ],
        "controlnet_1": [
          [
            "None",
            "1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "1.5/control_v11p_sd15_canny_fp16.safetensors",
            "OpenPoseXL2.safetensors",
            "SD1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "SD1.5/control_v11p_sd15_canny_fp16.safetensors",
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_sd15_inpaint_depth_hand_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "diffusion_pytorch_model.safetensors"
          ]
        ],
        "controlnet_strength_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_1": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "switch_2": [
          [
            "Off",
            "On"
          ]
        ],
        "controlnet_2": [
          [
            "None",
            "1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "1.5/control_v11p_sd15_canny_fp16.safetensors",
            "OpenPoseXL2.safetensors",
            "SD1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "SD1.5/control_v11p_sd15_canny_fp16.safetensors",
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_sd15_inpaint_depth_hand_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "diffusion_pytorch_model.safetensors"
          ]
        ],
        "controlnet_strength_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_2": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "switch_3": [
          [
            "Off",
            "On"
          ]
        ],
        "controlnet_3": [
          [
            "None",
            "1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "1.5/control_v11p_sd15_canny_fp16.safetensors",
            "OpenPoseXL2.safetensors",
            "SD1.5/control_v11f1p_sd15_depth_fp16.safetensors",
            "SD1.5/control_v11p_sd15_canny_fp16.safetensors",
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_sd15_inpaint_depth_hand_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "diffusion_pytorch_model.safetensors"
          ]
        ],
        "controlnet_strength_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_3": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "switch_1",
        "controlnet_1",
        "controlnet_strength_1",
        "start_percent_1",
        "end_percent_1",
        "switch_2",
        "controlnet_2",
        "controlnet_strength_2",
        "start_percent_2",
        "end_percent_2",
        "switch_3",
        "controlnet_3",
        "controlnet_strength_3",
        "start_percent_3",
        "end_percent_3",
        "image_1",
        "image_2",
        "image_3",
        "controlnet_stack"
      ]
    },
    "output": [
      "CONTROL_NET_STACK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONTROLNET_STACK",
      "show_help"
    ],
    "name": "CR Multi-ControlNet Stack",
    "display_name": "\ud83d\udd79\ufe0f CR Multi-ControlNet Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd79\ufe0f ControlNet",
    "output_node": false
  },
  "CR Apply Multi-ControlNet": {
    "input": {
      "required": {
        "base_positive": [
          "CONDITIONING"
        ],
        "base_negative": [
          "CONDITIONING"
        ],
        "switch": [
          [
            "Off",
            "On"
          ]
        ],
        "controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_positive",
        "base_negative",
        "switch",
        "controlnet_stack"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "base_pos",
      "base_neg",
      "show_help"
    ],
    "name": "CR Apply Multi-ControlNet",
    "display_name": "\ud83d\udd79\ufe0f CR Apply Multi-ControlNet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd79\ufe0f ControlNet",
    "output_node": false
  },
  "CR Load LoRA": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "switch": [
          [
            "On",
            "Off"
          ]
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "switch",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Load LoRA",
    "display_name": "\ud83d\udc8a CR Load LoRA",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
    "output_node": false
  },
  "CR LoRA Stack": {
    "input": {
      "required": {
        "switch_1": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name_1": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "switch_2": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name_2": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "switch_3": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name_3": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "model_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "switch_1",
        "lora_name_1",
        "model_weight_1",
        "clip_weight_1",
        "switch_2",
        "lora_name_2",
        "model_weight_2",
        "clip_weight_2",
        "switch_3",
        "lora_name_3",
        "model_weight_3",
        "clip_weight_3"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "LORA_STACK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LORA_STACK",
      "show_help"
    ],
    "name": "CR LoRA Stack",
    "display_name": "\ud83d\udc8a CR LoRA Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
    "output_node": false
  },
  "CR Random LoRA Stack": {
    "input": {
      "required": {
        "exclusive_mode": [
          [
            "Off",
            "On"
          ]
        ],
        "stride": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "force_randomize_after_stride": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name_1": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "switch_1": [
          [
            "Off",
            "On"
          ]
        ],
        "chance_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "model_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_2": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "switch_2": [
          [
            "Off",
            "On"
          ]
        ],
        "chance_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "model_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_3": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "switch_3": [
          [
            "Off",
            "On"
          ]
        ],
        "chance_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "model_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "exclusive_mode",
        "stride",
        "force_randomize_after_stride",
        "lora_name_1",
        "switch_1",
        "chance_1",
        "model_weight_1",
        "clip_weight_1",
        "lora_name_2",
        "switch_2",
        "chance_2",
        "model_weight_2",
        "clip_weight_2",
        "lora_name_3",
        "switch_3",
        "chance_3",
        "model_weight_3",
        "clip_weight_3"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "LORA_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LORA_STACK"
    ],
    "name": "CR Random LoRA Stack",
    "display_name": "\ud83d\udc8a CR Random LoRA Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
    "output_node": false
  },
  "CR Random Weight LoRA": {
    "input": {
      "required": {
        "stride": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "force_randomize_after_stride": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "switch": [
          [
            "Off",
            "On"
          ]
        ],
        "weight_min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "weight_max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "stride",
        "force_randomize_after_stride",
        "lora_name",
        "switch",
        "weight_min",
        "weight_max",
        "clip_weight"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "LORA_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LORA_STACK"
    ],
    "name": "CR Random Weight LoRA",
    "display_name": "\ud83d\udc8a CR Random Weight LoRA",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
    "output_node": false
  },
  "CR Apply LoRA Stack": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_stack"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Apply LoRA Stack",
    "display_name": "\ud83d\udc8a CR Apply LoRA Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
    "output_node": false
  },
  "CR Apply Model Merge": {
    "input": {
      "required": {
        "model_stack": [
          "MODEL_STACK"
        ],
        "merge_method": [
          [
            "Recursive",
            "Weighted"
          ]
        ],
        "normalise_ratios": [
          [
            "Yes",
            "No"
          ]
        ],
        "weight_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_stack",
        "merge_method",
        "normalise_ratios",
        "weight_factor"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "model_mix_info",
      "show_help"
    ],
    "name": "CR Apply Model Merge",
    "display_name": "\u26cf\ufe0f CR Apply Model Merge",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\u26cf\ufe0f Model Merge",
    "output_node": false
  },
  "CR Model Merge Stack": {
    "input": {
      "required": {
        "switch_1": [
          [
            "Off",
            "On"
          ]
        ],
        "ckpt_name1": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "model_ratio1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "clip_ratio1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "switch_2": [
          [
            "Off",
            "On"
          ]
        ],
        "ckpt_name2": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "model_ratio2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "clip_ratio2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "switch_3": [
          [
            "Off",
            "On"
          ]
        ],
        "ckpt_name3": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "model_ratio3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "clip_ratio3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "model_stack": [
          "MODEL_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "switch_1",
        "ckpt_name1",
        "model_ratio1",
        "clip_ratio1",
        "switch_2",
        "ckpt_name2",
        "model_ratio2",
        "clip_ratio2",
        "switch_3",
        "ckpt_name3",
        "model_ratio3",
        "clip_ratio3"
      ],
      "optional": [
        "model_stack"
      ]
    },
    "output": [
      "MODEL_STACK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL_STACK",
      "show_help"
    ],
    "name": "CR Model Merge Stack",
    "display_name": "\u26cf\ufe0f CR Model Merge Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\u26cf\ufe0f Model Merge",
    "output_node": false
  },
  "CR Data Bus In": {
    "input": {
      "required": {},
      "optional": {
        "pipe": [
          "*"
        ],
        "any1": [
          "*"
        ],
        "any2": [
          "*"
        ],
        "any3": [
          "*"
        ],
        "any4": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "pipe",
        "any1",
        "any2",
        "any3",
        "any4"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Data Bus In",
    "display_name": "\ud83d\ude8c CR Data Bus In",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\ude8c Bus",
    "output_node": false
  },
  "CR Data Bus Out": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ]
    },
    "output": [
      "PIPE_LINE",
      "*",
      "*",
      "*",
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "any1",
      "any2",
      "any3",
      "any4",
      "show_help"
    ],
    "name": "CR Data Bus Out",
    "display_name": "\ud83d\ude8c CR Data Bus Out",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\ude8c Bus",
    "output_node": false
  },
  "CR 8 Channel In": {
    "input": {
      "required": {},
      "optional": {
        "pipe": [
          "*"
        ],
        "ch1": [
          "*"
        ],
        "ch2": [
          "*"
        ],
        "ch3": [
          "*"
        ],
        "ch4": [
          "*"
        ],
        "ch5": [
          "*"
        ],
        "ch6": [
          "*"
        ],
        "ch7": [
          "*"
        ],
        "ch8": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "pipe",
        "ch1",
        "ch2",
        "ch3",
        "ch4",
        "ch5",
        "ch6",
        "ch7",
        "ch8"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR 8 Channel In",
    "display_name": "\ud83d\ude8c CR 8 Channel In",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\ude8c Bus",
    "output_node": false
  },
  "CR 8 Channel Out": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ]
    },
    "output": [
      "PIPE_LINE",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "ch1",
      "ch2",
      "ch3",
      "ch4",
      "ch5",
      "ch6",
      "ch7",
      "ch8",
      "show_help"
    ],
    "name": "CR 8 Channel Out",
    "display_name": "\ud83d\ude8c CR 8 Channel Out",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\ude8c Bus",
    "output_node": false
  },
  "CR Module Pipe Loader": {
    "input": {
      "required": {},
      "optional": {
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "controlnet": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "controlnet",
        "image",
        "seed"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Module Pipe Loader",
    "display_name": "\u2708\ufe0f CR Module Pipe Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\u2708\ufe0f Module",
    "output_node": false
  },
  "CR Module Input": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "CONTROL_NET",
      "IMAGE",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "controlnet",
      "image",
      "seed",
      "show_help"
    ],
    "name": "CR Module Input",
    "display_name": "\u2708\ufe0f CR Module Input",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\u2708\ufe0f Module",
    "output_node": false
  },
  "CR Module Output": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "controlnet": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "optional": [
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "controlnet",
        "image",
        "seed"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Module Output",
    "display_name": "\u2708\ufe0f CR Module Output",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\u2708\ufe0f Module",
    "output_node": false
  },
  "CR Image Pipe In": {
    "input": {
      "required": {},
      "optional": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image",
        "width",
        "height",
        "upscale_factor"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Image Pipe In",
    "display_name": "\ud83d\udee9 CR Image Pipe In",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\udee9\ufe0f Image",
    "output_node": false
  },
  "CR Image Pipe Edit": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048,
            "forceInput": true
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048,
            "forceInput": true
          }
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "optional": [
        "image",
        "width",
        "height",
        "upscale_factor"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Image Pipe Edit",
    "display_name": "\ud83d\udee9\ufe0f CR Image Pipe Edit",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\udee9\ufe0f Image",
    "output_node": false
  },
  "CR Image Pipe Out": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "INT",
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image",
      "width",
      "height",
      "upscale_factor",
      "show_help"
    ],
    "name": "CR Image Pipe Out",
    "display_name": "\ud83d\udee9\ufe0f CR Image Pipe Out",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\udee9\ufe0f Image",
    "output_node": false
  },
  "CR Pipe Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ],
        "pipe1": [
          "PIPE_LINE"
        ],
        "pipe2": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input",
        "pipe1",
        "pipe2"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "PIPE_LINE",
      "show_help"
    ],
    "name": "CR Pipe Switch",
    "display_name": "\ud83d\udd00\ufe0f CR Pipe Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe",
    "output_node": true
  },
  "CR SDXL Prompt Mix Presets": {
    "input": {
      "required": {},
      "optional": {
        "prompt_positive": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt_pos"
          }
        ],
        "prompt_negative": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt_neg"
          }
        ],
        "style_positive": [
          "STRING",
          {
            "multiline": true,
            "default": "style_pos"
          }
        ],
        "style_negative": [
          "STRING",
          {
            "multiline": true,
            "default": "style_neg"
          }
        ],
        "preset": [
          [
            "default with no style text",
            "default with style text",
            "style boost 1",
            "style boost 2",
            "style text to refiner"
          ]
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "prompt_positive",
        "prompt_negative",
        "style_positive",
        "style_negative",
        "preset"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pos_g",
      "pos_l",
      "pos_r",
      "neg_g",
      "neg_l",
      "neg_r",
      "show_help"
    ],
    "name": "CR SDXL Prompt Mix Presets",
    "display_name": "\ud83c\udf1f CR SDXL Prompt Mix Presets",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udf1f SDXL",
    "output_node": false
  },
  "CR SDXL Style Text": {
    "input": {
      "required": {
        "positive_style": [
          "STRING",
          {
            "default": "POS_STYLE",
            "multiline": true
          }
        ],
        "negative_style": [
          "STRING",
          {
            "default": "NEG_STYLE",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_style",
        "negative_style"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive_prompt_text_l",
      "negative_prompt_text_l",
      "show_help"
    ],
    "name": "CR SDXL Style Text",
    "display_name": "\ud83c\udf1f CR SDXL Style Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udf1f SDXL",
    "output_node": false
  },
  "CR SDXL Base Prompt Encoder": {
    "input": {
      "required": {
        "base_clip": [
          "CLIP"
        ],
        "pos_g": [
          "STRING",
          {
            "multiline": true,
            "default": "POS_G"
          }
        ],
        "pos_l": [
          "STRING",
          {
            "multiline": true,
            "default": "POS_L"
          }
        ],
        "neg_g": [
          "STRING",
          {
            "multiline": true,
            "default": "NEG_G"
          }
        ],
        "neg_l": [
          "STRING",
          {
            "multiline": true,
            "default": "NEG_L"
          }
        ],
        "preset": [
          [
            "preset A",
            "preset B",
            "preset C"
          ]
        ],
        "base_width": [
          "INT",
          {
            "default": 4096.0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "base_height": [
          "INT",
          {
            "default": 4096.0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 4096.0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 4096.0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base_clip",
        "pos_g",
        "pos_l",
        "neg_g",
        "neg_l",
        "preset",
        "base_width",
        "base_height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "base_positive",
      "base_negative",
      "show_help"
    ],
    "name": "CR SDXL Base Prompt Encoder",
    "display_name": "\ud83c\udf1f CR SDXL Base Prompt Encoder",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udf1f SDXL",
    "output_node": false
  },
  "CR Multi Upscale Stack": {
    "input": {
      "required": {
        "switch_1": [
          [
            "On",
            "Off"
          ]
        ],
        "upscale_model_1": [
          [
            "None",
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth"
          ]
        ],
        "rescale_factor_1": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "switch_2": [
          [
            "On",
            "Off"
          ]
        ],
        "upscale_model_2": [
          [
            "None",
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth"
          ]
        ],
        "rescale_factor_2": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "switch_3": [
          [
            "On",
            "Off"
          ]
        ],
        "upscale_model_3": [
          [
            "None",
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth"
          ]
        ],
        "rescale_factor_3": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "upscale_stack": [
          "UPSCALE_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "switch_1",
        "upscale_model_1",
        "rescale_factor_1",
        "switch_2",
        "upscale_model_2",
        "rescale_factor_2",
        "switch_3",
        "upscale_model_3",
        "rescale_factor_3"
      ],
      "optional": [
        "upscale_stack"
      ]
    },
    "output": [
      "UPSCALE_STACK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "UPSCALE_STACK",
      "show_help"
    ],
    "name": "CR Multi Upscale Stack",
    "display_name": "\ud83d\udd0d CR Multi Upscale Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd0d Upscale",
    "output_node": false
  },
  "CR Upscale Image": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_model": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth"
          ]
        ],
        "mode": [
          [
            "rescale",
            "resize"
          ]
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "resize_width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ],
        "resampling_method": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "rounding_modulus": [
          "INT",
          {
            "default": 8,
            "min": 8,
            "max": 1024,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_model",
        "mode",
        "rescale_factor",
        "resize_width",
        "resampling_method",
        "supersample",
        "rounding_modulus"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Upscale Image",
    "display_name": "\ud83d\udd0d CR Upscale Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd0d Upscale",
    "output_node": false
  },
  "CR Apply Multi Upscale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "resampling_method": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "rounding_modulus": [
          "INT",
          {
            "default": 8,
            "min": 8,
            "max": 1024,
            "step": 8
          }
        ],
        "upscale_stack": [
          "UPSCALE_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "resampling_method",
        "supersample",
        "rounding_modulus",
        "upscale_stack"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Apply Multi Upscale",
    "display_name": "\ud83d\udd0d CR Apply Multi Upscale",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd0d Upscale",
    "output_node": false
  },
  "CR XY List": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "list1": [
          "STRING",
          {
            "multiline": true,
            "default": "x"
          }
        ],
        "x_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "x_append": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "x_annotation_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "list2": [
          "STRING",
          {
            "multiline": true,
            "default": "y"
          }
        ],
        "y_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "y_append": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "y_annotation_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "list1",
        "x_prepend",
        "x_append",
        "x_annotation_prepend",
        "list2",
        "y_prepend",
        "y_append",
        "y_annotation_prepend"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "X",
      "Y",
      "x_annotation",
      "y_annotation",
      "trigger",
      "show_help"
    ],
    "name": "CR XY List",
    "display_name": "\ud83d\udcc9 CR XY List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
    "output_node": false
  },
  "CR XY Interpolate": {
    "input": {
      "required": {
        "x_columns": [
          "INT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "x_start_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "x_step": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "x_annotation_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "y_rows": [
          "INT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "y_start_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "y_step": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "y_annotation_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "index": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "gradient_profile": [
          [
            "Lerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "x_columns",
        "x_start_value",
        "x_step",
        "x_annotation_prepend",
        "y_rows",
        "y_start_value",
        "y_step",
        "y_annotation_prepend",
        "index",
        "gradient_profile"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "STRING",
      "STRING",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "X",
      "Y",
      "x_annotation",
      "y_annotation",
      "trigger",
      "show_help"
    ],
    "name": "CR XY Interpolate",
    "display_name": "\ud83d\udcc9 CR XY Interpolate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
    "output_node": false
  },
  "CR XY From Folder": {
    "input": {
      "required": {
        "image_folder": [
          []
        ],
        "start_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ],
        "end_index": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "max_columns": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "x_annotation": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "y_annotation": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1
          }
        ],
        "gap": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      },
      "optional": {
        "trigger": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_folder",
        "start_index",
        "end_index",
        "max_columns",
        "x_annotation",
        "y_annotation",
        "font_size",
        "gap"
      ],
      "optional": [
        "trigger"
      ]
    },
    "output": [
      "IMAGE",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "trigger",
      "show_help"
    ],
    "name": "CR XY From Folder",
    "display_name": "\ud83d\udcc9 CR XY From Folder",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
    "output_node": false
  },
  "CR XY Save Grid Image": {
    "input": {
      "required": {
        "mode": [
          [
            "Save",
            "Preview"
          ]
        ],
        "output_folder": [
          []
        ],
        "image": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "CR"
          }
        ],
        "file_format": [
          [
            "webp",
            "jpg",
            "png",
            "tif"
          ]
        ]
      },
      "optional": {
        "output_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "trigger": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "output_folder",
        "image",
        "filename_prefix",
        "file_format"
      ],
      "optional": [
        "output_path",
        "trigger"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CR XY Save Grid Image",
    "display_name": "\ud83d\udcc9 CR XY Save Grid Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
    "output_node": true
  },
  "CR XY Index": {
    "input": {
      "required": {
        "x_columns": [
          "INT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "y_rows": [
          "INT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "index": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x_columns",
        "y_rows",
        "index"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "x",
      "y",
      "show_help"
    ],
    "name": "CR XY Index",
    "display_name": "\ud83d\udcc9 CR XY Index",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
    "output_node": false
  },
  "CR Halftone Grid": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "dot_style": [
          [
            "Accent",
            "afmhot",
            "autumn",
            "binary",
            "Blues",
            "bone",
            "BrBG",
            "brg",
            "BuGn",
            "BuPu",
            "bwr",
            "cividis",
            "CMRmap",
            "cool",
            "coolwarm",
            "copper",
            "cubehelix",
            "Dark2",
            "flag",
            "gist_earth",
            "gist_gray",
            "gist_heat",
            "gist_rainbow",
            "gist_stern",
            "gist_yarg",
            "GnBu",
            "gnuplot",
            "gnuplot2",
            "gray",
            "Greens",
            "Greys",
            "hot",
            "hsv",
            "inferno",
            "jet",
            "magma",
            "nipy_spectral",
            "ocean",
            "Oranges",
            "OrRd",
            "Paired",
            "Pastel1",
            "Pastel2",
            "pink",
            "PiYG",
            "plasma",
            "PRGn",
            "prism",
            "PuBu",
            "PuBuGn",
            "PuOr",
            "PuRd",
            "Purples",
            "rainbow",
            "RdBu",
            "RdGy",
            "RdPu",
            "RdYlBu",
            "RdYlGn",
            "Reds",
            "seismic",
            "Set1",
            "Set2",
            "Set3",
            "Spectral",
            "spring",
            "summer",
            "tab10",
            "tab20",
            "tab20b",
            "tab20c",
            "terrain",
            "turbo",
            "twilight",
            "twilight_shifted",
            "viridis",
            "winter",
            "Wistia",
            "YlGn",
            "YlGnBu",
            "YlOrBr",
            "YlOrRd"
          ]
        ],
        "reverse_dot_style": [
          [
            "No",
            "Yes"
          ]
        ],
        "dot_frequency": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 200,
            "step": 1
          }
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "x_pos": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "y_pos": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "dot_style",
        "reverse_dot_style",
        "dot_frequency",
        "background_color",
        "x_pos",
        "y_pos"
      ],
      "optional": [
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Halftone Grid",
    "display_name": "\ud83d\udfeb CR Halftone Grid",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Color Bars": {
    "input": {
      "required": {
        "mode": [
          [
            "2-color"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "color_1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_2": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "orientation": [
          [
            "vertical",
            "horizontal",
            "diagonal",
            "alt_diagonal"
          ]
        ],
        "bar_frequency": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 200,
            "step": 1
          }
        ],
        "offset": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 20,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color2_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "width",
        "height",
        "color_1",
        "color_2",
        "orientation",
        "bar_frequency",
        "offset"
      ],
      "optional": [
        "color1_hex",
        "color2_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Color Bars",
    "display_name": "\ud83d\udfeb CR Color Bars",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Style Bars": {
    "input": {
      "required": {
        "mode": [
          [
            "color bars",
            "sin wave",
            "gradient bars"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "bar_style": [
          [
            "Accent",
            "afmhot",
            "autumn",
            "binary",
            "Blues",
            "bone",
            "BrBG",
            "brg",
            "BuGn",
            "BuPu",
            "bwr",
            "cividis",
            "CMRmap",
            "cool",
            "coolwarm",
            "copper",
            "cubehelix",
            "Dark2",
            "flag",
            "gist_earth",
            "gist_gray",
            "gist_heat",
            "gist_rainbow",
            "gist_stern",
            "gist_yarg",
            "GnBu",
            "gnuplot",
            "gnuplot2",
            "gray",
            "Greens",
            "Greys",
            "hot",
            "hsv",
            "inferno",
            "jet",
            "magma",
            "nipy_spectral",
            "ocean",
            "Oranges",
            "OrRd",
            "Paired",
            "Pastel1",
            "Pastel2",
            "pink",
            "PiYG",
            "plasma",
            "PRGn",
            "prism",
            "PuBu",
            "PuBuGn",
            "PuOr",
            "PuRd",
            "Purples",
            "rainbow",
            "RdBu",
            "RdGy",
            "RdPu",
            "RdYlBu",
            "RdYlGn",
            "Reds",
            "seismic",
            "Set1",
            "Set2",
            "Set3",
            "Spectral",
            "spring",
            "summer",
            "tab10",
            "tab20",
            "tab20b",
            "tab20c",
            "terrain",
            "turbo",
            "twilight",
            "twilight_shifted",
            "viridis",
            "winter",
            "Wistia",
            "YlGn",
            "YlGnBu",
            "YlOrBr",
            "YlOrRd"
          ]
        ],
        "orientation": [
          [
            "vertical",
            "horizontal"
          ]
        ],
        "bar_frequency": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 200,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "width",
        "height",
        "bar_style",
        "orientation",
        "bar_frequency"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Style Bars",
    "display_name": "\ud83d\udfea CR Style Bars",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Checker Pattern": {
    "input": {
      "required": {
        "mode": [
          [
            "regular",
            "stepped"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "color_1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_2": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "grid_frequency": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 200,
            "step": 1
          }
        ],
        "step": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 200,
            "step": 1
          }
        ]
      },
      "optional": {
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color2_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "width",
        "height",
        "color_1",
        "color_2",
        "grid_frequency",
        "step"
      ],
      "optional": [
        "color1_hex",
        "color2_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Checker Pattern",
    "display_name": "\ud83d\udfe6 CR Checker Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Polygons": {
    "input": {
      "required": {
        "mode": [
          [
            "hexagons",
            "triangles"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 512
          }
        ],
        "columns": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 512
          }
        ],
        "face_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "line_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "line_width": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512
          }
        ]
      },
      "optional": {
        "face_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "line_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "width",
        "height",
        "rows",
        "columns",
        "face_color",
        "background_color",
        "line_color",
        "line_width"
      ],
      "optional": [
        "face_color_hex",
        "bg_color_hex",
        "line_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Polygons",
    "display_name": "\ud83d\udfe9 CR Polygons",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Color Gradient": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "start_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "end_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "gradient_distance": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 2,
            "step": 0.05
          }
        ],
        "linear_transition": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "orientation": [
          [
            "vertical",
            "horizontal"
          ]
        ]
      },
      "optional": {
        "start_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "end_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "start_color",
        "end_color",
        "gradient_distance",
        "linear_transition",
        "orientation"
      ],
      "optional": [
        "start_color_hex",
        "end_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Color Gradient",
    "display_name": "\ud83d\udfe8 CR Color Gradient",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Radial Gradient": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "start_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "end_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "gradient_distance": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 2,
            "step": 0.05
          }
        ],
        "radial_center_x": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "radial_center_y": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "start_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "end_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "start_color",
        "end_color",
        "gradient_distance",
        "radial_center_x",
        "radial_center_y"
      ],
      "optional": [
        "start_color_hex",
        "end_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_Help"
    ],
    "name": "CR Radial Gradient",
    "display_name": "\ud83d\udfe8 CR Radial Gradient",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Starburst Lines": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "num_lines": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 500
          }
        ],
        "line_length": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "line_width": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 512
          }
        ],
        "line_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "center_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "center_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 720
          }
        ]
      },
      "optional": {
        "line_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_lines",
        "line_length",
        "line_width",
        "line_color",
        "background_color",
        "center_x",
        "center_y",
        "rotation"
      ],
      "optional": [
        "line_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Starburst Lines",
    "display_name": "\ud83d\udfe7 CR Starburst Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Starburst Colors": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "num_triangles": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 512
          }
        ],
        "color_1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_2": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "center_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512
          }
        ],
        "center_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 720
          }
        ],
        "bbox_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 2,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color2_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_triangles",
        "color_1",
        "color_2",
        "center_x",
        "center_y",
        "rotation",
        "bbox_factor"
      ],
      "optional": [
        "color1_hex",
        "color2_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Starburst Colors",
    "display_name": "\ud83d\udfe7 CR Starburst Colors",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Simple Binary Pattern": {
    "input": {
      "required": {
        "binary_pattern": [
          "STRING",
          {
            "multiline": true,
            "default": "10101"
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "binary_pattern",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Simple Binary Pattern",
    "display_name": "\ud83d\udfe5 CR Simple Binary Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Binary Pattern": {
    "input": {
      "required": {
        "binary_pattern": [
          "STRING",
          {
            "multiline": true,
            "default": "10101"
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_0": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "jitter_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "bias": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color0_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "outline_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "binary_pattern",
        "width",
        "height",
        "background_color",
        "color_0",
        "color_1",
        "outline_thickness",
        "outline_color",
        "jitter_distance",
        "bias"
      ],
      "optional": [
        "bg_color_hex",
        "color0_hex",
        "color1_hex",
        "outline_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Binary Pattern",
    "display_name": "\ud83d\udfe5 CR Binary Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
    "output_node": false
  },
  "CR Draw Shape": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "shape": [
          [
            "circle",
            "oval",
            "square",
            "diamond",
            "triangle",
            "hexagon",
            "octagon",
            "quarter circle",
            "half circle",
            "quarter circle",
            "starburst",
            "star",
            "cross",
            "diagonal regions"
          ]
        ],
        "shape_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "back_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 3600.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "shape_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "shape",
        "shape_color",
        "back_color",
        "x_offset",
        "y_offset",
        "zoom",
        "rotation"
      ],
      "optional": [
        "shape_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Draw Shape",
    "display_name": "\ud83d\udfe1 CR Draw Shape",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udfe3 Shape",
    "output_node": false
  },
  "CR Draw Pie": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "pie_start": [
          "FLOAT",
          {
            "default": 30.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.1
          }
        ],
        "pie_stop": [
          "FLOAT",
          {
            "default": 330.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.1
          }
        ],
        "shape_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "back_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 3600.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "shape_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "pie_start",
        "pie_stop",
        "shape_color",
        "back_color",
        "x_offset",
        "y_offset",
        "zoom",
        "rotation"
      ],
      "optional": [
        "shape_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Draw Pie",
    "display_name": "\ud83d\udfe2 CR Draw Pie",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udfe3 Shape",
    "output_node": false
  },
  "CR Random Shape Pattern": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "num_rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 128
          }
        ],
        "num_cols": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 128
          }
        ],
        "color1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color2": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color2_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_rows",
        "num_cols",
        "color1",
        "color2"
      ],
      "optional": [
        "color1_hex",
        "color2_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Random Shape Pattern",
    "display_name": "\ud83d\udd35 CR Random Shape Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udfe3 Shape",
    "output_node": false
  },
  "CR Overlay Text": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "align": [
          [
            "center",
            "top",
            "bottom"
          ]
        ],
        "justify": [
          [
            "center",
            "left",
            "right"
          ]
        ],
        "margins": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "line_spacing": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "position_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "position_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "rotation_options": [
          [
            "text center",
            "image center"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "font_name",
        "font_size",
        "font_color",
        "align",
        "justify",
        "margins",
        "line_spacing",
        "position_x",
        "position_y",
        "rotation_angle",
        "rotation_options"
      ],
      "optional": [
        "font_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Overlay Text",
    "display_name": "\ud83d\udd24 CR Overlay Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Draw Text": {
    "input": {
      "required": {
        "image_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "align": [
          [
            "center",
            "top",
            "bottom"
          ]
        ],
        "justify": [
          [
            "center",
            "left",
            "right"
          ]
        ],
        "margins": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "line_spacing": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "position_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "position_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "rotation_options": [
          [
            "text center",
            "image center"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_width",
        "image_height",
        "text",
        "font_name",
        "font_size",
        "font_color",
        "background_color",
        "align",
        "justify",
        "margins",
        "line_spacing",
        "position_x",
        "position_y",
        "rotation_angle",
        "rotation_options"
      ],
      "optional": [
        "font_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Draw Text",
    "display_name": "\ud83d\udd24\ufe0f CR Draw Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Mask Text": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "align": [
          [
            "center",
            "top",
            "bottom"
          ]
        ],
        "justify": [
          [
            "center",
            "left",
            "right"
          ]
        ],
        "margins": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "line_spacing": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "position_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "position_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "rotation_options": [
          [
            "text center",
            "image center"
          ]
        ]
      },
      "optional": {
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "font_name",
        "font_size",
        "background_color",
        "align",
        "justify",
        "margins",
        "line_spacing",
        "position_x",
        "position_y",
        "rotation_angle",
        "rotation_options"
      ],
      "optional": [
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Mask Text",
    "display_name": "\ud83d\udd24\ufe0f CR Mask Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Composite Text": {
    "input": {
      "required": {
        "image_text": [
          "IMAGE"
        ],
        "image_background": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "align": [
          [
            "center",
            "top",
            "bottom"
          ]
        ],
        "justify": [
          [
            "center",
            "left",
            "right"
          ]
        ],
        "margins": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "line_spacing": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "position_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "position_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "rotation_options": [
          [
            "text center",
            "image center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_text",
        "image_background",
        "text",
        "font_name",
        "font_size",
        "align",
        "justify",
        "margins",
        "line_spacing",
        "position_x",
        "position_y",
        "rotation_angle",
        "rotation_options"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Composite Text",
    "display_name": "\ud83d\udd24\ufe0f CR Composite Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Simple Text Watermark": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "@ your name"
          }
        ],
        "align": [
          [
            "center",
            "top left",
            "top center",
            "top right",
            "bottom left",
            "bottom center",
            "bottom right"
          ]
        ],
        "opacity": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "x_margin": [
          "INT",
          {
            "default": 20,
            "min": -1024,
            "max": 1024
          }
        ],
        "y_margin": [
          "INT",
          {
            "default": 20,
            "min": -1024,
            "max": 1024
          }
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "align",
        "opacity",
        "font_name",
        "font_size",
        "font_color",
        "x_margin",
        "y_margin"
      ],
      "optional": [
        "font_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Simple Text Watermark",
    "display_name": "\ud83d\udd24\ufe0f CR Simple Text Watermark",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Select Font": {
    "input": {
      "required": {
        "font_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "font_name"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "font_name",
      "show_help"
    ],
    "name": "CR Select Font",
    "display_name": "\ud83d\udd24\ufe0f CR Select Font",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Halftone Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "dot_size": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 30,
            "step": 1
          }
        ],
        "dot_shape": [
          [
            "ellipse",
            "rectangle"
          ],
          {
            "default": "ellipse"
          }
        ],
        "resolution": [
          [
            "normal",
            "hi-res (2x output size)"
          ],
          {
            "default": "normal"
          }
        ],
        "angle_c": [
          "INT",
          {
            "default": 75,
            "min": 0,
            "max": 360,
            "step": 1
          }
        ],
        "angle_m": [
          "INT",
          {
            "default": 45,
            "min": 0,
            "max": 360,
            "step": 1
          }
        ],
        "angle_y": [
          "INT",
          {
            "default": 15,
            "min": 0,
            "max": 360,
            "step": 1
          }
        ],
        "angle_k": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 360,
            "step": 1
          }
        ],
        "greyscale": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "antialias": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "antialias_scale": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 4,
            "step": 1
          }
        ],
        "border_blending": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "dot_size",
        "dot_shape",
        "resolution",
        "angle_c",
        "angle_m",
        "angle_y",
        "angle_k",
        "greyscale",
        "antialias",
        "antialias_scale",
        "border_blending"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Halftone Filter",
    "display_name": "\ud83c\udfa8 Halftone Filter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udfa8 Filter",
    "output_node": false
  },
  "CR Color Tint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "mode": [
          [
            "custom",
            "white",
            "black",
            "sepia",
            "red",
            "green",
            "blue",
            "cyan",
            "magenta",
            "yellow",
            "purple",
            "orange",
            "warm",
            "cool",
            "lime",
            "navy",
            "vintage",
            "rose",
            "teal",
            "maroon",
            "peach",
            "lavender",
            "olive"
          ]
        ]
      },
      "optional": {
        "tint_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "strength",
        "mode"
      ],
      "optional": [
        "tint_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Color Tint",
    "display_name": "\ud83c\udfa8 CR Color Tint",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udfa8 Filter",
    "output_node": false
  },
  "CR Vignette Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vignette_shape": [
          [
            "circle",
            "oval",
            "square",
            "diamond"
          ]
        ],
        "feather_amount": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 1024
          }
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "reverse": [
          [
            "no",
            "yes"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vignette_shape",
        "feather_amount",
        "x_offset",
        "y_offset",
        "zoom",
        "reverse"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "show_help"
    ],
    "name": "CR Vignette Filter",
    "display_name": "\ud83c\udfa8 CR Vignette Filter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udfa8 Filter",
    "output_node": false
  },
  "CR Page Layout": {
    "input": {
      "required": {
        "layout_options": [
          [
            "header",
            "footer",
            "header and footer",
            "no header or footer"
          ]
        ],
        "image_panel": [
          "IMAGE"
        ],
        "header_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "header_text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "header_align": [
          [
            "left",
            "center",
            "right"
          ]
        ],
        "footer_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "footer_text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "footer_align": [
          [
            "left",
            "center",
            "right"
          ]
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "header_font_size": [
          "INT",
          {
            "default": 150,
            "min": 0,
            "max": 1024
          }
        ],
        "footer_font_size": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1024
          }
        ],
        "border_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "layout_options",
        "image_panel",
        "header_height",
        "header_text",
        "header_align",
        "footer_height",
        "footer_text",
        "footer_align",
        "font_name",
        "font_color",
        "header_font_size",
        "footer_font_size",
        "border_thickness",
        "border_color",
        "background_color"
      ],
      "optional": [
        "font_color_hex",
        "border_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Page Layout",
    "display_name": "\ud83c\udf01 CR Page Layout",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Image Panel": {
    "input": {
      "required": {
        "image_1": [
          "IMAGE"
        ],
        "border_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "layout_direction": [
          [
            "horizontal",
            "vertical"
          ]
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_1",
        "border_thickness",
        "border_color",
        "outline_thickness",
        "outline_color",
        "layout_direction"
      ],
      "optional": [
        "image_2",
        "image_3",
        "image_4",
        "border_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Image Panel",
    "display_name": "\ud83c\udf01 CR Image Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Image Grid Panel": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "border_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "max_columns": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 256
          }
        ]
      },
      "optional": {
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "border_thickness",
        "border_color",
        "outline_thickness",
        "outline_color",
        "max_columns"
      ],
      "optional": [
        "border_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Image Grid Panel",
    "display_name": "\ud83c\udf01 CR Image Grid Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Image Border": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "top_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "bottom_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "left_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "right_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "top_thickness",
        "bottom_thickness",
        "left_thickness",
        "right_thickness",
        "border_color",
        "outline_thickness",
        "outline_color"
      ],
      "optional": [
        "border_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Image Border",
    "display_name": "\ud83c\udf01 CR Image Border",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Feathered Border": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "top_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "bottom_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "left_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "right_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "feather_amount": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ]
      },
      "optional": {
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "top_thickness",
        "bottom_thickness",
        "left_thickness",
        "right_thickness",
        "border_color",
        "feather_amount"
      ],
      "optional": [
        "border_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Feathered Border",
    "display_name": "\ud83c\udf01 CR Feathered Border",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Simple Text Panel": {
    "input": {
      "required": {
        "panel_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "panel_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 1024
          }
        ],
        "font_outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 50
          }
        ],
        "font_outline_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "align": [
          [
            "top",
            "center",
            "bottom"
          ]
        ],
        "justify": [
          [
            "left",
            "center",
            "right"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "panel_width",
        "panel_height",
        "text",
        "font_name",
        "font_color",
        "font_size",
        "font_outline_thickness",
        "font_outline_color",
        "background_color",
        "align",
        "justify"
      ],
      "optional": [
        "font_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Simple Text Panel",
    "display_name": "\ud83c\udf01 CR Simple Text Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Color Panel": {
    "input": {
      "required": {
        "panel_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "panel_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "fill_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "fill_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "panel_width",
        "panel_height",
        "fill_color"
      ],
      "optional": [
        "fill_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Color Panel",
    "display_name": "\ud83c\udf01 CR Color Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Overlay Transparent Image": {
    "input": {
      "required": {
        "back_image": [
          "IMAGE"
        ],
        "overlay_image": [
          "IMAGE"
        ],
        "transparency": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "overlay_scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "back_image",
        "overlay_image",
        "transparency",
        "offset_x",
        "offset_y",
        "rotation_angle",
        "overlay_scale_factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CR Overlay Transparent Image",
    "display_name": "\ud83c\udf01 CR Overlay Transparent Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Half Drop Panel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "pattern": [
          [
            "none",
            "half drop",
            "quarter drop",
            "custom drop %"
          ]
        ]
      },
      "optional": {
        "drop_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "pattern"
      ],
      "optional": [
        "drop_percentage"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Half Drop Panel",
    "display_name": "\ud83c\udf01 CR Half Drop Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Diamond Panel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "pattern": [
          [
            "none",
            "diamond"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "pattern"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Diamond Panel",
    "display_name": "\ud83c\udf01 CR Diamond Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
    "output_node": false
  },
  "CR Simple Meme Template": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "preset": [
          [
            "custom",
            "One Does Not Simply ... MEME IN COMFY",
            "This is fine.",
            "Good Morning ... No Such Thing!"
          ]
        ],
        "text_top": [
          "STRING",
          {
            "multiline": true,
            "default": "text_top"
          }
        ],
        "text_bottom": [
          "STRING",
          {
            "multiline": true,
            "default": "text_bottom"
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "max_font_size": [
          "INT",
          {
            "default": 150,
            "min": 20,
            "max": 2048
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "font_outline": [
          [
            "none",
            "thin",
            "thick",
            "extra thick"
          ]
        ],
        "bar_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "bar_options": [
          [
            "no bars",
            "top",
            "bottom",
            "top and bottom"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bar_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "preset",
        "text_top",
        "text_bottom",
        "font_name",
        "max_font_size",
        "font_color",
        "font_outline",
        "bar_color",
        "bar_options"
      ],
      "optional": [
        "font_color_hex",
        "bar_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Simple Meme Template",
    "display_name": "\ud83d\udcf1 CR Simple Meme Template",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
    "output_node": false
  },
  "CR Simple Banner": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "banner_text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "max_font_size": [
          "INT",
          {
            "default": 150,
            "min": 20,
            "max": 2048
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 500
          }
        ],
        "outline_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "margin_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 500
          }
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "outline_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "banner_text",
        "font_name",
        "max_font_size",
        "font_color",
        "outline_thickness",
        "outline_color",
        "margin_size"
      ],
      "optional": [
        "font_color_hex",
        "outline_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Simple Banner",
    "display_name": "\ud83d\udcf1 CR Simple Banner",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
    "output_node": false
  },
  "CR Comic Panel Templates": {
    "input": {
      "required": {
        "page_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "page_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "template": [
          [
            "custom",
            "G22",
            "G33",
            "H2",
            "H3",
            "H12",
            "H13",
            "H21",
            "H23",
            "H31",
            "H32",
            "V2",
            "V3",
            "V12",
            "V13",
            "V21",
            "V23",
            "V31",
            "V32"
          ]
        ],
        "reading_direction": [
          [
            "left to right",
            "right to left"
          ]
        ],
        "border_thickness": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "panel_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "custom_panel_layout": [
          "STRING",
          {
            "multiline": false,
            "default": "H123"
          }
        ],
        "outline_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "panel_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "page_width",
        "page_height",
        "template",
        "reading_direction",
        "border_thickness",
        "outline_thickness",
        "outline_color",
        "panel_color",
        "background_color"
      ],
      "optional": [
        "images",
        "custom_panel_layout",
        "outline_color_hex",
        "panel_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Comic Panel Templates",
    "display_name": "\ud83d\udcf1 CR Comic Panel Templates",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
    "output_node": false
  },
  "CR Simple Image Compare": {
    "input": {
      "required": {
        "text1": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "text2": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "footer_height": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 1024
          }
        ],
        "font_name": [
          [
            "Oswald-Bold.ttf",
            "comic.ttf",
            "PixelifySans-Bold.ttf",
            "Roboto-Regular.ttf",
            "impact.ttf",
            "Caveat-VariableFont_wght.ttf",
            "NotoSansArabic-Regular.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "AlumniSansCollegiateOne-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1024
          }
        ],
        "mode": [
          [
            "normal",
            "dark"
          ]
        ],
        "border_thickness": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 1024
          }
        ]
      },
      "optional": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text1",
        "text2",
        "footer_height",
        "font_name",
        "font_size",
        "mode",
        "border_thickness"
      ],
      "optional": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Simple Image Compare",
    "display_name": "\ud83d\udcf1 CR Simple Image Compare",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
    "output_node": false
  },
  "CR Thumbnail Preview": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.1,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "max_columns": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 256
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rescale_factor",
        "max_columns"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "show_help"
    ],
    "name": "CR Thumbnail Preview",
    "display_name": "\ud83d\udcf1 CR Thumbnail Preview",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
    "output_node": true
  },
  "CR Seamless Checker": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.1,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "grid_options": [
          [
            "2x2",
            "3x3",
            "4x4",
            "5x5",
            "6x6"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rescale_factor",
        "grid_options"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "show_help"
    ],
    "name": "CR Seamless Checker",
    "display_name": "\ud83d\udcf1 CR Seamless Checker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
    "output_node": true
  },
  "CR Image Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Image Input Switch",
    "display_name": "\ud83d\udd00 CR Image Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Image Input Switch (4 way)": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4
          }
        ]
      },
      "optional": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "image1",
        "image2",
        "image3",
        "image4"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Image Input Switch (4 way)",
    "display_name": "\ud83d\udd00 CR Image Input Switch (4 way)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Latent Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "latent1": [
          "LATENT"
        ],
        "latent2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "latent1",
        "latent2"
      ]
    },
    "output": [
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "show_help"
    ],
    "name": "CR Latent Input Switch",
    "display_name": "\ud83d\udd00 CR Latent Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Conditioning Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "conditioning1": [
          "CONDITIONING"
        ],
        "conditioning2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "conditioning1",
        "conditioning2"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "show_help"
    ],
    "name": "CR Conditioning Input Switch",
    "display_name": "\ud83d\udd00 CR Conditioning Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Clip Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "clip1",
        "clip2"
      ]
    },
    "output": [
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CLIP",
      "show_help"
    ],
    "name": "CR Clip Input Switch",
    "display_name": "\ud83d\udd00 CR Clip Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Model Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "model1",
        "model2"
      ]
    },
    "output": [
      "MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "show_help"
    ],
    "name": "CR Model Input Switch",
    "display_name": "\ud83d\udd00 CR Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR ControlNet Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ],
        "control_net1": [
          "CONTROL_NET"
        ],
        "control_net2": [
          "CONTROL_NET"
        ]
      },
      "optional": {
        "control_net1": [
          "CONTROL_NET"
        ],
        "control_net2": [
          "CONTROL_NET"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input",
        "control_net1",
        "control_net2"
      ],
      "optional": [
        "control_net1",
        "control_net2"
      ]
    },
    "output": [
      "CONTROL_NET",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONTROL_NET",
      "show_help"
    ],
    "name": "CR ControlNet Input Switch",
    "display_name": "\ud83d\udd00 CR ControlNet Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR VAE Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "VAE1": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "VAE2": [
          "VAE",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "VAE1",
        "VAE2"
      ]
    },
    "output": [
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "VAE",
      "show_help"
    ],
    "name": "CR VAE Input Switch",
    "display_name": "\ud83d\udd00 CR VAE Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Text Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "text1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "text1",
        "text2"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Input Switch",
    "display_name": "\ud83d\udd00 CR Text Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Text Input Switch (4 way)": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4
          }
        ]
      },
      "optional": {
        "text1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text3": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text4": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "text1",
        "text2",
        "text3",
        "text4"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Input Switch (4 way)",
    "display_name": "\ud83d\udd00 CR Text Input Switch (4 way)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Switch Model and CLIP": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ],
        "model1": [
          "MODEL"
        ],
        "clip1": [
          "CLIP"
        ],
        "model2": [
          "MODEL"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input",
        "model1",
        "clip1",
        "model2",
        "clip2"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Switch Model and CLIP",
    "display_name": "\ud83d\udd00 CR Switch Model and CLIP",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
    "output_node": false
  },
  "CR Batch Process Switch": {
    "input": {
      "required": {
        "Input": [
          [
            "image",
            "image batch"
          ]
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "image_batch": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "image",
        "image_batch"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Batch Process Switch",
    "display_name": "\ud83d\udd02 CR Batch Process Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd02 Process",
    "output_node": false
  },
  "CR Img2Img Process Switch": {
    "input": {
      "required": {
        "Input": [
          [
            "txt2img",
            "img2img"
          ]
        ]
      },
      "optional": {
        "txt2img": [
          "LATENT"
        ],
        "img2img": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "txt2img",
        "img2img"
      ]
    },
    "output": [
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "show_help"
    ],
    "name": "CR Img2Img Process Switch",
    "display_name": "\ud83d\udd02 CR Img2Img Process Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd02 Process",
    "output_node": false
  },
  "CR Hires Fix Process Switch": {
    "input": {
      "required": {
        "Input": [
          [
            "latent_upscale",
            "image_upscale"
          ]
        ]
      },
      "optional": {
        "latent_upscale": [
          "LATENT"
        ],
        "image_upscale": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "latent_upscale",
        "image_upscale"
      ]
    },
    "output": [
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "STRING"
    ],
    "name": "CR Hires Fix Process Switch",
    "display_name": "\ud83d\udd02 CR Hires Fix Process Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd02 Process",
    "output_node": false
  },
  "CR Index": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ],
        "print_to_console": [
          [
            "Yes",
            "No"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "print_to_console"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Index",
    "display_name": "\ud83d\udd22 CR Index",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
    "output_node": false
  },
  "CR Index Increment": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": -10000,
            "max": 10000,
            "forceInput": true
          }
        ],
        "interval": [
          "INT",
          {
            "default": 1,
            "min": -10000,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "interval"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "index",
      "interval",
      "show_help"
    ],
    "name": "CR Index Increment",
    "display_name": "\ud83d\udd22 CR Index Increment",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
    "output_node": false
  },
  "CR Index Multiply": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000,
            "forceInput": true
          }
        ],
        "factor": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "factor"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "index",
      "factor",
      "show_help"
    ],
    "name": "CR Index Multiply",
    "display_name": "\ud83d\udd22 CR Index Multiply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
    "output_node": false
  },
  "CR Index Reset": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000,
            "forceInput": true
          }
        ],
        "reset_to": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "reset_to"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "index",
      "reset_to",
      "show_help"
    ],
    "name": "CR Index Reset",
    "display_name": "\ud83d\udd22 CR Index Reset",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
    "output_node": false
  },
  "CR Trigger": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "trigger_value": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "trigger_value"
      ]
    },
    "output": [
      "INT",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "index",
      "trigger",
      "show_help"
    ],
    "name": "CR Trigger",
    "display_name": "\ud83d\udd22 CR Trigger",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
    "output_node": false
  },
  "CR String To Number": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "text",
            "forceInput": true
          }
        ],
        "round_integer": [
          [
            "round",
            "round down",
            "round up"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "round_integer"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR String To Number",
    "display_name": "\ud83d\udd27 CR String To Number",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
    "output_node": false
  },
  "CR String To Combo": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "any",
      "show_help"
    ],
    "name": "CR String To Combo",
    "display_name": "\ud83d\udd27 CR String To Combo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
    "output_node": false
  },
  "CR Float To String": {
    "input": {
      "required": {
        "float_": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000000.0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float_"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Float To String",
    "display_name": "\ud83d\udd27 CR Float To String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
    "output_node": false
  },
  "CR Float To Integer": {
    "input": {
      "required": {
        "_float": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "_float"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Float To Integer",
    "display_name": "\ud83d\udd27 CR Float To Integer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
    "output_node": false
  },
  "CR Integer To String": {
    "input": {
      "required": {
        "int_": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int_"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Integer To String",
    "display_name": "\ud83d\udd27 CR Integer To String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
    "output_node": false
  },
  "CR String To Boolean": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "BOOLEAN",
      "show_help"
    ],
    "name": "CR String To Boolean",
    "display_name": "\ud83d\udd27 CR String To Boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
    "output_node": false
  },
  "CR Random Hex Color": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "hex_color1",
      "hex_color2",
      "hex_color3",
      "hex_color4",
      "show_help"
    ],
    "name": "CR Random Hex Color",
    "display_name": "\ud83c\udfb2 CR Random Hex Color",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
    "output_node": false
  },
  "CR Random RGB": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "rgb_1",
      "rgb_2",
      "rgb_3",
      "rgb_4",
      "show_help"
    ],
    "name": "CR Random RGB",
    "display_name": "\ud83c\udfb2 CR Random RGB",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
    "output_node": false
  },
  "CR Random Multiline Values": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "value_type": [
          [
            "binary",
            "decimal",
            "natural",
            "hexadecimal",
            "alphabetic",
            "alphanumeric",
            "custom"
          ]
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 2048
          }
        ],
        "string_length": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 1024
          }
        ],
        "custom_values": [
          "STRING",
          {
            "multiline": false,
            "default": "123ABC"
          }
        ],
        "prepend_text": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "value_type",
        "rows",
        "string_length",
        "custom_values",
        "prepend_text"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Random Multiline Values",
    "display_name": "\ud83c\udfb2 CR Random Multiline Values",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
    "output_node": false
  },
  "CR Random Multiline Colors": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "value_type": [
          [
            "rgb",
            "hex color",
            "matplotlib xkcd"
          ]
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 2048
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "value_type",
        "rows"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Random Multiline Colors",
    "display_name": "\ud83c\udfb2 CR Random Multiline Colors",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
    "output_node": false
  },
  "CR Random RGB Gradient": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 2048
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "rows"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Random RGB Gradient",
    "display_name": "\ud83c\udfb2 CR Random RGB Gradient",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
    "output_node": false
  },
  "CR Random Panel Codes": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 2048
          }
        ],
        "string_length": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 1024
          }
        ],
        "values": [
          "STRING",
          {
            "multiline": false,
            "default": "123"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "rows",
        "string_length",
        "values"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Random Panel Codes",
    "display_name": "\ud83c\udfb2 CR Random Panel Codes",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
    "output_node": false
  },
  "CR Text": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "text",
      "show_help"
    ],
    "name": "CR Text",
    "display_name": "\ud83d\udd24 CR Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Multiline Text": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "convert_from_csv": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "csv_quote_char": [
          "STRING",
          {
            "default": "'",
            "choices": [
              "'",
              "\""
            ]
          }
        ],
        "remove_chars": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "chars_to_remove": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "split_string": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "convert_from_csv",
        "csv_quote_char",
        "remove_chars",
        "chars_to_remove",
        "split_string"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Multiline Text",
    "display_name": "\ud83d\udd24 CR Multiline Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Split String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "text"
          }
        ]
      },
      "optional": {
        "delimiter": [
          "STRING",
          {
            "multiline": false,
            "default": ","
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "delimiter"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "string_1",
      "string_2",
      "string_3",
      "string_4",
      "show_help"
    ],
    "name": "CR Split String",
    "display_name": "\ud83d\udd24 CR Split String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Text Concatenate": {
    "input": {
      "required": {},
      "optional": {
        "text1": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text1",
        "text2",
        "separator"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Concatenate",
    "display_name": "\ud83d\udd24 CR Text Concatenate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Text Replace": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ]
      },
      "optional": {
        "find1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "find2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "find3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "find1",
        "replace1",
        "find2",
        "replace2",
        "find3",
        "replace3"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Replace",
    "display_name": "\ud83d\udd24 CR Text Replace",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Text Length": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Text Length",
    "display_name": "\ud83d\udd24 CR Text Length",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Text Operation": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "operation": [
          [
            "uppercase",
            "lowercase",
            "capitalize",
            "invert_case",
            "reverse",
            "trim",
            "remove_spaces"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "operation"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Operation",
    "display_name": "\ud83d\udd24 CR Text Operation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Text Blacklist": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ],
        "blacklist_words": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "replacement_text": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "blacklist_words"
      ],
      "optional": [
        "replacement_text"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Blacklist",
    "display_name": "\ud83d\udd24 Text Blacklist",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": false
  },
  "CR Save Text To File": {
    "input": {
      "required": {
        "multiline_text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "output_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "multiline_text",
        "output_file_path",
        "file_name",
        "file_extension"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "show_help"
    ],
    "name": "CR Save Text To File",
    "display_name": "\ud83d\udd24 CR Save Text To File",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
    "output_node": true
  },
  "CR Set Value On Boolean": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": true,
            "forceInput": true
          }
        ],
        "value_if_true": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "value_if_false": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean",
        "value_if_true",
        "value_if_false"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR Set Value On Boolean",
    "display_name": "\u2699\ufe0f CR Set Value On Boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Conditional",
    "output_node": false
  },
  "CR Set Value On Binary": {
    "input": {
      "required": {
        "binary": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "forceInput": true
          }
        ],
        "value_if_1": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "value_if_0": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "binary",
        "value_if_1",
        "value_if_0"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR Set Value On Binary",
    "display_name": "\u2699\ufe0f CR Set Value On Binary",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Conditional",
    "output_node": false
  },
  "CR Set Value on String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      },
      "optional": {
        "test_string": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "value_if_true": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "value_if_false": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "test_string",
        "value_if_true",
        "value_if_false"
      ]
    },
    "output": [
      "*",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "STRING",
      "BOOLEAN",
      "show_help"
    ],
    "name": "CR Set Value on String",
    "display_name": "\u2699\ufe0f CR Set Value on String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Conditional",
    "output_node": false
  },
  "CR Set Switch From String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      },
      "optional": {
        "switch_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "switch_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "switch_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "switch_4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "switch_1",
        "switch_2",
        "switch_3",
        "switch_4"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "switch",
      "show_help"
    ],
    "name": "CR Set Switch From String",
    "display_name": "\u2699\ufe0f CR Set Switch From String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Conditional",
    "output_node": false
  },
  "CR Value": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT",
      "show_help"
    ],
    "name": "CR Value",
    "display_name": "\u2699\ufe0f CR Value",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
    "output_node": false
  },
  "CR Integer Multiple": {
    "input": {
      "required": {
        "integer": [
          "INT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "multiple": [
          "FLOAT",
          {
            "default": 8,
            "min": 1,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "integer",
        "multiple"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Integer Multiple",
    "display_name": "\u2699\ufe0f CR Integer Multiple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
    "output_node": false
  },
  "CR Clamp Value": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "range_min": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "range_max": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "range_min",
        "range_max"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "a",
      "show_help"
    ],
    "name": "CR Clamp Value",
    "display_name": "\u2699\ufe0f CR Clamp Value",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
    "output_node": false
  },
  "CR Math Operation": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 1.0
          }
        ],
        "operation": [
          [
            "sin",
            "cos",
            "tan",
            "sqrt",
            "exp",
            "log",
            "neg",
            "abs"
          ]
        ],
        "decimal_places": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "operation",
        "decimal_places"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "a",
      "show_help"
    ],
    "name": "CR Math Operation",
    "display_name": "\u2699\ufe0f CR Math Operation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
    "output_node": false
  },
  "CR Get Parameter From Prompt": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt",
            "forceInput": true
          }
        ],
        "search_string": [
          "STRING",
          {
            "multiline": false,
            "default": "!findme"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "search_string"
      ]
    },
    "output": [
      "STRING",
      "*",
      "FLOAT",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "prompt",
      "text",
      "float",
      "boolean",
      "show_help"
    ],
    "name": "CR Get Parameter From Prompt",
    "display_name": "\u2699\ufe0f CR Get Parameter From Prompt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
    "output_node": false
  },
  "CR Select Resize Method": {
    "input": {
      "required": {
        "method": [
          [
            "Fit",
            "Crop"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "method"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "method",
      "show_help"
    ],
    "name": "CR Select Resize Method",
    "display_name": "\u2699\ufe0f CR Select Resize Method",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
    "output_node": false
  },
  "CR Select ISO Size": {
    "input": {
      "required": {
        "iso_size": [
          [
            "A0 - 9933x14043",
            "A1 - 7016x9933",
            "A2 - 4960x7016",
            "A3 - 3508x4960",
            "A4 - 2480x3508",
            "A5 - 1748x2480",
            "A6 - 1240x1748",
            "A7 - 874x1240",
            "A8 - 614x874",
            "A9 - 437x614",
            "A10 - 307x437",
            "A11 - 213x307",
            "A12 - 154x213",
            "A13 - 106x154",
            "B0 - 11811x16701",
            "B1 - 8350x11811",
            "B2 - 5906x8350",
            "B3 - 4169x5906",
            "B4 - 2953x4169",
            "B5 - 2079x2953",
            "B6 - 1476x2079",
            "B7 - 1039x1476",
            "B8 - 732x1039",
            "B9 - 520x732",
            "B10 - 366x520",
            "C0 - 10831x15319",
            "C1 - 7654x10831",
            "C2 - 5409x7654",
            "C3 - 3827x5409",
            "C4 - 2705x3827",
            "C5 - 1913x2705",
            "C6 - 1346x1913",
            "C7 - 957x1346",
            "C8 - 673x957",
            "C9 - 472x673",
            "C10 - 331x472"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "iso_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "show_help"
    ],
    "name": "CR Select ISO Size",
    "display_name": "\u2699\ufe0f CR Select ISO Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
    "output_node": false
  },
  "CR Simple Schedule": {
    "input": {
      "required": {
        "schedule": [
          "STRING",
          {
            "multiline": true,
            "default": "frame_number, item_alias, [attr_value1, attr_value2]"
          }
        ],
        "schedule_type": [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job"
          ]
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule",
        "schedule_type",
        "schedule_alias",
        "schedule_format"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_help"
    ],
    "name": "CR Simple Schedule",
    "display_name": "\ud83d\udccb CR Simple Schedule",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
    "output_node": false
  },
  "CR Central Schedule": {
    "input": {
      "required": {
        "schedule_1": [
          "STRING",
          {
            "multiline": true,
            "default": "schedule"
          }
        ],
        "schedule_type1": [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job"
          ]
        ],
        "schedule_alias1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "schedule_2": [
          "STRING",
          {
            "multiline": true,
            "default": "schedule"
          }
        ],
        "schedule_type2": [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job"
          ]
        ],
        "schedule_alias2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "schedule_3": [
          "STRING",
          {
            "multiline": true,
            "default": "schedule"
          }
        ],
        "schedule_type3": [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job"
          ]
        ],
        "schedule_alias3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_1",
        "schedule_type1",
        "schedule_alias1",
        "schedule_2",
        "schedule_type2",
        "schedule_alias2",
        "schedule_3",
        "schedule_type3",
        "schedule_alias3",
        "schedule_format"
      ],
      "optional": [
        "schedule"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_text"
    ],
    "name": "CR Central Schedule",
    "display_name": "\ud83d\udccb CR Central Schedule",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
    "output_node": false
  },
  "CR Combine Schedules": {
    "input": {
      "required": {},
      "optional": {
        "schedule_1": [
          "SCHEDULE"
        ],
        "schedule_2": [
          "SCHEDULE"
        ],
        "schedule_3": [
          "SCHEDULE"
        ],
        "schedule_4": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "schedule_1",
        "schedule_2",
        "schedule_3",
        "schedule_4"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_text"
    ],
    "name": "CR Combine Schedules",
    "display_name": "\ud83d\udccb CR Combine Schedules",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
    "output_node": false
  },
  "CR Output Schedule To File": {
    "input": {
      "required": {
        "output_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ],
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "output_file_path",
        "file_name",
        "file_extension",
        "schedule"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CR Output Schedule To File",
    "display_name": "\ud83d\udccb CR Output Schedule To File",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
    "output_node": true
  },
  "CR Load Schedule From File": {
    "input": {
      "required": {
        "input_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input_file_path",
        "file_name",
        "file_extension"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_text"
    ],
    "name": "CR Load Schedule From File",
    "display_name": "\ud83d\udccb CR Load Schedule From File",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
    "output_node": false
  },
  "CR Schedule Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ],
        "schedule1": [
          "SCHEDULE"
        ],
        "schedule2": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input",
        "schedule1",
        "schedule2"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_help"
    ],
    "name": "CR Schedule Input Switch",
    "display_name": "\ud83d\udccb CR Schedule Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
    "output_node": true
  },
  "CR Bit Schedule": {
    "input": {
      "required": {
        "binary_string": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "interval": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "binary_string",
        "interval",
        "loops"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_text"
    ],
    "name": "CR Bit Schedule",
    "display_name": "\ud83d\udccb CR Bit Schedule",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
    "output_node": false
  },
  "CR Simple Value Scheduler": {
    "input": {
      "required": {
        "schedule": [
          "STRING",
          {
            "multiline": true,
            "default": "frame_number, value"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule",
        "current_frame"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR Simple Value Scheduler",
    "display_name": "\ud83d\udcd1 CR Simple Value Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
    "output_node": false
  },
  "CR Simple Text Scheduler": {
    "input": {
      "required": {
        "schedule": [
          "STRING",
          {
            "multiline": true,
            "default": "frame_number, text"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule",
        "current_frame"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Simple Text Scheduler",
    "display_name": "\ud83d\udcd1 CR Simple Text Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
    "output_node": false
  },
  "CR Value Scheduler": {
    "input": {
      "required": {
        "mode": [
          [
            "Default Value",
            "Schedule"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "default_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -9999.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "current_frame",
        "schedule_alias",
        "default_value",
        "schedule_format"
      ],
      "optional": [
        "schedule"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR Value Scheduler",
    "display_name": "\ud83d\udcd1 CR Value Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
    "output_node": false
  },
  "CR Text Scheduler": {
    "input": {
      "required": {
        "mode": [
          [
            "Default Text",
            "Schedule"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "default_text": [
          "STRING",
          {
            "multiline": false,
            "default": "default text"
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "current_frame",
        "schedule_alias",
        "default_text",
        "schedule_format"
      ],
      "optional": [
        "schedule"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Scheduler",
    "display_name": "\ud83d\udcd1 CR Text Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
    "output_node": false
  },
  "CR Load Scheduled Models": {
    "input": {
      "required": {
        "mode": [
          [
            "Load default Model",
            "Schedule"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "default_model": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "model_list": [
          "MODEL_LIST"
        ],
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "current_frame",
        "schedule_alias",
        "default_model",
        "schedule_format"
      ],
      "optional": [
        "model_list",
        "schedule"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "show_help"
    ],
    "name": "CR Load Scheduled Models",
    "display_name": "\ud83d\udcd1 CR Load Scheduled Models",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
    "output_node": false
  },
  "CR Load Scheduled LoRAs": {
    "input": {
      "required": {
        "mode": [
          [
            "Off",
            "Load default LoRA",
            "Schedule"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "default_lora": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "lora_list": [
          "LORA_LIST"
        ],
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model",
        "clip",
        "current_frame",
        "schedule_alias",
        "default_lora",
        "strength_model",
        "strength_clip",
        "schedule_format"
      ],
      "optional": [
        "lora_list",
        "schedule"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Load Scheduled LoRAs",
    "display_name": "\ud83d\udcd1 CR Load Scheduled LoRAs",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
    "output_node": false
  },
  "CR Prompt Scheduler": {
    "input": {
      "required": {
        "mode": [
          [
            "Default Prompt",
            "Keyframe List",
            "Schedule"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "default_prompt": [
          "STRING",
          {
            "multiline": false,
            "default": "default prompt"
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ],
        "interpolate_prompt": [
          [
            "Yes",
            "No"
          ]
        ]
      },
      "optional": {
        "schedule": [
          "SCHEDULE"
        ],
        "schedule_alias": [
          "STRING",
          {
            "default prompt": "",
            "multiline": false
          }
        ],
        "keyframe_list": [
          "STRING",
          {
            "multiline": true,
            "default": "keyframe list"
          }
        ],
        "prepend_text": [
          "STRING",
          {
            "multiline": true,
            "default": "prepend text"
          }
        ],
        "append_text": [
          "STRING",
          {
            "multiline": true,
            "default": "append text"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "current_frame",
        "default_prompt",
        "schedule_format",
        "interpolate_prompt"
      ],
      "optional": [
        "schedule",
        "schedule_alias",
        "keyframe_list",
        "prepend_text",
        "append_text"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "current_prompt",
      "next_prompt",
      "weight",
      "show_help"
    ],
    "name": "CR Prompt Scheduler",
    "display_name": "\ud83d\udcd1 CR Prompt Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
    "output_node": false
  },
  "CR Simple Prompt Scheduler": {
    "input": {
      "required": {
        "keyframe_list": [
          "STRING",
          {
            "multiline": true,
            "default": "frame_number, text"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "keyframe_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "keyframe_list",
        "current_frame",
        "keyframe_format"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "current_prompt",
      "next_prompt",
      "weight",
      "show_help"
    ],
    "name": "CR Simple Prompt Scheduler",
    "display_name": "\ud83d\udcd1 CR Simple Prompt Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
    "output_node": false
  },
  "CR Keyframe List": {
    "input": {
      "required": {
        "keyframe_list": [
          "STRING",
          {
            "multiline": true,
            "default": "keyframes"
          }
        ],
        "keyframe_format": [
          [
            "Deforum",
            "CR"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "keyframe_list",
        "keyframe_format"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "keyframe_list",
      "show_help"
    ],
    "name": "CR Keyframe List",
    "display_name": "\ud83d\udcdd CR Keyframe List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcdd Prompt",
    "output_node": false
  },
  "CR Encode Scheduled Prompts": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "current_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "next_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -9999.0,
            "max": 9999.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "current_prompt",
        "next_prompt",
        "weight"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "show_help"
    ],
    "name": "CR Encode Scheduled Prompts",
    "display_name": "\ud83d\udcdd CR Encode Scheduled Prompts",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcdd Prompt",
    "output_node": false
  },
  "CR Gradient Float": {
    "input": {
      "required": {
        "start_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "end_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "frame_duration": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "gradient_profile": [
          [
            "Lerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "start_value",
        "end_value",
        "start_frame",
        "frame_duration",
        "current_frame",
        "gradient_profile"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "show_help"
    ],
    "name": "CR Gradient Float",
    "display_name": "\ud83d\udd22 CR Gradient Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
    "output_node": false
  },
  "CR Gradient Integer": {
    "input": {
      "required": {
        "start_value": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "end_value": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "frame_duration": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "gradient_profile": [
          [
            "Lerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "start_value",
        "end_value",
        "start_frame",
        "frame_duration",
        "current_frame",
        "gradient_profile"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Gradient Integer",
    "display_name": "\ud83d\udd22 CR Gradient Integer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
    "output_node": false
  },
  "CR Increment Float": {
    "input": {
      "required": {
        "start_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.001
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 0.1,
            "min": -9999.0,
            "max": 9999.0,
            "step": 0.001
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "frame_duration": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_value",
        "step",
        "start_frame",
        "frame_duration",
        "current_frame"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "show_help"
    ],
    "name": "CR Increment Float",
    "display_name": "\ud83d\udd22 CR Increment Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
    "output_node": true
  },
  "CR Increment Integer": {
    "input": {
      "required": {
        "start_value": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "step": [
          "INT",
          {
            "default": 1.0,
            "min": -9999.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "frame_duration": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_value",
        "step",
        "start_frame",
        "frame_duration",
        "current_frame"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Increment Integer",
    "display_name": "\ud83d\udd22 CR Increment Integer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
    "output_node": true
  },
  "CR Interpolate Latents": {
    "input": {
      "required": {
        "latent1": [
          "LATENT"
        ],
        "latent2": [
          "LATENT"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "method": [
          [
            "lerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "latent1",
        "latent2",
        "weight",
        "method"
      ]
    },
    "output": [
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "show_help"
    ],
    "name": "CR Interpolate Latents",
    "display_name": "\ud83d\udd22 CR Interpolate Latents",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
    "output_node": false
  },
  "CR Debatch Frames": {
    "input": {
      "required": {
        "frames": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "frames"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "debatched_frames"
    ],
    "name": "CR Debatch Frames",
    "display_name": "\ud83d\udee0\ufe0f CR Debatch Frames",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udee0\ufe0f Utils",
    "output_node": false
  },
  "CR Current Frame": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": -10000,
            "max": 10000
          }
        ],
        "print_to_console": [
          [
            "Yes",
            "No"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "print_to_console"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "index"
    ],
    "name": "CR Current Frame",
    "display_name": "\ud83d\udee0\ufe0f CR Current Frame",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udee0\ufe0f Utils",
    "output_node": false
  },
  "CR Load Animation Frames": {
    "input": {
      "required": {
        "image_sequence_folder": [
          []
        ],
        "start_index": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "max_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_sequence_folder",
        "start_index",
        "max_frames"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Load Animation Frames",
    "display_name": "\u2328\ufe0f CR Load Animation Frames",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\u2328\ufe0f IO",
    "output_node": false
  },
  "CR Load Flow Frames": {
    "input": {
      "required": {
        "input_folder": [
          []
        ],
        "sort_by": [
          [
            "Index",
            "Alphabetic"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "forceInput": true
          }
        ],
        "skip_start_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      },
      "optional": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "file_pattern": [
          "STRING",
          {
            "default": "*.png",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_folder",
        "sort_by",
        "current_frame",
        "skip_start_frames"
      ],
      "optional": [
        "input_path",
        "file_pattern"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "current_image",
      "previous_image",
      "current_frame",
      "show_help"
    ],
    "name": "CR Load Flow Frames",
    "display_name": "\u2328\ufe0f CR Load Flow Frames",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\u2328\ufe0f IO",
    "output_node": false
  },
  "CR Output Flow Frames": {
    "input": {
      "required": {
        "output_folder": [
          []
        ],
        "current_image": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "CR"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999,
            "forceInput": true
          }
        ]
      },
      "optional": {
        "interpolated_img": [
          "IMAGE"
        ],
        "output_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "output_folder",
        "current_image",
        "filename_prefix",
        "current_frame"
      ],
      "optional": [
        "interpolated_img",
        "output_path"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CR Output Flow Frames",
    "display_name": "\u2328\ufe0f CR Output Flow Frames",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\u2328\ufe0f IO",
    "output_node": true
  },
  "CR Prompt List Keyframes": {
    "input": {
      "required": {
        "prompt_list": [
          "PROMPT_LIST"
        ],
        "keyframe_format": [
          [
            "Deforum"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_list",
        "keyframe_format"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "keyframe_list",
      "show_help"
    ],
    "name": "CR Prompt List Keyframes",
    "display_name": "CR Prompt List Keyframes (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Simple Prompt List": {
    "input": {
      "required": {
        "prompt_1": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ],
        "prompt_2": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ],
        "prompt_3": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ],
        "prompt_4": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ],
        "prompt_5": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ]
      },
      "optional": {
        "simple_prompt_list": [
          "SIMPLE_PROMPT_LIST"
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_1",
        "prompt_2",
        "prompt_3",
        "prompt_4",
        "prompt_5"
      ],
      "optional": [
        "simple_prompt_list"
      ]
    },
    "output": [
      "SIMPLE_PROMPT_LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SIMPLE_PROMPT_LIST",
      "show_help"
    ],
    "name": "CR Simple Prompt List",
    "display_name": "CR Simple Prompt List (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Simple Prompt List Keyframes": {
    "input": {
      "required": {
        "simple_prompt_list": [
          "SIMPLE_PROMPT_LIST"
        ],
        "keyframe_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "transition_type": [
          [
            "Default"
          ]
        ],
        "transition_speed": [
          [
            "Default"
          ]
        ],
        "transition_profile": [
          [
            "Default"
          ]
        ],
        "keyframe_format": [
          [
            "Deforum"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "simple_prompt_list",
        "keyframe_interval",
        "loops",
        "transition_type",
        "transition_speed",
        "transition_profile",
        "keyframe_format"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "keyframe_list",
      "show_help"
    ],
    "name": "CR Simple Prompt List Keyframes",
    "display_name": "CR Simple Prompt List Keyframes (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Cycle Models": {
    "input": {
      "required": {
        "mode": [
          [
            "Off",
            "Sequential"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "model_list": [
          "MODEL_LIST"
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model",
        "clip",
        "model_list",
        "frame_interval",
        "loops",
        "current_frame"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "show_help"
    ],
    "name": "CR Cycle Models",
    "display_name": "CR Cycle Models (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Cycle LoRAs": {
    "input": {
      "required": {
        "mode": [
          [
            "Off",
            "Sequential"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_list": [
          "LORA_LIST"
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model",
        "clip",
        "lora_list",
        "frame_interval",
        "loops",
        "current_frame"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Cycle LoRAs",
    "display_name": "CR Cycle LoRAs (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Cycle Text": {
    "input": {
      "required": {
        "mode": [
          [
            "Sequential"
          ]
        ],
        "text_list": [
          "TEXT_LIST"
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "text_list",
        "frame_interval",
        "loops",
        "current_frame"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Cycle Text",
    "display_name": "CR Cycle Text (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Cycle Text Simple": {
    "input": {
      "required": {
        "mode": [
          [
            "Sequential"
          ]
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      },
      "optional": {
        "text_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_list_simple": [
          "TEXT_LIST_SIMPLE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "frame_interval",
        "loops",
        "current_frame"
      ],
      "optional": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_list_simple"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Cycle Text Simple",
    "display_name": "CR Cycle Text Simple (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Cycle Images": {
    "input": {
      "required": {
        "mode": [
          [
            "Sequential"
          ]
        ],
        "image_list": [
          "IMAGE_LIST"
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "image_list",
        "frame_interval",
        "loops",
        "current_frame"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Cycle Images",
    "display_name": "CR Cycle Images (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Cycle Images Simple": {
    "input": {
      "required": {
        "mode": [
          [
            "Sequential"
          ]
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      },
      "optional": {
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ],
        "image_list_simple": [
          "IMAGE_LIST_SIMPLE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "frame_interval",
        "loops",
        "current_frame"
      ],
      "optional": [
        "image_1",
        "image_2",
        "image_3",
        "image_4",
        "image_5",
        "image_list_simple"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Cycle Images Simple",
    "display_name": "CR Cycle Images Simple (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Model List": {
    "input": {
      "required": {
        "ckpt_name1": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "alias1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "ckpt_name2": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "alias2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "ckpt_name3": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "alias3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "ckpt_name4": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "alias4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "ckpt_name5": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "alias5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      },
      "optional": {
        "model_list": [
          "MODEL_LIST"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name1",
        "alias1",
        "ckpt_name2",
        "alias2",
        "ckpt_name3",
        "alias3",
        "ckpt_name4",
        "alias4",
        "ckpt_name5",
        "alias5"
      ],
      "optional": [
        "model_list"
      ]
    },
    "output": [
      "MODEL_LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL_LIST",
      "show_text"
    ],
    "name": "CR Model List",
    "display_name": "CR Model List (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR LoRA List": {
    "input": {
      "required": {
        "lora_name1": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "alias1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "model_strength_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name2": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "alias2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "model_strength_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name3": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "alias3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "model_strength_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_list": [
          "lora_LIST"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name1",
        "alias1",
        "model_strength_1",
        "clip_strength_1",
        "lora_name2",
        "alias2",
        "model_strength_2",
        "clip_strength_2",
        "lora_name3",
        "alias3",
        "model_strength_3",
        "clip_strength_3"
      ],
      "optional": [
        "lora_list"
      ]
    },
    "output": [
      "LORA_LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LORA_LIST",
      "show_text"
    ],
    "name": "CR LoRA List",
    "display_name": "CR LoRA List (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Text List Simple": {
    "input": {
      "required": {},
      "optional": {
        "text_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_list_simple": [
          "TEXT_LIST_SIMPLE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_list_simple"
      ]
    },
    "output": [
      "TEXT_LIST_SIMPLE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "TEXT_LIST_SIMPLE",
      "show_help"
    ],
    "name": "CR Text List Simple",
    "display_name": "CR Text List Simple (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Image List": {
    "input": {
      "required": {},
      "optional": {
        "image_1": [
          "IMAGE"
        ],
        "alias1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_2": [
          "IMAGE"
        ],
        "alias2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_3": [
          "IMAGE"
        ],
        "alias3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_4": [
          "IMAGE"
        ],
        "alias4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_5": [
          "IMAGE"
        ],
        "alias5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_list": [
          "image_LIST"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_1",
        "alias1",
        "image_2",
        "alias2",
        "image_3",
        "alias3",
        "image_4",
        "alias4",
        "image_5",
        "alias5",
        "image_list"
      ]
    },
    "output": [
      "IMAGE_LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_LIST",
      "show_help"
    ],
    "name": "CR Image List",
    "display_name": "CR Image List (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "CR Image List Simple": {
    "input": {
      "required": {},
      "optional": {
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ],
        "image_list_simple": [
          "IMAGE_LIST_SIMPLE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_1",
        "image_2",
        "image_3",
        "image_4",
        "image_5",
        "image_list_simple"
      ]
    },
    "output": [
      "IMAGE_LIST_SIMPLE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_LIST_SIMPLE",
      "show_help"
    ],
    "name": "CR Image List Simple",
    "display_name": "CR Image List Simple (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
    "output_node": false
  },
  "ReActorFaceSwap": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "input_image": [
          "IMAGE"
        ],
        "swap_model": [
          [
            "inswapper_128.onnx"
          ]
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "face_restore_model": [
          [
            "none",
            "codeformer-v0.1.0.pth",
            "GFPGANv1.3.pth",
            "GFPGANv1.4.pth",
            "GPEN-BFR-1024.onnx",
            "GPEN-BFR-2048.onnx",
            "GPEN-BFR-512.onnx"
          ]
        ],
        "face_restore_visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "detect_gender_input": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "detect_gender_source": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "input_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "source_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "console_log_level": [
          [
            0,
            1,
            2
          ],
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "source_image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ],
        "face_boost": [
          "FACE_BOOST"
        ]
      },
      "hidden": {
        "faces_order": "FACES_ORDER"
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "input_image",
        "swap_model",
        "facedetection",
        "face_restore_model",
        "face_restore_visibility",
        "codeformer_weight",
        "detect_gender_input",
        "detect_gender_source",
        "input_faces_index",
        "source_faces_index",
        "console_log_level"
      ],
      "optional": [
        "source_image",
        "face_model",
        "face_boost"
      ],
      "hidden": [
        "faces_order"
      ]
    },
    "output": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "name": "ReActorFaceSwap",
    "display_name": "ReActor \ud83c\udf0c Fast Face Swap",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorFaceSwapOpt": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "input_image": [
          "IMAGE"
        ],
        "swap_model": [
          [
            "inswapper_128.onnx"
          ]
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "face_restore_model": [
          [
            "none",
            "codeformer-v0.1.0.pth",
            "GFPGANv1.3.pth",
            "GFPGANv1.4.pth",
            "GPEN-BFR-1024.onnx",
            "GPEN-BFR-2048.onnx",
            "GPEN-BFR-512.onnx"
          ]
        ],
        "face_restore_visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "source_image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ],
        "options": [
          "OPTIONS"
        ],
        "face_boost": [
          "FACE_BOOST"
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "input_image",
        "swap_model",
        "facedetection",
        "face_restore_model",
        "face_restore_visibility",
        "codeformer_weight"
      ],
      "optional": [
        "source_image",
        "face_model",
        "options",
        "face_boost"
      ]
    },
    "output": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "name": "ReActorFaceSwapOpt",
    "display_name": "ReActor \ud83c\udf0c Fast Face Swap [OPTIONS]",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorOptions": {
    "input": {
      "required": {
        "input_faces_order": [
          [
            "left-right",
            "right-left",
            "top-bottom",
            "bottom-top",
            "small-large",
            "large-small"
          ],
          {
            "default": "large-small"
          }
        ],
        "input_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "detect_gender_input": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "source_faces_order": [
          [
            "left-right",
            "right-left",
            "top-bottom",
            "bottom-top",
            "small-large",
            "large-small"
          ],
          {
            "default": "large-small"
          }
        ],
        "source_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "detect_gender_source": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "console_log_level": [
          [
            0,
            1,
            2
          ],
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_faces_order",
        "input_faces_index",
        "detect_gender_input",
        "source_faces_order",
        "source_faces_index",
        "detect_gender_source",
        "console_log_level"
      ]
    },
    "output": [
      "OPTIONS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OPTIONS"
    ],
    "name": "ReActorOptions",
    "display_name": "ReActor \ud83c\udf0c Options",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorFaceBoost": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "boost_model": [
          [
            "none",
            "codeformer-v0.1.0.pth",
            "GFPGANv1.3.pth",
            "GFPGANv1.4.pth",
            "GPEN-BFR-1024.onnx",
            "GPEN-BFR-2048.onnx",
            "GPEN-BFR-512.onnx"
          ]
        ],
        "interpolation": [
          [
            "Nearest",
            "Bilinear",
            "Bicubic",
            "Lanczos"
          ],
          {
            "default": "Bicubic"
          }
        ],
        "visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "restore_with_main_after": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "boost_model",
        "interpolation",
        "visibility",
        "codeformer_weight",
        "restore_with_main_after"
      ]
    },
    "output": [
      "FACE_BOOST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_BOOST"
    ],
    "name": "ReActorFaceBoost",
    "display_name": "ReActor \ud83c\udf0c Face Booster",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorMaskHelper": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "swapped_image": [
          "IMAGE"
        ],
        "bbox_model_name": [
          [
            "bbox/face_yolov8m.pt",
            "bbox/hand_yolov8s.pt",
            "bbox/watermarks_s_yolov8_v1.pt",
            "segm/person_yolov8m-seg.pt"
          ]
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_drop_size": [
          "INT",
          {
            "min": 1,
            "max": 8192,
            "step": 1,
            "default": 10
          }
        ],
        "sam_model_name": [
          [
            "sam_vit_b_01ec64.pth"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ],
        "morphology_operation": [
          [
            "dilate",
            "erode",
            "open",
            "close"
          ]
        ],
        "morphology_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 128,
            "step": 1
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 9,
            "min": 0,
            "max": 48,
            "step": 1
          }
        ],
        "sigma_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 3.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask_optional": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "swapped_image",
        "bbox_model_name",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "bbox_drop_size",
        "sam_model_name",
        "sam_dilation",
        "sam_threshold",
        "bbox_expansion",
        "mask_hint_threshold",
        "mask_hint_use_negative",
        "morphology_operation",
        "morphology_distance",
        "blur_radius",
        "sigma_factor"
      ],
      "optional": [
        "mask_optional"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "MASK_PREVIEW",
      "SWAPPED_FACE"
    ],
    "name": "ReActorMaskHelper",
    "display_name": "ReActor \ud83c\udf0c Masking Helper",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorSaveFaceModel": {
    "input": {
      "required": {
        "save_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "face_model_name": [
          "STRING",
          {
            "default": "default"
          }
        ],
        "select_face_index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "save_mode",
        "face_model_name",
        "select_face_index"
      ],
      "optional": [
        "image",
        "face_model"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ReActorSaveFaceModel",
    "display_name": "Save Face Model \ud83c\udf0c ReActor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": true
  },
  "ReActorLoadFaceModel": {
    "input": {
      "required": {
        "face_model": [
          [
            "none"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "face_model"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_MODEL"
    ],
    "name": "ReActorLoadFaceModel",
    "display_name": "Load Face Model \ud83c\udf0c ReActor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorBuildFaceModel": {
    "input": {
      "required": {
        "save_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "send_only": [
          "BOOLEAN",
          {
            "default": false,
            "label_off": "NO",
            "label_on": "YES"
          }
        ],
        "face_model_name": [
          "STRING",
          {
            "default": "default"
          }
        ],
        "compute_method": [
          [
            "Mean",
            "Median",
            "Mode"
          ],
          {
            "default": "Mean"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "face_models": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "save_mode",
        "send_only",
        "face_model_name",
        "compute_method"
      ],
      "optional": [
        "images",
        "face_models"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_MODEL"
    ],
    "name": "ReActorBuildFaceModel",
    "display_name": "Build Blended Face Model \ud83c\udf0c ReActor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": true
  },
  "ReActorMakeFaceModelBatch": {
    "input": {
      "required": {
        "face_model1": [
          "FACE_MODEL"
        ]
      },
      "optional": {
        "face_model2": [
          "FACE_MODEL"
        ],
        "face_model3": [
          "FACE_MODEL"
        ],
        "face_model4": [
          "FACE_MODEL"
        ],
        "face_model5": [
          "FACE_MODEL"
        ],
        "face_model6": [
          "FACE_MODEL"
        ],
        "face_model7": [
          "FACE_MODEL"
        ],
        "face_model8": [
          "FACE_MODEL"
        ],
        "face_model9": [
          "FACE_MODEL"
        ],
        "face_model10": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "face_model1"
      ],
      "optional": [
        "face_model2",
        "face_model3",
        "face_model4",
        "face_model5",
        "face_model6",
        "face_model7",
        "face_model8",
        "face_model9",
        "face_model10"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_MODELS"
    ],
    "name": "ReActorMakeFaceModelBatch",
    "display_name": "Make Face Model Batch \ud83c\udf0c ReActor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorRestoreFace": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "model": [
          [
            "none",
            "codeformer-v0.1.0.pth",
            "GFPGANv1.3.pth",
            "GFPGANv1.4.pth",
            "GPEN-BFR-1024.onnx",
            "GPEN-BFR-2048.onnx",
            "GPEN-BFR-512.onnx"
          ]
        ],
        "visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "facedetection",
        "model",
        "visibility",
        "codeformer_weight"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReActorRestoreFace",
    "display_name": "Restore Face \ud83c\udf0c ReActor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorImageDublicator": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "count": [
          "INT",
          {
            "default": 1,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "count"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "ReActorImageDublicator",
    "display_name": "Image Dublicator (List) \ud83c\udf0c ReActor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ImageRGBA2RGB": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRGBA2RGB",
    "display_name": "Convert RGBA to RGB \ud83c\udf0c ReActor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "ReActorUnload": {
    "input": {
      "required": {
        "trigger": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "trigger"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReActorUnload",
    "display_name": "Unload ReActor Models \ud83c\udf0c ReActor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-ReActor",
    "category": "\ud83c\udf0c ReActor",
    "output_node": false
  },
  "UltralyticsDetectorProvider": {
    "input": {
      "required": {
        "model_name": [
          [
            "bbox/face_yolov8m.pt",
            "bbox/hand_yolov8s.pt",
            "bbox/watermarks_s_yolov8_v1.pt",
            "segm/person_yolov8m-seg.pt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "BBOX_DETECTOR",
      "SEGM_DETECTOR"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "BBOX_DETECTOR",
      "SEGM_DETECTOR"
    ],
    "name": "UltralyticsDetectorProvider",
    "display_name": "UltralyticsDetectorProvider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Impact-Subpack",
    "category": "ImpactPack",
    "output_node": false
  },
  "BLIP Model Loader": {
    "input": {
      "required": {
        "blip_model": [
          "STRING",
          {
            "default": "Salesforce/blip-image-captioning-base"
          }
        ],
        "vqa_model_id": [
          "STRING",
          {
            "default": "Salesforce/blip-vqa-base"
          }
        ],
        "device": [
          [
            "cuda",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "blip_model",
        "vqa_model_id",
        "device"
      ]
    },
    "output": [
      "BLIP_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BLIP_MODEL"
    ],
    "name": "BLIP Model Loader",
    "display_name": "BLIP Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Blend Latents": {
    "input": {
      "required": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "operation": [
          [
            "add",
            "multiply",
            "divide",
            "subtract",
            "overlay",
            "hard_light",
            "soft_light",
            "screen",
            "linear_dodge",
            "difference",
            "exclusion",
            "random"
          ]
        ],
        "blend": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_a",
        "latent_b",
        "operation",
        "blend"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Blend Latents",
    "display_name": "Blend Latents",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent",
    "output_node": false
  },
  "Bus Node": {
    "input": {
      "required": {},
      "optional": {
        "bus": [
          "BUS"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "bus",
        "model",
        "clip",
        "vae",
        "positive",
        "negative"
      ]
    },
    "output": [
      "BUS",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "bus",
      "model",
      "clip",
      "vae",
      "positive",
      "negative"
    ],
    "name": "Bus Node",
    "display_name": "Bus Node",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "Cache Node": {
    "input": {
      "required": {
        "latent_suffix": [
          "STRING",
          {
            "default": "3468604_cache",
            "multiline": false
          }
        ],
        "image_suffix": [
          "STRING",
          {
            "default": "1789742_cache",
            "multiline": false
          }
        ],
        "conditioning_suffix": [
          "STRING",
          {
            "default": "39502043_cache",
            "multiline": false
          }
        ]
      },
      "optional": {
        "output_path": [
          "STRING",
          {
            "default": "/ComfyUI/custom_nodes/was-node-suite-comfyui/cache",
            "multiline": false
          }
        ],
        "latent": [
          "LATENT"
        ],
        "image": [
          "IMAGE"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_suffix",
        "image_suffix",
        "conditioning_suffix"
      ],
      "optional": [
        "output_path",
        "latent",
        "image",
        "conditioning"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "latent_filename",
      "image_filename",
      "conditioning_filename"
    ],
    "name": "Cache Node",
    "display_name": "Cache Node",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Checkpoint Loader": {
    "input": {
      "required": {
        "config_name": [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ]
        ],
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Checkpoint Loader",
    "display_name": "Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Checkpoint Loader (Simple)": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Checkpoint Loader (Simple)",
    "display_name": "Checkpoint Loader (Simple)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "CLIPTextEncode (NSP)": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "conditioning",
      "parsed_text",
      "raw_text"
    ],
    "name": "CLIPTextEncode (NSP)",
    "display_name": "CLIPTextEncode (NSP)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Conditioning",
    "output_node": true
  },
  "CLIP Input Switch": {
    "input": {
      "required": {
        "clip_a": [
          "CLIP"
        ],
        "clip_b": [
          "CLIP"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_a",
        "clip_b",
        "boolean"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIP Input Switch",
    "display_name": "CLIP Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "CLIP Vision Input Switch": {
    "input": {
      "required": {
        "clip_vision_a": [
          "CLIP_VISION"
        ],
        "clip_vision_b": [
          "CLIP_VISION"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision_a",
        "clip_vision_b",
        "boolean"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIP Vision Input Switch",
    "display_name": "CLIP Vision Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Conditioning Input Switch": {
    "input": {
      "required": {
        "conditioning_a": [
          "CONDITIONING"
        ],
        "conditioning_b": [
          "CONDITIONING"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_a",
        "conditioning_b",
        "boolean"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Conditioning Input Switch",
    "display_name": "Conditioning Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Constant Number": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float",
            "bool"
          ]
        ],
        "number": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "number_as_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "number"
      ],
      "optional": [
        "number_as_text"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Constant Number",
    "display_name": "Constant Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Create Grid Image": {
    "input": {
      "required": {
        "images_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/",
            "multiline": false
          }
        ],
        "pattern_glob": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "include_subfolders": [
          [
            "false",
            "true"
          ]
        ],
        "border_width": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "number_of_columns": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ],
        "max_cell_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 1280,
            "step": 1
          }
        ],
        "border_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_path",
        "pattern_glob",
        "include_subfolders",
        "border_width",
        "number_of_columns",
        "max_cell_size",
        "border_red",
        "border_green",
        "border_blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Grid Image",
    "display_name": "Create Grid Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Create Grid Image from Batch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "border_width": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "number_of_columns": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ],
        "max_cell_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 2048,
            "step": 1
          }
        ],
        "border_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "border_width",
        "number_of_columns",
        "max_cell_size",
        "border_red",
        "border_green",
        "border_blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Grid Image from Batch",
    "display_name": "Create Grid Image from Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Create Morph Image": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "still_image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph",
            "multiline": false
          }
        ],
        "filetype": [
          [
            "GIF",
            "APNG"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "transition_frames",
        "still_image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "output_path",
        "filename",
        "filetype"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image_a_pass",
      "image_b_pass",
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Morph Image",
    "display_name": "Create Morph Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "Create Morph Image from Path": {
    "input": {
      "required": {
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "still_image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "input_path": [
          "STRING",
          {
            "default": "./ComfyUI",
            "multiline": false
          }
        ],
        "input_pattern": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph",
            "multiline": false
          }
        ],
        "filetype": [
          [
            "GIF",
            "APNG"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "transition_frames",
        "still_image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "input_path",
        "input_pattern",
        "output_path",
        "filename",
        "filetype"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Morph Image from Path",
    "display_name": "Create Morph Image from Path",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "Create Video from Path": {
    "input": {
      "required": {
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "image_delay_sec": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0.01,
            "max": 60000.0,
            "step": 0.01
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 60.0,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1920,
            "step": 1
          }
        ],
        "input_path": [
          "STRING",
          {
            "default": "./ComfyUI/input",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "comfy_video",
            "multiline": false
          }
        ],
        "codec": [
          [
            "AVC1",
            "FFV1",
            "H264",
            "MP4V"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "transition_frames",
        "image_delay_sec",
        "fps",
        "max_size",
        "input_path",
        "output_path",
        "filename",
        "codec"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Video from Path",
    "display_name": "Create Video from Path",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "CLIPSeg Masking": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "clipseg_model": [
          "CLIPSEG_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ],
      "optional": [
        "clipseg_model"
      ]
    },
    "output": [
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MASK",
      "MASK_IMAGE"
    ],
    "name": "CLIPSeg Masking",
    "display_name": "CLIPSeg Masking",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "CLIPSeg Model Loader": {
    "input": {
      "required": {
        "model": [
          "STRING",
          {
            "default": "CIDAS/clipseg-rd64-refined",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "CLIPSEG_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "clipseg_model"
    ],
    "name": "CLIPSeg Model Loader",
    "display_name": "CLIPSeg Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "CLIPSeg Batch Masking": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "text_a": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_b": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "image_c": [
          "IMAGE"
        ],
        "image_d": [
          "IMAGE"
        ],
        "image_e": [
          "IMAGE"
        ],
        "image_f": [
          "IMAGE"
        ],
        "text_c": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_d": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_e": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_f": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "text_a",
        "text_b"
      ],
      "optional": [
        "image_c",
        "image_d",
        "image_e",
        "image_f",
        "text_c",
        "text_d",
        "text_e",
        "text_f"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGES_BATCH",
      "MASKS_BATCH",
      "MASK_IMAGES_BATCH"
    ],
    "name": "CLIPSeg Batch Masking",
    "display_name": "CLIPSeg Batch Masking",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Convert Masks to Images": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "Convert Masks to Images",
    "display_name": "Convert Masks to Images",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Control Net Model Input Switch": {
    "input": {
      "required": {
        "control_net_a": [
          "CONTROL_NET"
        ],
        "control_net_b": [
          "CONTROL_NET"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_a",
        "control_net_b",
        "boolean"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "Control Net Model Input Switch",
    "display_name": "Control Net Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Debug Number to Console": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ],
        "label": [
          "STRING",
          {
            "default": "Debug to Console",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "label"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NUMBER"
    ],
    "name": "Debug Number to Console",
    "display_name": "Debug Number to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Dictionary to Console": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ],
        "label": [
          "STRING",
          {
            "default": "Dictionary Output",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary",
        "label"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Dictionary to Console",
    "display_name": "Dictionary to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Diffusers Model Loader": {
    "input": {
      "required": {
        "model_path": [
          [
            "marigold-lcm-v1-0"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Diffusers Model Loader",
    "display_name": "Diffusers Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Diffusers Hub Model Down-Loader": {
    "input": {
      "required": {
        "repo_id": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "revision": [
          "STRING",
          {
            "default": "None",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "repo_id",
        "revision"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Diffusers Hub Model Down-Loader",
    "display_name": "Diffusers Hub Model Down-Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Export API": {
    "input": {
      "required": {
        "save_prompt_api": [
          [
            "true",
            "true"
          ]
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output/",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI_Prompt"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 2,
            "max": 9,
            "step": 1
          }
        ],
        "parse_text_tokens": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "save_prompt_api",
        "output_path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding",
        "parse_text_tokens"
      ],
      "hidden": [
        "prompt"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Export API",
    "display_name": "Export API",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Latent Input Switch": {
    "input": {
      "required": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_a",
        "latent_b",
        "boolean"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Input Switch",
    "display_name": "Latent Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Load Cache": {
    "input": {
      "required": {
        "latent_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "image_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "conditioning_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_path",
        "image_path",
        "conditioning_path"
      ]
    },
    "output": [
      "LATENT",
      "IMAGE",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "IMAGE",
      "CONDITIONING"
    ],
    "name": "Load Cache",
    "display_name": "Load Cache",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Logic Boolean": {
    "input": {
      "required": {
        "boolean": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN",
      "NUMBER",
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "BOOLEAN",
      "NUMBER",
      "INT",
      "FLOAT"
    ],
    "name": "Logic Boolean",
    "display_name": "Logic Boolean",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Boolean Primitive": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Boolean Primitive",
    "display_name": "Logic Boolean Primitive",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison OR": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison OR",
    "display_name": "Logic Comparison OR",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison AND": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison AND",
    "display_name": "Logic Comparison AND",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison XOR": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison XOR",
    "display_name": "Logic Comparison XOR",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic NOT": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic NOT",
    "display_name": "Logic NOT",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Lora Loader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "NAME_STRING"
    ],
    "name": "Lora Loader",
    "display_name": "Lora Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Hex to HSL": {
    "input": {
      "required": {
        "hex_color": [
          "STRING",
          {
            "default": "#FF0000"
          }
        ]
      },
      "optional": {
        "include_alpha": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hex_color"
      ],
      "optional": [
        "include_alpha"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "hue",
      "saturation",
      "lightness",
      "alpha",
      "hsl"
    ],
    "name": "Hex to HSL",
    "display_name": "Hex to HSL",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "HSL to Hex": {
    "input": {
      "required": {
        "hsl_color": [
          "STRING",
          {
            "default": "hsl(0, 100%, 50%)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hsl_color"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "hex_color"
    ],
    "name": "HSL to Hex",
    "display_name": "HSL to Hex",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "Image SSAO (Ambient Occlusion)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "depth_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "min": 0.0,
            "max": 5.0,
            "default": 1.0,
            "step": 0.01
          }
        ],
        "radius": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 30,
            "step": 0.01
          }
        ],
        "ao_blur": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 2.5,
            "step": 0.01
          }
        ],
        "specular_threshold": [
          "INT",
          {
            "min": 0,
            "max": 255,
            "default": 25,
            "step": 1
          }
        ],
        "enable_specular_masking": [
          [
            "True",
            "False"
          ]
        ],
        "tile_size": [
          "INT",
          {
            "min": 1,
            "max": 512,
            "default": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "depth_images",
        "strength",
        "radius",
        "ao_blur",
        "specular_threshold",
        "enable_specular_masking",
        "tile_size"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "composited_images",
      "ssao_images",
      "specular_mask_images"
    ],
    "name": "Image SSAO (Ambient Occlusion)",
    "display_name": "Image SSAO (Ambient Occlusion)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image SSDO (Direct Occlusion)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "depth_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "min": 0.0,
            "max": 5.0,
            "default": 1.0,
            "step": 0.01
          }
        ],
        "radius": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 30,
            "step": 0.01
          }
        ],
        "specular_threshold": [
          "INT",
          {
            "min": 0,
            "max": 255,
            "default": 128,
            "step": 1
          }
        ],
        "colored_occlusion": [
          [
            "True",
            "False"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "depth_images",
        "strength",
        "radius",
        "specular_threshold",
        "colored_occlusion"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "composited_images",
      "ssdo_images",
      "ssdo_image_masks",
      "light_source_image_masks"
    ],
    "name": "Image SSDO (Direct Occlusion)",
    "display_name": "Image SSDO (Direct Occlusion)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Analyze": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Black White Levels",
            "RGB Levels"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Analyze",
    "display_name": "Image Analyze",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Image Aspect Ratio": {
    "input": {
      "required": {},
      "optional": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "NUMBER"
        ],
        "height": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "NUMBER",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "aspect_number",
      "aspect_float",
      "is_landscape_bool",
      "aspect_ratio_common",
      "aspect_type"
    ],
    "name": "Image Aspect Ratio",
    "display_name": "Image Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Image Batch": {
    "input": {
      "required": {},
      "optional": {
        "images_a": [
          "IMAGE"
        ],
        "images_b": [
          "IMAGE"
        ],
        "images_c": [
          "IMAGE"
        ],
        "images_d": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "images_a",
        "images_b",
        "images_c",
        "images_d"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Batch",
    "display_name": "Image Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blank": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "red",
        "green",
        "blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Blank",
    "display_name": "Image Blank",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blend by Mask": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "mask",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Blend by Mask",
    "display_name": "Image Blend by Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blend": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Blend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blending Mode": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "mode": [
          [
            "add",
            "color",
            "color_burn",
            "color_dodge",
            "darken",
            "difference",
            "exclusion",
            "hard_light",
            "hue",
            "lighten",
            "multiply",
            "overlay",
            "screen",
            "soft_light"
          ]
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "mode",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Blending Mode",
    "display_name": "Image Blending Mode",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Bloom Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 10,
            "min": 0.0,
            "max": 1024,
            "step": 0.1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "radius",
        "intensity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Bloom Filter",
    "display_name": "Image Bloom Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Canny Filter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "enable_threshold": [
          [
            "false",
            "true"
          ]
        ],
        "threshold_low": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "threshold_high": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "enable_threshold",
        "threshold_low",
        "threshold_high"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Canny Filter",
    "display_name": "Image Canny Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Chromatic Aberration": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red_offset": [
          "INT",
          {
            "default": 2,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "green_offset": [
          "INT",
          {
            "default": -1,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "blue_offset": [
          "INT",
          {
            "default": 1,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "fade_radius": [
          "INT",
          {
            "default": 12,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red_offset",
        "green_offset",
        "blue_offset",
        "intensity",
        "fade_radius"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Chromatic Aberration",
    "display_name": "Image Chromatic Aberration",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Color Palette": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 16,
            "min": 8,
            "max": 256,
            "step": 1
          }
        ],
        "mode": [
          [
            "Chart",
            "back_to_back"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "LIST"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "color_palettes"
    ],
    "name": "Image Color Palette",
    "display_name": "Image Color Palette",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Image Crop Face": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_padding_factor": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "cascade_xml": [
          [
            "lbpcascade_animeface.xml",
            "haarcascade_frontalface_default.xml",
            "haarcascade_frontalface_alt.xml",
            "haarcascade_frontalface_alt2.xml",
            "haarcascade_frontalface_alt_tree.xml",
            "haarcascade_profileface.xml",
            "haarcascade_upperbody.xml",
            "haarcascade_eye.xml"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_padding_factor",
        "cascade_xml"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Face",
    "display_name": "Image Crop Face",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Crop Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "top",
        "left",
        "right",
        "bottom"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Location",
    "display_name": "Image Crop Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Crop Square Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "max": 24576,
            "min": 0,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "max": 24576,
            "min": 0,
            "step": 1
          }
        ],
        "size": [
          "INT",
          {
            "default": 256,
            "max": 4096,
            "min": 5,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "x",
        "y",
        "size"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Square Location",
    "display_name": "Image Crop Square Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Displacement Warp": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "displacement_maps": [
          "IMAGE"
        ],
        "amplitude": [
          "FLOAT",
          {
            "default": 25.0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "displacement_maps",
        "amplitude"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Displacement Warp",
    "display_name": "Image Displacement Warp",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Lucy Sharpen": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "iterations": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "iterations",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Lucy Sharpen",
    "display_name": "Image Lucy Sharpen",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Paste Face": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK_IMAGE"
    ],
    "name": "Image Paste Face",
    "display_name": "Image Paste Face",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Paste Crop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Paste Crop",
    "display_name": "Image Paste Crop",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Paste Crop by Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "top",
        "left",
        "right",
        "bottom",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Paste Crop by Location",
    "display_name": "Image Paste Crop by Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Pixelate": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "pixelation_size": [
          "FLOAT",
          {
            "default": 164,
            "min": 16,
            "max": 480,
            "step": 1
          }
        ],
        "num_colors": [
          "FLOAT",
          {
            "default": 16,
            "min": 2,
            "max": 256,
            "step": 1
          }
        ],
        "init_mode": [
          [
            "k-means++",
            "random",
            "none"
          ]
        ],
        "max_iterations": [
          "FLOAT",
          {
            "default": 100,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "False",
            "True"
          ]
        ],
        "dither_mode": [
          [
            "FloydSteinberg",
            "Ordered"
          ]
        ]
      },
      "optional": {
        "color_palettes": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "color_palette_mode": [
          [
            "Brightness",
            "BrightnessAndTonal",
            "Linear",
            "Tonal"
          ]
        ],
        "reverse_palette": [
          [
            "False",
            "True"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "pixelation_size",
        "num_colors",
        "init_mode",
        "max_iterations",
        "dither",
        "dither_mode"
      ],
      "optional": [
        "color_palettes",
        "color_palette_mode",
        "reverse_palette"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Pixelate",
    "display_name": "Image Pixelate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Power Noise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 10.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "attenuation": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 10.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "noise_type": [
          [
            "grey",
            "white",
            "pink",
            "blue",
            "green",
            "mix"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frequency",
        "attenuation",
        "noise_type",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Power Noise",
    "display_name": "Image Power Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Dragan Photography Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 6.0,
            "step": 0.01
          }
        ],
        "highpass_radius": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.01
          }
        ],
        "highpass_samples": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 6.0,
            "step": 1
          }
        ],
        "highpass_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 3.0,
            "step": 0.01
          }
        ],
        "colorize": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "saturation",
        "contrast",
        "brightness",
        "sharpness",
        "highpass_radius",
        "highpass_samples",
        "highpass_strength",
        "colorize"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Dragan Photography Filter",
    "display_name": "Image Dragan Photography Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Edge Detection Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "normal",
            "laplacian"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Edge Detection Filter",
    "display_name": "Image Edge Detection Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Film Grain": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "density": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "highlights": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 255.0,
            "step": 0.01
          }
        ],
        "supersample_factor": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 8,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "density",
        "intensity",
        "highlights",
        "supersample_factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Film Grain",
    "display_name": "Image Film Grain",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Filter Adjustments": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "gaussian_blur": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1024.0,
            "step": 0.1
          }
        ],
        "edge_enhance": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "detail_enhance": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "brightness",
        "contrast",
        "saturation",
        "sharpness",
        "blur",
        "gaussian_blur",
        "edge_enhance",
        "detail_enhance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Filter Adjustments",
    "display_name": "Image Filter Adjustments",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Flip": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "horizontal",
            "vertical"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Flip",
    "display_name": "Image Flip",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Gradient Map": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "gradient_image": [
          "IMAGE"
        ],
        "flip_left_right": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "gradient_image",
        "flip_left_right"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Gradient Map",
    "display_name": "Image Gradient Map",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Generate Gradient": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "direction": [
          [
            "horizontal",
            "vertical"
          ]
        ],
        "tolerance": [
          "INT",
          {
            "default": 0,
            "max": 255,
            "min": 0,
            "step": 1
          }
        ],
        "gradient_stops": [
          "STRING",
          {
            "default": "0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "direction",
        "tolerance",
        "gradient_stops"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Generate Gradient",
    "display_name": "Image Generate Gradient",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate",
    "output_node": false
  },
  "Image High Pass Filter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "radius": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 500,
            "step": 1
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "color_output": [
          [
            "true",
            "false"
          ]
        ],
        "neutral_background": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "radius",
        "strength",
        "color_output",
        "neutral_background"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image High Pass Filter",
    "display_name": "Image High Pass Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image History Loader": {
    "input": {
      "required": {
        "image": [
          [
            "No History"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "filename_text"
    ],
    "name": "Image History Loader",
    "display_name": "Image History Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/History",
    "output_node": false
  },
  "Image Input Switch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "boolean"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Input Switch",
    "display_name": "Image Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Image Levels Adjustment": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "black_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "mid_level": [
          "FLOAT",
          {
            "default": 127.5,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "white_level": [
          "FLOAT",
          {
            "default": 255,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "black_level",
        "mid_level",
        "white_level"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Levels Adjustment",
    "display_name": "Image Levels Adjustment",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Load": {
    "input": {
      "required": {
        "image_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/example.png",
            "multiline": false
          }
        ],
        "RGBA": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "filename_text_extension": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_path",
        "RGBA"
      ],
      "optional": [
        "filename_text_extension"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "filename_text"
    ],
    "name": "Image Load",
    "display_name": "Image Load",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Image Median Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "diameter": [
          "INT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 255,
            "step": 1
          }
        ],
        "sigma_color": [
          "FLOAT",
          {
            "default": 10.0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "sigma_space": [
          "FLOAT",
          {
            "default": 10.0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "diameter",
        "sigma_color",
        "sigma_space"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Median Filter",
    "display_name": "Image Median Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Mix RGB Channels": {
    "input": {
      "required": {
        "red_channel": [
          "IMAGE"
        ],
        "green_channel": [
          "IMAGE"
        ],
        "blue_channel": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "red_channel",
        "green_channel",
        "blue_channel"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Mix RGB Channels",
    "display_name": "Image Mix RGB Channels",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Monitor Effects Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Digital Distortion",
            "Signal Distortion",
            "TV Distortion"
          ]
        ],
        "amplitude": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "offset": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "amplitude",
        "offset"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Monitor Effects Filter",
    "display_name": "Image Monitor Effects Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Nova Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amplitude": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 3.14,
            "min": 0.0,
            "max": 100.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amplitude",
        "frequency"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Nova Filter",
    "display_name": "Image Nova Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Padding": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "feathering": [
          "INT",
          {
            "default": 120,
            "min": 0,
            "max": 2048,
            "step": 1
          }
        ],
        "feather_second_pass": [
          [
            "true",
            "false"
          ]
        ],
        "left_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "right_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "top_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "bottom_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "feathering",
        "feather_second_pass",
        "left_padding",
        "right_padding",
        "top_padding",
        "bottom_padding"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Padding",
    "display_name": "Image Padding",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Perlin Noise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 2048,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 2048,
            "min": 64,
            "step": 1
          }
        ],
        "scale": [
          "INT",
          {
            "default": 100,
            "max": 2048,
            "min": 2,
            "step": 1
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 4,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "persistence": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "scale",
        "octaves",
        "persistence",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Perlin Noise",
    "display_name": "Image Perlin Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Rembg (Remove Background)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "transparency": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model": [
          [
            "u2net",
            "u2netp",
            "u2net_human_seg",
            "silueta",
            "isnet-general-use",
            "isnet-anime"
          ]
        ],
        "post_processing": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "only_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting_foreground_threshold": [
          "INT",
          {
            "default": 240,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_background_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_erode_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "background_color": [
          [
            "none",
            "black",
            "white",
            "magenta",
            "chroma green",
            "chroma blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "transparency",
        "model",
        "post_processing",
        "only_mask",
        "alpha_matting",
        "alpha_matting_foreground_threshold",
        "alpha_matting_background_threshold",
        "alpha_matting_erode_size",
        "background_color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Rembg (Remove Background)",
    "display_name": "Image Rembg (Remove Background)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "Image Perlin Power Fractal": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 8192,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 8192,
            "min": 64,
            "step": 1
          }
        ],
        "scale": [
          "INT",
          {
            "default": 100,
            "max": 2048,
            "min": 2,
            "step": 1
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 4,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "persistence": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "lacunarity": [
          "FLOAT",
          {
            "default": 2.0,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 2.0,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "scale",
        "octaves",
        "persistence",
        "lacunarity",
        "exponent",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Perlin Power Fractal",
    "display_name": "Image Perlin Power Fractal",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Remove Background (Alpha)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "background",
            "foreground"
          ]
        ],
        "threshold": [
          "INT",
          {
            "default": 127,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_tolerance": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "threshold",
        "threshold_tolerance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Remove Background (Alpha)",
    "display_name": "Image Remove Background (Alpha)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Remove Color": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "target_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "target_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "target_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "clip_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "target_red",
        "target_green",
        "target_blue",
        "replace_red",
        "replace_green",
        "replace_blue",
        "clip_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Remove Color",
    "display_name": "Image Remove Color",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Resize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "rescale",
            "resize"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "resampling": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "resize_width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ],
        "resize_height": [
          "INT",
          {
            "default": 1536,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "supersample",
        "resampling",
        "rescale_factor",
        "resize_width",
        "resize_height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Resize",
    "display_name": "Image Resize",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Rotate": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "transpose",
            "internal"
          ]
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 360,
            "step": 90
          }
        ],
        "sampler": [
          [
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "rotation",
        "sampler"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Rotate",
    "display_name": "Image Rotate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Rotate Hue": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "hue_shift": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "hue_shift"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Rotate Hue",
    "display_name": "Image Rotate Hue",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Send HTTP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "url": [
          "STRING",
          {
            "default": "example.com"
          }
        ],
        "method_type": [
          [
            "post",
            "put",
            "patch"
          ],
          {
            "default": "post"
          }
        ],
        "request_field_name": [
          "STRING",
          {
            "default": "image"
          }
        ]
      },
      "optional": {
        "additional_request_headers": [
          "DICT"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "url",
        "method_type",
        "request_field_name"
      ],
      "optional": [
        "additional_request_headers"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "status_code",
      "result_text"
    ],
    "name": "Image Send HTTP",
    "display_name": "Image Send HTTP",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Image Save": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "output_path": [
          "STRING",
          {
            "default": "[time(%Y-%m-%d)]",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 9,
            "step": 1
          }
        ],
        "filename_number_start": [
          [
            "false",
            "true"
          ]
        ],
        "extension": [
          [
            "png",
            "jpg",
            "jpeg",
            "gif",
            "tiff",
            "webp",
            "bmp"
          ]
        ],
        "dpi": [
          "INT",
          {
            "default": 300,
            "min": 1,
            "max": 2400,
            "step": 1
          }
        ],
        "quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "optimize_image": [
          [
            "true",
            "false"
          ]
        ],
        "lossless_webp": [
          [
            "false",
            "true"
          ]
        ],
        "overwrite_mode": [
          [
            "false",
            "prefix_as_filename"
          ]
        ],
        "show_history": [
          [
            "false",
            "true"
          ]
        ],
        "show_history_by_prefix": [
          [
            "true",
            "false"
          ]
        ],
        "embed_workflow": [
          [
            "true",
            "false"
          ]
        ],
        "show_previews": [
          [
            "true",
            "false"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "output_path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding",
        "filename_number_start",
        "extension",
        "dpi",
        "quality",
        "optimize_image",
        "lossless_webp",
        "overwrite_mode",
        "show_history",
        "show_history_by_prefix",
        "embed_workflow",
        "show_previews"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "files"
    ],
    "name": "Image Save",
    "display_name": "Image Save",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Image Seamless Texture": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "blending": [
          "FLOAT",
          {
            "default": 0.4,
            "max": 1.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "tiled": [
          [
            "true",
            "false"
          ]
        ],
        "tiles": [
          "INT",
          {
            "default": 2,
            "max": 6,
            "min": 2,
            "step": 2
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "blending",
        "tiled",
        "tiles"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Seamless Texture",
    "display_name": "Image Seamless Texture",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Select Channel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Select Channel",
    "display_name": "Image Select Channel",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Select Color": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "variance": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red",
        "green",
        "blue",
        "variance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Select Color",
    "display_name": "Image Select Color",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Shadows and Highlights": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "shadow_threshold": [
          "FLOAT",
          {
            "default": 75,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "shadow_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": -12.0,
            "max": 12.0,
            "step": 0.1
          }
        ],
        "shadow_smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "highlight_threshold": [
          "FLOAT",
          {
            "default": 175,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "highlight_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -12.0,
            "max": 12.0,
            "step": 0.1
          }
        ],
        "highlight_smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "simplify_isolation": [
          "FLOAT",
          {
            "default": 0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "shadow_threshold",
        "shadow_factor",
        "shadow_smoothing",
        "highlight_threshold",
        "highlight_factor",
        "highlight_smoothing",
        "simplify_isolation"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "shadow_map",
      "highlight_map"
    ],
    "name": "Image Shadows and Highlights",
    "display_name": "Image Shadows and Highlights",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Size to Number": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "NUMBER",
      "NUMBER",
      "FLOAT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width_num",
      "height_num",
      "width_float",
      "height_float",
      "width_int",
      "height_int"
    ],
    "name": "Image Size to Number",
    "display_name": "Image Size to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Image Stitch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "stitch": [
          [
            "top",
            "left",
            "bottom",
            "right"
          ]
        ],
        "feathering": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 2048,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "stitch",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Stitch",
    "display_name": "Image Stitch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Style Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "style": [
          [
            "1977",
            "aden",
            "brannan",
            "brooklyn",
            "clarendon",
            "earlybird",
            "fairy tale",
            "gingham",
            "hudson",
            "inkwell",
            "kelvin",
            "lark",
            "lofi",
            "maven",
            "mayfair",
            "moon",
            "nashville",
            "perpetua",
            "reyes",
            "rise",
            "slumber",
            "stinson",
            "toaster",
            "valencia",
            "walden",
            "willow",
            "xpro2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "style"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Style Filter",
    "display_name": "Image Style Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Threshold": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Threshold",
    "display_name": "Image Threshold",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Tiled": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "num_tiles": [
          "INT",
          {
            "default": 4,
            "max": 64,
            "min": 2,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "num_tiles"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "Image Tiled",
    "display_name": "Image Tiled",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Transpose": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_overlay": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "X": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "Y": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_overlay",
        "width",
        "height",
        "X",
        "Y",
        "rotation",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Transpose",
    "display_name": "Image Transpose",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image fDOF Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "depth": [
          "IMAGE"
        ],
        "mode": [
          [
            "mock",
            "gaussian",
            "box"
          ]
        ],
        "radius": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 128,
            "step": 1
          }
        ],
        "samples": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "depth",
        "mode",
        "radius",
        "samples"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image fDOF Filter",
    "display_name": "Image fDOF Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image to Latent Mask": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Image to Latent Mask",
    "display_name": "Image to Latent Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Image to Noise": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "num_colors": [
          "INT",
          {
            "default": 16,
            "max": 256,
            "min": 2,
            "step": 2
          }
        ],
        "black_mix": [
          "INT",
          {
            "default": 0,
            "max": 20,
            "min": 0,
            "step": 1
          }
        ],
        "gaussian_mix": [
          "FLOAT",
          {
            "default": 0.0,
            "max": 1024,
            "min": 0,
            "step": 0.1
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 1.0,
            "max": 2.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "output_mode": [
          [
            "batch",
            "list"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "num_colors",
        "black_mix",
        "gaussian_mix",
        "brightness",
        "output_mode",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image to Noise",
    "display_name": "Image to Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image to Seed": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "INT"
    ],
    "name": "Image to Seed",
    "display_name": "Image to Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Images to RGB": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Images to RGB",
    "display_name": "Images to RGB",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Images to Linear": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Images to Linear",
    "display_name": "Images to Linear",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Integer place counter": {
    "input": {
      "required": {
        "int_input": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int_input"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT_PLACES"
    ],
    "name": "Integer place counter",
    "display_name": "Integer place counter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Integer",
    "output_node": false
  },
  "Image Voronoi Noise Filter": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "density": [
          "INT",
          {
            "default": 50,
            "max": 256,
            "min": 10,
            "step": 2
          }
        ],
        "modulator": [
          "INT",
          {
            "default": 0,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "flat": [
          [
            "False",
            "True"
          ]
        ],
        "RGB_output": [
          [
            "True",
            "False"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "density",
        "modulator",
        "seed"
      ],
      "optional": [
        "flat",
        "RGB_output"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Voronoi Noise Filter",
    "display_name": "Image Voronoi Noise Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "KSampler (WAS)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "SEED"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler (WAS)",
    "display_name": "KSampler (WAS)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Sampling",
    "output_node": false
  },
  "KSampler Cycle": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "tiled_vae": [
          [
            "disable",
            "enable"
          ]
        ],
        "latent_upscale": [
          [
            "disable",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 8.0,
            "step": 0.1
          }
        ],
        "upscale_cycles": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 12,
            "step": 1
          }
        ],
        "starting_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cycle_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scale_denoise": [
          [
            "enable",
            "disable"
          ]
        ],
        "scale_sampling": [
          [
            "bilinear",
            "bicubic",
            "nearest",
            "lanczos"
          ]
        ],
        "vae": [
          "VAE"
        ]
      },
      "optional": {
        "secondary_model": [
          "MODEL"
        ],
        "secondary_start_cycle": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 16,
            "step": 1
          }
        ],
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "processor_model": [
          "UPSCALE_MODEL"
        ],
        "pos_additive": [
          "CONDITIONING"
        ],
        "neg_additive": [
          "CONDITIONING"
        ],
        "pos_add_mode": [
          [
            "increment",
            "decrement"
          ]
        ],
        "pos_add_strength": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "pos_add_strength_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "pos_add_strength_cutoff": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "neg_add_mode": [
          [
            "increment",
            "decrement"
          ]
        ],
        "neg_add_strength": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "neg_add_strength_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "neg_add_strength_cutoff": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "sharpen_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "steps_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "steps_control": [
          [
            "decrement",
            "increment"
          ]
        ],
        "steps_scaling_value": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "steps_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 4,
            "max": 1000,
            "step": 1
          }
        ],
        "denoise_cutoff": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "tiled_vae",
        "latent_upscale",
        "upscale_factor",
        "upscale_cycles",
        "starting_denoise",
        "cycle_denoise",
        "scale_denoise",
        "scale_sampling",
        "vae"
      ],
      "optional": [
        "secondary_model",
        "secondary_start_cycle",
        "upscale_model",
        "processor_model",
        "pos_additive",
        "neg_additive",
        "pos_add_mode",
        "pos_add_strength",
        "pos_add_strength_scaling",
        "pos_add_strength_cutoff",
        "neg_add_mode",
        "neg_add_strength",
        "neg_add_strength_scaling",
        "neg_add_strength_cutoff",
        "sharpen_strength",
        "sharpen_radius",
        "steps_scaling",
        "steps_control",
        "steps_scaling_value",
        "steps_cutoff",
        "denoise_cutoff"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent(s)"
    ],
    "name": "KSampler Cycle",
    "display_name": "KSampler Cycle",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Sampling",
    "output_node": false
  },
  "Latent Batch": {
    "input": {
      "required": {},
      "optional": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "latent_c": [
          "LATENT"
        ],
        "latent_d": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "latent_a",
        "latent_b",
        "latent_c",
        "latent_d"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent"
    ],
    "name": "Latent Batch",
    "display_name": "Latent Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent",
    "output_node": false
  },
  "Latent Noise Injection": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "noise_std": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "noise_std"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Noise Injection",
    "display_name": "Latent Noise Injection",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Generate",
    "output_node": false
  },
  "Latent Size to Number": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "NUMBER",
      "NUMBER",
      "FLOAT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "tensor_w_num",
      "tensor_h_num",
      "tensor_w_float",
      "tensor_h_float",
      "tensor_w_int",
      "tensor_h_int"
    ],
    "name": "Latent Size to Number",
    "display_name": "Latent Size to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Latent Upscale by Factor (WAS)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mode": [
          [
            "area",
            "bicubic",
            "bilinear",
            "nearest"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "align": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mode",
        "factor",
        "align"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Upscale by Factor (WAS)",
    "display_name": "Latent Upscale by Factor (WAS)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Transform",
    "output_node": false
  },
  "Load Image Batch": {
    "input": {
      "required": {
        "mode": [
          [
            "single_image",
            "incremental_image",
            "random"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 150000,
            "step": 1
          }
        ],
        "label": [
          "STRING",
          {
            "default": "Batch 001",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "allow_RGBA_output": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "filename_text_extension": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "seed",
        "index",
        "label",
        "path",
        "pattern",
        "allow_RGBA_output"
      ],
      "optional": [
        "filename_text_extension"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "filename_text"
    ],
    "name": "Load Image Batch",
    "display_name": "Load Image Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Load Text File": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path",
        "dictionary_name"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "DICT"
    ],
    "name": "Load Text File",
    "display_name": "Load Text File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Load Lora": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "NAME_STRING"
    ],
    "name": "Load Lora",
    "display_name": "Load Lora",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Lora Input Switch": {
    "input": {
      "required": {
        "model_a": [
          "MODEL"
        ],
        "clip_a": [
          "CLIP"
        ],
        "model_b": [
          "MODEL"
        ],
        "clip_b": [
          "CLIP"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_a",
        "clip_a",
        "model_b",
        "clip_b",
        "boolean"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Input Switch",
    "display_name": "Lora Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Masks Add": {
    "input": {
      "required": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks_a",
        "masks_b"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Masks Add",
    "display_name": "Masks Add",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Subtract": {
    "input": {
      "required": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks_a",
        "masks_b"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Masks Subtract",
    "display_name": "Masks Subtract",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Arbitrary Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "size",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Arbitrary Region",
    "display_name": "Mask Arbitrary Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Batch to Mask": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "batch_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "batch_number"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Mask Batch to Mask",
    "display_name": "Mask Batch to Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Batch": {
    "input": {
      "optional": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ],
        "masks_c": [
          "MASK"
        ],
        "masks_d": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "optional": [
        "masks_a",
        "masks_b",
        "masks_c",
        "masks_d"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "masks"
    ],
    "name": "Mask Batch",
    "display_name": "Mask Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Ceiling Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Ceiling Region",
    "display_name": "Mask Ceiling Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Dominant Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "padding"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Crop Dominant Region",
    "display_name": "Mask Crop Dominant Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Minority Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "padding"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Crop Minority Region",
    "display_name": "Mask Crop Minority Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Region": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "region_type": [
          [
            "dominant",
            "minority"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "region_type"
      ]
    },
    "output": [
      "MASK",
      "CROP_DATA",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "cropped_mask",
      "crop_data",
      "top_int",
      "left_int",
      "right_int",
      "bottom_int",
      "width_int",
      "height_int"
    ],
    "name": "Mask Crop Region",
    "display_name": "Mask Crop Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Paste Region": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "crop_mask": [
          "MASK"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "crop_mask",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "RESULT_MASK",
      "CROP_MASK"
    ],
    "name": "Mask Paste Region",
    "display_name": "Mask Paste Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Dilate Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "iterations"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Dilate Region",
    "display_name": "Mask Dilate Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Dominant Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Dominant Region",
    "display_name": "Mask Dominant Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Erode Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "iterations"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Erode Region",
    "display_name": "Mask Erode Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Fill Holes": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Fill Holes",
    "display_name": "Mask Fill Holes",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Floor Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Floor Region",
    "display_name": "Mask Floor Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Gaussian Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 1024,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "radius"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Gaussian Region",
    "display_name": "Mask Gaussian Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Invert": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Invert",
    "display_name": "Mask Invert",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Minority Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Minority Region",
    "display_name": "Mask Minority Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Rect Area": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "blur_radius"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Rect Area",
    "display_name": "Mask Rect Area",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Rect Area (Advanced)": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "image_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "image_width",
        "image_height",
        "blur_radius"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Rect Area (Advanced)",
    "display_name": "Mask Rect Area (Advanced)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Smooth Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 128.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "sigma"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Smooth Region",
    "display_name": "Mask Smooth Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Threshold Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "black_threshold": [
          "INT",
          {
            "default": 75,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "white_threshold": [
          "INT",
          {
            "default": 175,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "black_threshold",
        "white_threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Threshold Region",
    "display_name": "Mask Threshold Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Combine Regions": {
    "input": {
      "required": {
        "mask_a": [
          "MASK"
        ],
        "mask_b": [
          "MASK"
        ]
      },
      "optional": {
        "mask_c": [
          "MASK"
        ],
        "mask_d": [
          "MASK"
        ],
        "mask_e": [
          "MASK"
        ],
        "mask_f": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask_a",
        "mask_b"
      ],
      "optional": [
        "mask_c",
        "mask_d",
        "mask_e",
        "mask_f"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Masks Combine Regions",
    "display_name": "Masks Combine Regions",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Combine Batch": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Masks Combine Batch",
    "display_name": "Masks Combine Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "MiDaS Model Loader": {
    "input": {
      "required": {
        "midas_model": [
          [
            "DPT_Large",
            "DPT_Hybrid"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "midas_model"
      ]
    },
    "output": [
      "MIDAS_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "midas_model"
    ],
    "name": "MiDaS Model Loader",
    "display_name": "MiDaS Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "MiDaS Depth Approximation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "use_cpu": [
          [
            "false",
            "true"
          ]
        ],
        "midas_type": [
          [
            "DPT_Large",
            "DPT_Hybrid"
          ]
        ],
        "invert_depth": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "midas_model": [
          "MIDAS_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "use_cpu",
        "midas_type",
        "invert_depth"
      ],
      "optional": [
        "midas_model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "MiDaS Depth Approximation",
    "display_name": "MiDaS Depth Approximation",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "MiDaS Mask Image": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "use_cpu": [
          [
            "false",
            "true"
          ]
        ],
        "midas_model": [
          [
            "DPT_Large",
            "DPT_Hybrid",
            "DPT_Small"
          ]
        ],
        "remove": [
          [
            "background",
            "foregroud"
          ]
        ],
        "threshold": [
          [
            "false",
            "true"
          ]
        ],
        "threshold_low": [
          "FLOAT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_mid": [
          "FLOAT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_high": [
          "FLOAT",
          {
            "default": 210,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "background_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "use_cpu",
        "midas_model",
        "remove",
        "threshold",
        "threshold_low",
        "threshold_mid",
        "threshold_high",
        "smoothing",
        "background_red",
        "background_green",
        "background_blue"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "RESULT",
      "DEPTH"
    ],
    "name": "MiDaS Mask Image",
    "display_name": "MiDaS Mask Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "Model Input Switch": {
    "input": {
      "required": {
        "model_a": [
          "MODEL"
        ],
        "model_b": [
          "MODEL"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_a",
        "model_b",
        "boolean"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Model Input Switch",
    "display_name": "Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Counter": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float"
          ]
        ],
        "mode": [
          [
            "increment",
            "decrement",
            "increment_to_stop",
            "decrement_to_stop"
          ]
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "stop": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 99999,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "reset_bool": [
          "NUMBER"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "mode",
        "start",
        "stop",
        "step"
      ],
      "optional": [
        "reset_bool"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "number",
      "float",
      "int"
    ],
    "name": "Number Counter",
    "display_name": "Number Counter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Number Operation": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "operation": [
          [
            "addition",
            "subtraction",
            "division",
            "floor division",
            "multiplication",
            "exponentiation",
            "modulus",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "operation"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Operation",
    "display_name": "Number Operation",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Float": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "Number to Float",
    "display_name": "Number to Float",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number Input Switch": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "boolean"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Input Switch",
    "display_name": "Number Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Input Condition": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "return_boolean": [
          [
            "false",
            "true"
          ]
        ],
        "comparison": [
          [
            "and",
            "or",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal",
            "divisible by",
            "if A odd",
            "if A even",
            "if A prime",
            "factor of"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "return_boolean",
        "comparison"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Input Condition",
    "display_name": "Number Input Condition",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Multiple Of": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ],
        "multiple": [
          "INT",
          {
            "default": 8,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "multiple"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Multiple Of",
    "display_name": "Number Multiple Of",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Functions",
    "output_node": false
  },
  "Number PI": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NUMBER",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT"
    ],
    "name": "Number PI",
    "display_name": "Number PI",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Number to Int": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Number to Int",
    "display_name": "Number to Int",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Seed": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "SEED"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEED"
    ],
    "name": "Number to Seed",
    "display_name": "Number to Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to String": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Number to String",
    "display_name": "Number to String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Text": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Number to Text",
    "display_name": "Number to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Boolean To Text": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Boolean To Text",
    "display_name": "Boolean To Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Prompt Styles Selector": {
    "input": {
      "required": {
        "style": [
          [
            "None"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive_string",
      "negative_string"
    ],
    "name": "Prompt Styles Selector",
    "display_name": "Prompt Styles Selector",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Prompt Multiple Styles Selector": {
    "input": {
      "required": {
        "style1": [
          [
            "None"
          ]
        ],
        "style2": [
          [
            "None"
          ]
        ],
        "style3": [
          [
            "None"
          ]
        ],
        "style4": [
          [
            "None"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style1",
        "style2",
        "style3",
        "style4"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive_string",
      "negative_string"
    ],
    "name": "Prompt Multiple Styles Selector",
    "display_name": "Prompt Multiple Styles Selector",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Random Number": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float",
            "bool"
          ]
        ],
        "minimum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "maximum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "minimum",
        "maximum",
        "seed"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Random Number",
    "display_name": "Random Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Save Text File": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "path": [
          "STRING",
          {
            "default": "./ComfyUI/output/[time(%Y-%m-%d)]",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "file_extension": [
          "STRING",
          {
            "default": ".txt"
          }
        ],
        "encoding": [
          "STRING",
          {
            "default": "utf-8"
          }
        ],
        "filename_suffix": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding"
      ],
      "optional": [
        "file_extension",
        "encoding",
        "filename_suffix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Text File",
    "display_name": "Save Text File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "SEED",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "seed",
      "number",
      "float",
      "int"
    ],
    "name": "Seed",
    "display_name": "Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Tensor Batch to Image": {
    "input": {
      "required": {
        "images_batch": [
          "IMAGE"
        ],
        "batch_image_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_batch",
        "batch_image_number"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Tensor Batch to Image",
    "display_name": "Tensor Batch to Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Transform",
    "output_node": false
  },
  "BLIP Analyze Image": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "caption",
            "interrogate"
          ]
        ],
        "question": [
          "STRING",
          {
            "default": "What does the background consist of?",
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "blip_model": [
          "BLIP_MODEL"
        ]
      },
      "optional": {
        "min_length": [
          "INT",
          {
            "min": 1,
            "max": 1024,
            "default": 24
          }
        ],
        "max_length": [
          "INT",
          {
            "min": 2,
            "max": 1024,
            "default": 64
          }
        ],
        "num_beams": [
          "INT",
          {
            "min": 1,
            "max": 12,
            "default": 5
          }
        ],
        "no_repeat_ngram_size": [
          "INT",
          {
            "min": 1,
            "max": 12,
            "default": 3
          }
        ],
        "early_stopping": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "question",
        "blip_model"
      ],
      "optional": [
        "min_length",
        "max_length",
        "num_beams",
        "no_repeat_ngram_size",
        "early_stopping"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "FULL_CAPTIONS",
      "CAPTIONS"
    ],
    "name": "BLIP Analyze Image",
    "display_name": "BLIP Analyze Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/AI",
    "output_node": false
  },
  "SAM Model Loader": {
    "input": {
      "required": {
        "model_size": [
          [
            "ViT-H",
            "ViT-L",
            "ViT-B"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_size"
      ]
    },
    "output": [
      "SAM_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_MODEL"
    ],
    "name": "SAM Model Loader",
    "display_name": "SAM Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Parameters": {
    "input": {
      "required": {
        "points": [
          "STRING",
          {
            "default": "[128, 128]; [0, 0]",
            "multiline": false
          }
        ],
        "labels": [
          "STRING",
          {
            "default": "[1, 0]",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "points",
        "labels"
      ]
    },
    "output": [
      "SAM_PARAMETERS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_PARAMETERS"
    ],
    "name": "SAM Parameters",
    "display_name": "SAM Parameters",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Parameters Combine": {
    "input": {
      "required": {
        "sam_parameters_a": [
          "SAM_PARAMETERS"
        ],
        "sam_parameters_b": [
          "SAM_PARAMETERS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_parameters_a",
        "sam_parameters_b"
      ]
    },
    "output": [
      "SAM_PARAMETERS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_PARAMETERS"
    ],
    "name": "SAM Parameters Combine",
    "display_name": "SAM Parameters Combine",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Image Mask": {
    "input": {
      "required": {
        "sam_model": [
          "SAM_MODEL"
        ],
        "sam_parameters": [
          "SAM_PARAMETERS"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_model",
        "sam_parameters",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SAM Image Mask",
    "display_name": "SAM Image Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Samples Passthrough (Stat System)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "samples"
    ],
    "name": "Samples Passthrough (Stat System)",
    "display_name": "Samples Passthrough (Stat System)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": false
  },
  "String to Text": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "String to Text",
    "display_name": "String to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Image Bounds": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Image Bounds",
    "display_name": "Image Bounds",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Inset Image Bounds": {
    "input": {
      "required": {
        "image_bounds": [
          "IMAGE_BOUNDS"
        ],
        "inset_left": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_right": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_top": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_bottom": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_bounds",
        "inset_left",
        "inset_right",
        "inset_top",
        "inset_bottom"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Inset Image Bounds",
    "display_name": "Inset Image Bounds",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Blend": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "target_bounds": [
          "IMAGE_BOUNDS"
        ],
        "source": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "target_bounds",
        "source",
        "blend_factor",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Blend",
    "display_name": "Bounded Image Blend",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Blend with Mask": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "target_mask": [
          "MASK"
        ],
        "target_bounds": [
          "IMAGE_BOUNDS"
        ],
        "source": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "target_mask",
        "target_bounds",
        "source",
        "blend_factor",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Blend with Mask",
    "display_name": "Bounded Image Blend with Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Crop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_bounds": [
          "IMAGE_BOUNDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_bounds"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Crop",
    "display_name": "Bounded Image Crop",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Crop with Mask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "padding_left": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_right": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_top": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_bottom": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "return_list": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "padding_left",
        "padding_right",
        "padding_top",
        "padding_bottom"
      ],
      "optional": [
        "return_list"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "IMAGE_BOUNDS"
    ],
    "name": "Bounded Image Crop with Mask",
    "display_name": "Bounded Image Crop with Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Image Bounds to Console": {
    "input": {
      "required": {
        "image_bounds": [
          "IMAGE_BOUNDS"
        ],
        "label": [
          "STRING",
          {
            "default": "Debug to Console",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_bounds",
        "label"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Image Bounds to Console",
    "display_name": "Image Bounds to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Text Dictionary Update": {
    "input": {
      "required": {
        "dictionary_a": [
          "DICT"
        ],
        "dictionary_b": [
          "DICT"
        ]
      },
      "optional": {
        "dictionary_c": [
          "DICT"
        ],
        "dictionary_d": [
          "DICT"
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary_a",
        "dictionary_b"
      ],
      "optional": [
        "dictionary_c",
        "dictionary_d"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary Update",
    "display_name": "Text Dictionary Update",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Get": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ],
        "key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "default_value": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary",
        "key"
      ],
      "optional": [
        "default_value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Dictionary Get",
    "display_name": "Text Dictionary Get",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Convert": {
    "input": {
      "required": {
        "dictionary_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary_text"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary Convert",
    "display_name": "Text Dictionary Convert",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary New": {
    "input": {
      "required": {
        "key_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "key_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "key_1",
        "value_1"
      ],
      "optional": [
        "key_2",
        "value_2",
        "key_3",
        "value_3",
        "key_4",
        "value_4",
        "key_5",
        "value_5"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary New",
    "display_name": "Text Dictionary New",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Keys": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "dictionary"
      ],
      "optional": []
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text Dictionary Keys",
    "display_name": "Text Dictionary Keys",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary To Text": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "dictionary"
      ],
      "optional": []
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Dictionary To Text",
    "display_name": "Text Dictionary To Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Add Tokens": {
    "input": {
      "required": {
        "tokens": [
          "STRING",
          {
            "default": "[hello]: world",
            "multiline": true
          }
        ],
        "print_current_tokens": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "tokens",
        "print_current_tokens"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Text Add Tokens",
    "display_name": "Text Add Tokens",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": true
  },
  "Text Add Token by Input": {
    "input": {
      "required": {
        "token_name": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "token_value": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "print_current_tokens": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "token_name",
        "token_value",
        "print_current_tokens"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Text Add Token by Input",
    "display_name": "Text Add Token by Input",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": true
  },
  "Text Compare": {
    "input": {
      "required": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mode": [
          [
            "similarity",
            "difference"
          ]
        ],
        "tolerance": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_a",
        "text_b",
        "mode",
        "tolerance"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "BOOLEAN",
      "NUMBER",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT_A_PASS",
      "TEXT_B_PASS",
      "BOOLEAN",
      "SCORE_NUMBER",
      "COMPARISON_TEXT"
    ],
    "name": "Text Compare",
    "display_name": "Text Compare",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Concatenate": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": ", "
          }
        ],
        "clean_whitespace": [
          [
            "true",
            "false"
          ]
        ]
      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter",
        "clean_whitespace"
      ],
      "optional": [
        "text_a",
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Concatenate",
    "display_name": "Text Concatenate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text File History Loader": {
    "input": {
      "required": {
        "file": [
          [
            "No History"
          ]
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file",
        "dictionary_name"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "DICT"
    ],
    "name": "Text File History Loader",
    "display_name": "Text File History Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/History",
    "output_node": false
  },
  "Text Find and Replace by Dictionary": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "dictionary": [
          "DICT"
        ],
        "replacement_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "dictionary",
        "replacement_key",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Find and Replace by Dictionary",
    "display_name": "Text Find and Replace by Dictionary",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find and Replace Input": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "find": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "replace": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int"
    ],
    "name": "Text Find and Replace Input",
    "display_name": "Text Find and Replace Input",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find and Replace": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "find": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int"
    ],
    "name": "Text Find and Replace",
    "display_name": "Text Find and Replace",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "substring": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "substring",
        "pattern"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "found"
    ],
    "name": "Text Find",
    "display_name": "Text Find",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Input Switch": {
    "input": {
      "required": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_a",
        "text_b",
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Input Switch",
    "display_name": "Text Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Text List": {
    "input": {
      "required": {},
      "optional": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_e": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_f": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_g": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text_a",
        "text_b",
        "text_c",
        "text_d",
        "text_e",
        "text_f",
        "text_g"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text List",
    "display_name": "Text List",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text List Concatenate": {
    "input": {
      "required": {},
      "optional": {
        "list_a": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_b": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_c": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_d": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "list_a",
        "list_b",
        "list_c",
        "list_d"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text List Concatenate",
    "display_name": "Text List Concatenate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text List to Text": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": ", "
          }
        ],
        "text_list": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter",
        "text_list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text List to Text",
    "display_name": "Text List to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Load Line From File": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": false
          }
        ],
        "label": [
          "STRING",
          {
            "default": "TextBatch",
            "multiline": false
          }
        ],
        "mode": [
          [
            "automatic",
            "index"
          ]
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ]
      },
      "optional": {
        "multiline_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path",
        "dictionary_name",
        "label",
        "mode",
        "index"
      ],
      "optional": [
        "multiline_text"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "line_text",
      "dictionary"
    ],
    "name": "Text Load Line From File",
    "display_name": "Text Load Line From File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Multiline": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Multiline",
    "display_name": "Text Multiline",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Multiline (Code Compatible)": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Multiline (Code Compatible)",
    "display_name": "Text Multiline (Code Compatible)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Parse A1111 Embeddings": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse A1111 Embeddings",
    "display_name": "Text Parse A1111 Embeddings",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Parse",
    "output_node": false
  },
  "Text Parse Noodle Soup Prompts": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse Noodle Soup Prompts",
    "display_name": "Text Parse Noodle Soup Prompts",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Parse",
    "output_node": true
  },
  "Text Parse Tokens": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse Tokens",
    "display_name": "Text Parse Tokens",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": false
  },
  "Text Random Line": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Random Line",
    "display_name": "Text Random Line",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Random Prompt": {
    "input": {
      "required": {
        "search_seed": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "search_seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Random Prompt",
    "display_name": "Text Random Prompt",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "text_b": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_c": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_d": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT",
      "TEXT_B",
      "TEXT_C",
      "TEXT_D"
    ],
    "name": "Text String",
    "display_name": "Text String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Contains": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "sub_text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "case_insensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "sub_text"
      ],
      "optional": [
        "case_insensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Text Contains",
    "display_name": "Text Contains",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Text Shuffle": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Shuffle",
    "display_name": "Text Shuffle",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text Sort": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ", ",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "separator"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Sort",
    "display_name": "Text Sort",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to Conditioning": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Text to Conditioning",
    "display_name": "Text to Conditioning",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to Console": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "label": [
          "STRING",
          {
            "default": "Text Output",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "label"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text to Console",
    "display_name": "Text to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Text to Number": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NUMBER"
    ],
    "name": "Text to Number",
    "display_name": "Text to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text to String",
    "display_name": "Text to String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text String Truncate": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "truncate_by": [
          [
            "characters",
            "words"
          ]
        ],
        "truncate_from": [
          [
            "end",
            "beginning"
          ]
        ],
        "truncate_to": [
          "INT",
          {
            "default": 10,
            "min": -99999999,
            "max": 99999999,
            "step": 1
          }
        ]
      },
      "optional": {
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "truncate_by",
        "truncate_from",
        "truncate_to"
      ],
      "optional": [
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT",
      "TEXT_B",
      "TEXT_C",
      "TEXT_D"
    ],
    "name": "Text String Truncate",
    "display_name": "Text String Truncate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "True Random.org Number Generator": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "default": "00000000-0000-0000-0000-000000000000",
            "multiline": false
          }
        ],
        "minimum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "maximum": [
          "FLOAT",
          {
            "default": 10000000,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "mode": [
          [
            "random",
            "fixed"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "minimum",
        "maximum",
        "mode"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "True Random.org Number Generator",
    "display_name": "True Random.org Number Generator",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "unCLIP Checkpoint Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION",
      "NAME_STRING"
    ],
    "name": "unCLIP Checkpoint Loader",
    "display_name": "unCLIP Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Upscale Model Loader": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "UPSCALE_MODEL",
      "MODEL_NAME_TEXT"
    ],
    "name": "Upscale Model Loader",
    "display_name": "Upscale Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Upscale Model Switch": {
    "input": {
      "required": {
        "upscale_model_a": [
          "UPSCALE_MODEL"
        ],
        "upscale_model_b": [
          "UPSCALE_MODEL"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model_a",
        "upscale_model_b",
        "boolean"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "Upscale Model Switch",
    "display_name": "Upscale Model Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Write to GIF": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "/ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph_writer",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "transition_frames",
        "image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "output_path",
        "filename"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image_pass",
      "filepath_text",
      "filename_text"
    ],
    "name": "Write to GIF",
    "display_name": "Write to GIF",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation/Writer",
    "output_node": false
  },
  "Write to Video": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "image_delay_sec": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 60.0,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1920,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "comfy_writer",
            "multiline": false
          }
        ],
        "codec": [
          [
            "AVC1",
            "FFV1",
            "H264",
            "MP4V"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "transition_frames",
        "image_delay_sec",
        "fps",
        "max_size",
        "output_path",
        "filename",
        "codec"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE_PASS",
      "filepath_text",
      "filename_text"
    ],
    "name": "Write to Video",
    "display_name": "Write to Video",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation/Writer",
    "output_node": false
  },
  "VAE Input Switch": {
    "input": {
      "required": {
        "vae_a": [
          "VAE"
        ],
        "vae_b": [
          "VAE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_a",
        "vae_b",
        "boolean"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAE Input Switch",
    "display_name": "VAE Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Video Dump Frames": {
    "input": {
      "required": {
        "video_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/MyVideo.mp4",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/MyVideo",
            "multiline": false
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "frame_",
            "multiline": false
          }
        ],
        "filenumber_digits": [
          "INT",
          {
            "default": 4,
            "min": -1,
            "max": 8,
            "step": 1
          }
        ],
        "extension": [
          [
            "png",
            "jpg",
            "gif",
            "tiff"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "video_path",
        "output_path",
        "prefix",
        "filenumber_digits",
        "extension"
      ]
    },
    "output": [
      "STRING",
      "NUMBER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output_path",
      "processed_count"
    ],
    "name": "Video Dump Frames",
    "display_name": "Video Dump Frames",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "CLIPSEG2": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "use_cuda": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "clipseg_model": [
          "CLIPSEG_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "use_cuda"
      ],
      "optional": [
        "clipseg_model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CLIPSEG2",
    "display_name": "CLIPSEG2",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "image/transformation",
    "output_node": false
  },
  "CLIPTextEncode (BlenderNeko Advanced + NSP)": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "clip": [
          "CLIP"
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++"
          ]
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "clip",
        "token_normalization",
        "weight_interpretation",
        "text"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "conditioning",
      "parsed_text",
      "raw_text"
    ],
    "name": "CLIPTextEncode (BlenderNeko Advanced + NSP)",
    "display_name": "CLIPTextEncode (BlenderNeko Advanced + NSP)",
    "description": "A node based on Blenderneko's <a href='https://github.com/BlenderNeko/ComfyUI_ADV_CLIP_embw' target='_blank'>Advanced CLIP Text Encode</a>. This version adds the ability to use Noodle Soup Prompts and Wildcards. Wildcards are stored in WAS Node Suite root under the folder 'wildcards'. You can create the folder if it doesn't exist and move your wildcards into it.",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Conditioning",
    "output_node": true
  },
  "ChatGPT Simple _O": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "model": [
          [
            "@cf/meta/llama-2-7b-chat-int8",
            "gpt-3.5-turbo"
          ],
          {
            "default": "@cf/meta/llama-2-7b-chat-int8"
          }
        ],
        "behaviour": [
          [
            "tags",
            "description"
          ],
          {
            "default": "description"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "model",
        "behaviour"
      ],
      "optional": [
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ChatGPT Simple _O",
    "display_name": "ChatGPT Simple _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI",
    "output_node": false
  },
  "ChatGPT compact _O": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "initMsg": [
          "STRING",
          {
            "multiline": true,
            "default": "\nact as prompt generator ,i will give you text and you describe an image that match that text in details use gelbooru  tags in your description also describe the high quality of the image, answer with one response only \n"
          }
        ],
        "model": [
          [
            "@cf/meta/llama-2-7b-chat-int8",
            "gpt-3.5-turbo"
          ],
          {
            "default": "gpt-3.5-turbo"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "initMsg",
        "model"
      ],
      "optional": [
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ChatGPT compact _O",
    "display_name": "ChatGPT compact _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI",
    "output_node": false
  },
  "load_openAI _O": {
    "input": {
      "required": {
        "base_url": [
          "STRING",
          {
            "multiline": false,
            "default": "https://openai-cf.realnow.workers.dev/v1"
          }
        ],
        "api_key": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base_url",
        "api_key"
      ]
    },
    "output": [
      "CLIENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIENT"
    ],
    "name": "load_openAI _O",
    "display_name": "load_openAI _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI/Advanced",
    "output_node": false
  },
  "Chat_Message _O": {
    "input": {
      "required": {
        "role": [
          [
            "user",
            "assistant",
            "system"
          ],
          {
            "default": "user"
          }
        ],
        "content": [
          "STRING",
          {
            "multiline": true,
            "default": "\nact as prompt generator ,i will give you text and you describe an image that match that text in details use gelbooru  tags in your description also describe the high quality of the image, answer with one response only \n"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "role",
        "content"
      ]
    },
    "output": [
      "OPENAI_CHAT_MESSAGES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OPENAI_CHAT_MESSAGES"
    ],
    "name": "Chat_Message _O",
    "display_name": "Chat_Message _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI/Advanced/ChatGPT",
    "output_node": false
  },
  "combine_chat_messages _O": {
    "input": {
      "required": {
        "message1": [
          "OPENAI_CHAT_MESSAGES"
        ],
        "message2": [
          "OPENAI_CHAT_MESSAGES"
        ]
      }
    },
    "input_order": {
      "required": [
        "message1",
        "message2"
      ]
    },
    "output": [
      "OPENAI_CHAT_MESSAGES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OPENAI_CHAT_MESSAGES"
    ],
    "name": "combine_chat_messages _O",
    "display_name": "combine_chat_messages _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI/Advanced/ChatGPT",
    "output_node": false
  },
  "Chat completion _O": {
    "input": {
      "required": {
        "client": [
          "CLIENT"
        ],
        "model": [
          [
            "@cf/meta/llama-2-7b-chat-int8",
            "gpt-3.5-turbo"
          ],
          {
            "default": "gpt-3.5-turbo"
          }
        ],
        "messages": [
          "OPENAI_CHAT_MESSAGES"
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "client",
        "model",
        "messages"
      ],
      "optional": [
        "seed"
      ]
    },
    "output": [
      "STRING",
      "OPENAI_CHAT_COMPLETION"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "OPENAI_CHAT_COMPLETION"
    ],
    "name": "Chat completion _O",
    "display_name": "Chat completion _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI/Advanced/ChatGPT",
    "output_node": true
  },
  "create image _O": {
    "input": {
      "required": {
        "client": [
          "CLIENT"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "number": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "size": [
          [
            "256x256",
            "512x512",
            "1024x1024"
          ],
          {
            "default": "256x256"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "client",
        "prompt",
        "number",
        "size"
      ],
      "optional": [
        "seed"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "create image _O",
    "display_name": "create image _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI/Advanced/Image",
    "output_node": true
  },
  "variation_image _O": {
    "input": {
      "required": {
        "client": [
          "CLIENT"
        ],
        "image": [
          "IMAGE"
        ],
        "number": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "size": [
          [
            "256x256",
            "512x512",
            "1024x1024"
          ],
          {
            "default": "256x256"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "client",
        "image",
        "number",
        "size"
      ],
      "optional": [
        "seed"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "variation_image _O",
    "display_name": "variation_image _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI/Advanced/Image",
    "output_node": true
  },
  "LatentUpscaleFactor _O": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "WidthFactor": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.28125
          }
        ],
        "HeightFactor": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.28125
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "WidthFactor",
        "HeightFactor",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleFactor _O",
    "display_name": "LatentUpscaleFactor _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/latent",
    "output_node": false
  },
  "LatentUpscaleFactorSimple _O": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.28125
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "factor",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleFactorSimple _O",
    "display_name": "LatentUpscaleFactorSimple _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/latent",
    "output_node": false
  },
  "selectLatentFromBatch _O": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "index"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "selectLatentFromBatch _O",
    "display_name": "selectLatentFromBatch _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/latent",
    "output_node": false
  },
  "RandomNSP _O": {
    "input": {
      "required": {
        "terminology": [
          [
            "fantasy-creature",
            "gen-modifier",
            "adj-beauty",
            "noun-beauty",
            "noun-fantasy",
            "adj-horror",
            "noun-emote",
            "noun-horror",
            "adj-architecture",
            "nationality",
            "pop-location",
            "pop-culture",
            "site",
            "style",
            "hd",
            "aspect-ratio",
            "3d-terms",
            "color-palette",
            "camera",
            "camera-manu",
            "f-stop",
            "iso-stop",
            "focal-length",
            "photo-term",
            "adj-general",
            "noun-general",
            "color",
            "artist",
            "identity",
            "identity-adult",
            "identity-young",
            "punk",
            "hair",
            "bodyshape",
            "skin-color",
            "eyecolor",
            "fantasy-setting",
            "details",
            "portrait-type",
            "occupation",
            "celeb",
            "neg-weight",
            "landscape-type",
            "animals",
            "gender",
            "gender-ext",
            "movement",
            "body-heavy",
            "body-light",
            "body-fit",
            "body-poor",
            "body-shape",
            "body-short",
            "body-tall",
            "quantity",
            "scenario-desc",
            "games",
            "foods",
            "rpg-Item",
            "trippy",
            "cosmic-star",
            "cosmic-nebula",
            "cosmic-galaxy",
            "cosmic-terms",
            "flower",
            "dinosaur",
            "natl-park",
            "fruit",
            "tree",
            "wh-site",
            "forest-type",
            "water",
            "fish",
            "artist-botanical",
            "artist-surreal",
            "bird",
            "movie",
            "movie-director",
            "comic",
            "penciller",
            "album-cover",
            "band"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "terminology",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "RandomNSP _O",
    "display_name": "RandomNSP _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/text/NSP",
    "output_node": false
  },
  "ConcatRandomNSP_O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "defaultBehavior": "input"
          }
        ],
        "terminology": [
          [
            "fantasy-creature",
            "gen-modifier",
            "adj-beauty",
            "noun-beauty",
            "noun-fantasy",
            "adj-horror",
            "noun-emote",
            "noun-horror",
            "adj-architecture",
            "nationality",
            "pop-location",
            "pop-culture",
            "site",
            "style",
            "hd",
            "aspect-ratio",
            "3d-terms",
            "color-palette",
            "camera",
            "camera-manu",
            "f-stop",
            "iso-stop",
            "focal-length",
            "photo-term",
            "adj-general",
            "noun-general",
            "color",
            "artist",
            "identity",
            "identity-adult",
            "identity-young",
            "punk",
            "hair",
            "bodyshape",
            "skin-color",
            "eyecolor",
            "fantasy-setting",
            "details",
            "portrait-type",
            "occupation",
            "celeb",
            "neg-weight",
            "landscape-type",
            "animals",
            "gender",
            "gender-ext",
            "movement",
            "body-heavy",
            "body-light",
            "body-fit",
            "body-poor",
            "body-shape",
            "body-short",
            "body-tall",
            "quantity",
            "scenario-desc",
            "games",
            "foods",
            "rpg-Item",
            "trippy",
            "cosmic-star",
            "cosmic-nebula",
            "cosmic-galaxy",
            "cosmic-terms",
            "flower",
            "dinosaur",
            "natl-park",
            "fruit",
            "tree",
            "wh-site",
            "forest-type",
            "water",
            "fish",
            "artist-botanical",
            "artist-surreal",
            "bird",
            "movie",
            "movie-director",
            "comic",
            "penciller",
            "album-cover",
            "band"
          ]
        ],
        "separator": [
          "STRING",
          {
            "multiline": false,
            "default": ","
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "terminology",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ConcatRandomNSP_O",
    "display_name": "ConcatRandomNSP_O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/text/NSP",
    "output_node": false
  },
  "Concat Text _O": {
    "input": {
      "required": {},
      "optional": {
        "text1": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "defaultBehavior": "input"
          }
        ],
        "text2": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "defaultBehavior": "input"
          }
        ],
        "text3": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "defaultBehavior": "input"
          }
        ],
        "text4": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "defaultBehavior": "input"
          }
        ],
        "text5": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "defaultBehavior": "input"
          }
        ],
        "text6": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text7": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text8": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text9": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text10": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text11": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text12": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text13": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "separator": [
          "STRING",
          {
            "multiline": false,
            "default": ","
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text1",
        "text2",
        "text3",
        "text4",
        "text5",
        "text6",
        "text7",
        "text8",
        "text9",
        "text10",
        "text11",
        "text12",
        "text13",
        "separator"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Concat Text _O",
    "display_name": "Concat Text _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/text/operations",
    "output_node": false
  },
  "QOL Split String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "text"
          }
        ]
      },
      "optional": {
        "delimiter": [
          "STRING",
          {
            "multiline": false,
            "default": ","
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "delimiter"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "string_1",
      "string_2",
      "string_3",
      "string_4",
      "string_5",
      "string_6",
      "string_7",
      "string_8",
      "string_9",
      "string_10",
      "string_11",
      "string_12",
      "string_13"
    ],
    "name": "QOL Split String",
    "display_name": "QOL Split String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/text/operations",
    "output_node": false
  },
  "Trim Text _O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "defaultBehavior": "input"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Trim Text _O",
    "display_name": "Trim Text _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/text/operations",
    "output_node": false
  },
  "Replace Text _O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "defaultBehavior": "input"
          }
        ],
        "old": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "new": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "old",
        "new"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Replace Text _O",
    "display_name": "Replace Text _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/text/operations",
    "output_node": false
  },
  "saveTextToFile _O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "defaultBehavior": "input"
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "log.txt",
            "multiline": false
          }
        ]
      },
      "optional": {
        "append": [
          [
            "true",
            "false"
          ],
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "filename"
      ],
      "optional": [
        "append"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "saveTextToFile _O",
    "display_name": "saveTextToFile _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/text",
    "output_node": true
  },
  "Text2Image _O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "font": [
          [
            "COMICI.TTF",
            "Alkatra.ttf",
            "COMICZ.TTF",
            "CALIBRI.TTF",
            "COMIC.TTF"
          ],
          {
            "default": "COMICI.TTF"
          }
        ],
        "size": [
          "INT",
          {
            "default": 36,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "font_R": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "font_G": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "font_B": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "font_A": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_R": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_G": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_B": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_A": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "step": 1
          }
        ],
        "expand": [
          [
            "true",
            "false"
          ],
          {
            "default": "true"
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -100,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "font",
        "size",
        "font_R",
        "font_G",
        "font_B",
        "font_A",
        "background_R",
        "background_G",
        "background_B",
        "background_A",
        "width",
        "height",
        "expand",
        "x",
        "y"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Text2Image _O",
    "display_name": "Text2Image _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/text",
    "output_node": false
  },
  "ImageScaleFactor _O": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "WidthFactor": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.28125
          }
        ],
        "HeightFactor": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.28125
          }
        ],
        "MulOf46": [
          [
            "enabled",
            "disabled"
          ],
          {
            "default": "enabled"
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "WidthFactor",
        "HeightFactor",
        "MulOf46",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleFactor _O",
    "display_name": "ImageScaleFactor _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/image",
    "output_node": false
  },
  "ImageScaleFactorSimple _O": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "Factor": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.28125
          }
        ],
        "MulOf46": [
          [
            "enabled",
            "disabled"
          ],
          {
            "default": "enabled"
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "Factor",
        "MulOf46",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleFactorSimple _O",
    "display_name": "ImageScaleFactorSimple _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/image",
    "output_node": false
  },
  "Equation1param _O": {
    "input": {
      "required": {
        "x": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 18446744073709551615,
            "defaultBehavior": "input"
          }
        ],
        "equation": [
          "STRING",
          {
            "multiline": true,
            "default": "x*1"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "equation"
      ]
    },
    "output": [
      "FLOAT",
      "int"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "int"
    ],
    "name": "Equation1param _O",
    "display_name": "Equation1param _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/numbers",
    "output_node": false
  },
  "Equation2params _O": {
    "input": {
      "required": {
        "x": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 18446744073709551615,
            "defaultBehavior": "input"
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 18446744073709551615,
            "defaultBehavior": "input"
          }
        ],
        "equation": [
          "STRING",
          {
            "multiline": true,
            "default": "x+y"
          }
        ]
      },
      "optional": {
        "equation_2": [
          "STRING",
          {
            "multiline": true,
            "default": "x+y"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "equation"
      ],
      "optional": [
        "equation_2"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT"
    ],
    "name": "Equation2params _O",
    "display_name": "Equation2params _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/numbers",
    "output_node": false
  },
  "floatToInt _O": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 18446744073709551615,
            "defaultBehavior": "input"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "floatToInt _O",
    "display_name": "floatToInt _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/numbers",
    "output_node": false
  },
  "intToFloat _O": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "defaultBehavior": "input"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "intToFloat _O",
    "display_name": "intToFloat _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/numbers",
    "output_node": false
  },
  "floatToText _O": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 18446744073709551615,
            "defaultBehavior": "input"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "floatToText _O",
    "display_name": "floatToText _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/numbers",
    "output_node": false
  },
  "GetImage_(Width&Height) _O": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "INT"
    ],
    "name": "GetImage_(Width&Height) _O",
    "display_name": "GetImage_(Width&Height) _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/numbers",
    "output_node": false
  },
  "GetLatent_(Width&Height) _O": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "INT"
    ],
    "name": "GetLatent_(Width&Height) _O",
    "display_name": "GetLatent_(Width&Height) _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/numbers",
    "output_node": false
  },
  "debug messages_O": {
    "input": {
      "required": {
        "messages": [
          "OPENAI_CHAT_MESSAGES"
        ]
      }
    },
    "input_order": {
      "required": [
        "messages"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "debug messages_O",
    "display_name": "debug messages_O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/debug/OpenAI/Advanced/ChatGPT",
    "output_node": true
  },
  "debug Completeion _O": {
    "input": {
      "required": {
        "completion": [
          "OPENAI_CHAT_COMPLETION"
        ]
      }
    },
    "input_order": {
      "required": [
        "completion"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "debug Completeion _O",
    "display_name": "debug Completeion _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/debug/OpenAI/Advanced/ChatGPT",
    "output_node": true
  },
  "Debug Text _O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "defaultBehavior": "input"
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "debug",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Debug Text _O",
    "display_name": "Debug Text _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/debug/text",
    "output_node": true
  },
  "Debug Text route _O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "defaultBehavior": "input"
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "debug",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "prefix"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Debug Text route _O",
    "display_name": "Debug Text route _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/debug/text",
    "output_node": false
  },
  "Note _O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Note _O",
    "display_name": "Note _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/utils",
    "output_node": true
  },
  "Text _O": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text _O",
    "display_name": "Text _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/utils",
    "output_node": false
  },
  "seed _O": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "seed _O",
    "display_name": "seed _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/utils",
    "output_node": false
  },
  "int _O": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "int _O",
    "display_name": "int _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/utils",
    "output_node": false
  },
  "float _O": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "float _O",
    "display_name": "float _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/utils",
    "output_node": false
  },
  "ChatGPT _O": {
    "input": {
      "required": {
        "api_key_file": [
          "STRING",
          {
            "file": true,
            "default": "api_key.txt"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key_file"
      ]
    },
    "output": [
      "OPENAI"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OPENAI"
    ],
    "name": "ChatGPT _O",
    "display_name": "ChatGPT _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/OpenAI/Advanced",
    "output_node": false
  },
  "Chat_Message_fromString _O": {
    "input": {
      "required": {
        "role": [
          [
            "user",
            "assistant",
            "system"
          ],
          {
            "default": "user"
          }
        ],
        "content": [
          "STR"
        ]
      }
    },
    "input_order": {
      "required": [
        "role",
        "content"
      ]
    },
    "output": [
      "OPENAI_CHAT_MESSAGES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OPENAI_CHAT_MESSAGES"
    ],
    "name": "Chat_Message_fromString _O",
    "display_name": "Chat_Message_fromString _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/OpenAI/Advanced/ChatGPT",
    "output_node": false
  },
  "compine_chat_messages _O": {
    "input": {
      "required": {
        "message1": [
          "OPENAI_CHAT_MESSAGES"
        ],
        "message2": [
          "OPENAI_CHAT_MESSAGES"
        ]
      }
    },
    "input_order": {
      "required": [
        "message1",
        "message2"
      ]
    },
    "output": [
      "OPENAI_CHAT_MESSAGES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OPENAI_CHAT_MESSAGES"
    ],
    "name": "compine_chat_messages _O",
    "display_name": "compine_chat_messages _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/OpenAI/Advanced/ChatGPT",
    "output_node": false
  },
  "Chat_Completion _O": {
    "input": {
      "required": {
        "openai": [
          "OPENAI"
        ],
        "model": [
          "STRING",
          {
            "multiline": false,
            "default": "gpt-3.5-turbo"
          }
        ],
        "messages": [
          "OPENAI_CHAT_MESSAGES"
        ]
      }
    },
    "input_order": {
      "required": [
        "openai",
        "model",
        "messages"
      ]
    },
    "output": [
      "STR",
      "OPENAI_CHAT_COMPLETION"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STR",
      "OPENAI_CHAT_COMPLETION"
    ],
    "name": "Chat_Completion _O",
    "display_name": "Chat_Completion _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/OpenAI/Advanced/ChatGPT",
    "output_node": true
  },
  "create_image _O": {
    "input": {
      "required": {
        "openai": [
          "OPENAI"
        ],
        "prompt": [
          "STR"
        ],
        "number": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "size": [
          [
            "256x256",
            "512x512",
            "1024x1024"
          ],
          {
            "default": "256x256"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "openai",
        "prompt",
        "number",
        "size"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "create_image _O",
    "display_name": "create_image _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/OpenAI/Advanced/Image",
    "output_node": true
  },
  "String _O": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STR"
    ],
    "name": "String _O",
    "display_name": "String _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/string",
    "output_node": false
  },
  "Debug String _O": {
    "input": {
      "required": {
        "string": [
          "STR"
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Debug String _O",
    "display_name": "Debug String _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/string",
    "output_node": true
  },
  "concat Strings _O": {
    "input": {
      "required": {
        "string1": [
          "STR"
        ],
        "string2": [
          "STR"
        ]
      }
    },
    "input_order": {
      "required": [
        "string1",
        "string2"
      ]
    },
    "output": [
      "STR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STR"
    ],
    "name": "concat Strings _O",
    "display_name": "concat Strings _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/string/operations",
    "output_node": false
  },
  "trim String _O": {
    "input": {
      "required": {
        "string": [
          "STR"
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STR"
    ],
    "name": "trim String _O",
    "display_name": "trim String _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/string/operations",
    "output_node": false
  },
  "replace String _O": {
    "input": {
      "required": {
        "string": [
          "STR"
        ],
        "old": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "new": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "old",
        "new"
      ]
    },
    "output": [
      "STR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STR"
    ],
    "name": "replace String _O",
    "display_name": "replace String _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/string/operations",
    "output_node": false
  },
  "replace String advanced _O": {
    "input": {
      "required": {
        "string": [
          "STR"
        ],
        "old": [
          "STR"
        ],
        "new": [
          "STR"
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "old",
        "new"
      ]
    },
    "output": [
      "STR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STR"
    ],
    "name": "replace String advanced _O",
    "display_name": "replace String advanced _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/string/operations",
    "output_node": false
  },
  "string2Image _O": {
    "input": {
      "required": {
        "string": [
          "STR"
        ],
        "font": [
          "STRING",
          {
            "default": "CALIBRI.TTF",
            "multiline": false
          }
        ],
        "size": [
          "INT",
          {
            "default": 36,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "font_R": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "font_G": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "font_B": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_R": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_G": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_B": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "font",
        "size",
        "font_R",
        "font_G",
        "font_B",
        "background_R",
        "background_G",
        "background_B"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "string2Image _O",
    "display_name": "string2Image _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/string",
    "output_node": false
  },
  "CLIPStringEncode _O": {
    "input": {
      "required": {
        "string": [
          "STR"
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPStringEncode _O",
    "display_name": "CLIPStringEncode _O",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/string",
    "output_node": false
  },
  "LatentUpscaleMultiply": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "WidthMul": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "HeightMul": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "WidthMul",
        "HeightMul",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleMultiply",
    "display_name": "LatentUpscaleMultiply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
    "category": "O/deprecated/latent",
    "output_node": false
  },
  "InversionDemoAdvancedPromptNode": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "model",
        "clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "CONDITIONING"
    ],
    "name": "InversionDemoAdvancedPromptNode",
    "display_name": "Advanced Prompt",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Demo",
    "output_node": false
  },
  "InversionDemoLazySwitch": {
    "input": {
      "required": {
        "switch": [
          "BOOLEAN"
        ],
        "on_false": [
          "*",
          {
            "lazy": true
          }
        ],
        "on_true": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "switch",
        "on_false",
        "on_true"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "InversionDemoLazySwitch",
    "display_name": "Lazy Switch",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "InversionDemoLazyIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ],
        "value0": [
          "*",
          {
            "lazy": true
          }
        ]
      },
      "optional": {
        "value1": [
          "*",
          {
            "lazy": true
          }
        ],
        "value2": [
          "*",
          {
            "lazy": true
          }
        ],
        "value3": [
          "*",
          {
            "lazy": true
          }
        ],
        "value4": [
          "*",
          {
            "lazy": true
          }
        ],
        "value5": [
          "*",
          {
            "lazy": true
          }
        ],
        "value6": [
          "*",
          {
            "lazy": true
          }
        ],
        "value7": [
          "*",
          {
            "lazy": true
          }
        ],
        "value8": [
          "*",
          {
            "lazy": true
          }
        ],
        "value9": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "value0"
      ],
      "optional": [
        "value1",
        "value2",
        "value3",
        "value4",
        "value5",
        "value6",
        "value7",
        "value8",
        "value9"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "InversionDemoLazyIndexSwitch",
    "display_name": "Lazy Index Switch",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "InversionDemoLazyMixImages": {
    "input": {
      "required": {
        "image1": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image2": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "InversionDemoLazyMixImages",
    "display_name": "Lazy Mix Images",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Demo",
    "output_node": false
  },
  "InversionDemoLazyConditional": {
    "input": {
      "required": {},
      "optional": {
        "value1": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition1": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ],
        "value2": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition2": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "value3": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition3": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "value4": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition4": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "value5": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition5": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "value6": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition6": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "value7": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition7": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "value8": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition8": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "value9": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition9": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "value10": [
          "*",
          {
            "lazy": true
          }
        ],
        "condition10": [
          "BOOLEAN",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "else": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "value1",
        "condition1",
        "value2",
        "condition2",
        "value3",
        "condition3",
        "value4",
        "condition4",
        "value5",
        "condition5",
        "value6",
        "condition6",
        "value7",
        "condition7",
        "value8",
        "condition8",
        "value9",
        "condition9",
        "value10",
        "condition10",
        "else"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "InversionDemoLazyConditional",
    "display_name": "Lazy Conditional",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "ComponentInput": {
    "input": {
      "required": {
        "name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "data_type": [
          "STRING",
          {
            "multiline": false,
            "default": "IMAGE"
          }
        ],
        "extra_args": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "explicit_input_order": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "optional": [
          [
            false,
            true
          ]
        ]
      },
      "optional": {
        "default_value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "name",
        "data_type",
        "extra_args",
        "explicit_input_order",
        "optional"
      ],
      "optional": [
        "default_value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ComponentInput",
    "display_name": "Component Input",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Component Creation",
    "output_node": false
  },
  "ComponentOutput": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "data_type": [
          "STRING",
          {
            "multiline": false,
            "default": "IMAGE"
          }
        ],
        "name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "data_type",
        "name",
        "value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ComponentOutput",
    "display_name": "Component Output",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Component Creation",
    "output_node": false
  },
  "ComponentMetadata": {
    "input": {
      "required": {
        "name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "always_output": [
          [
            false,
            true
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "name",
        "always_output"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ComponentMetadata",
    "display_name": "Component Metadata",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Component Creation",
    "output_node": false
  },
  "WhileLoopOpen": {
    "input": {
      "required": {
        "condition": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "initial_value0": [
          "*"
        ],
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "condition"
      ],
      "optional": [
        "initial_value0",
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4"
      ]
    },
    "output": [
      "FLOW_CONTROL",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "FLOW_CONTROL",
      "value0",
      "value1",
      "value2",
      "value3",
      "value4"
    ],
    "name": "WhileLoopOpen",
    "display_name": "While Loop Open",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Flow",
    "output_node": false
  },
  "WhileLoopClose": {
    "input": {
      "required": {
        "flow_control": [
          "FLOW_CONTROL",
          {
            "rawLink": true
          }
        ],
        "condition": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "initial_value0": [
          "*"
        ],
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ]
      },
      "hidden": {
        "dynprompt": "DYNPROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "flow_control",
        "condition"
      ],
      "optional": [
        "initial_value0",
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4"
      ],
      "hidden": [
        "dynprompt",
        "unique_id"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "value0",
      "value1",
      "value2",
      "value3",
      "value4"
    ],
    "name": "WhileLoopClose",
    "display_name": "While Loop Close",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Flow",
    "output_node": false
  },
  "ExecutionBlocker": {
    "input": {
      "required": {
        "input": [
          "*"
        ],
        "block": [
          "BOOLEAN"
        ],
        "verbose": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "block",
        "verbose"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "ExecutionBlocker",
    "display_name": "Execution Blocker",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Flow",
    "output_node": false
  },
  "AccumulateNode": {
    "input": {
      "required": {
        "to_add": [
          "*"
        ]
      },
      "optional": {
        "accumulation": [
          "ACCUMULATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "to_add"
      ],
      "optional": [
        "accumulation"
      ]
    },
    "output": [
      "ACCUMULATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ACCUMULATION"
    ],
    "name": "AccumulateNode",
    "display_name": "Accumulate",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "AccumulationHeadNode": {
    "input": {
      "required": {
        "accumulation": [
          "ACCUMULATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "accumulation"
      ]
    },
    "output": [
      "ACCUMULATION",
      "*"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "ACCUMULATION",
      "*"
    ],
    "name": "AccumulationHeadNode",
    "display_name": "Accumulation Head",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "AccumulationTailNode": {
    "input": {
      "required": {
        "accumulation": [
          "ACCUMULATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "accumulation"
      ]
    },
    "output": [
      "ACCUMULATION",
      "*"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "ACCUMULATION",
      "*"
    ],
    "name": "AccumulationTailNode",
    "display_name": "Accumulation Tail",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "AccumulationToListNode": {
    "input": {
      "required": {
        "accumulation": [
          "ACCUMULATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "accumulation"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "AccumulationToListNode",
    "display_name": "Accumulation to List",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "ListToAccumulationNode": {
    "input": {
      "required": {
        "list": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "list"
      ]
    },
    "output": [
      "ACCUMULATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ACCUMULATION"
    ],
    "name": "ListToAccumulationNode",
    "display_name": "List to Accumulation",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "AccumulationGetLengthNode": {
    "input": {
      "required": {
        "accumulation": [
          "ACCUMULATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "accumulation"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "AccumulationGetLengthNode",
    "display_name": "Accumulation Get Length",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "AccumulationGetItemNode": {
    "input": {
      "required": {
        "accumulation": [
          "ACCUMULATION"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "accumulation",
        "index"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "AccumulationGetItemNode",
    "display_name": "Accumulation Get Item",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "AccumulationSetItemNode": {
    "input": {
      "required": {
        "accumulation": [
          "ACCUMULATION"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "step": 1
          }
        ],
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "accumulation",
        "index",
        "value"
      ]
    },
    "output": [
      "ACCUMULATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ACCUMULATION"
    ],
    "name": "AccumulationSetItemNode",
    "display_name": "Accumulation Set Item",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "ForLoopOpen": {
    "input": {
      "required": {
        "remaining": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 100000,
            "step": 1
          }
        ]
      },
      "optional": {
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ]
      },
      "hidden": {
        "initial_value0": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "remaining"
      ],
      "optional": [
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4"
      ],
      "hidden": [
        "initial_value0"
      ]
    },
    "output": [
      "FLOW_CONTROL",
      "INT",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "flow_control",
      "remaining",
      "value1",
      "value2",
      "value3",
      "value4"
    ],
    "name": "ForLoopOpen",
    "display_name": "For Loop Open",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Flow",
    "output_node": false
  },
  "ForLoopClose": {
    "input": {
      "required": {
        "flow_control": [
          "FLOW_CONTROL",
          {
            "rawLink": true
          }
        ]
      },
      "optional": {
        "initial_value1": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value2": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value3": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value4": [
          "*",
          {
            "rawLink": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "flow_control"
      ],
      "optional": [
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "value1",
      "value2",
      "value3",
      "value4"
    ],
    "name": "ForLoopClose",
    "display_name": "For Loop Close",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Flow",
    "output_node": false
  },
  "IntMathOperation": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "operation": [
          [
            "add",
            "subtract",
            "multiply",
            "divide",
            "modulo",
            "power"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "IntMathOperation",
    "display_name": "Int Math Operation",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "DebugPrint": {
    "input": {
      "required": {
        "value": [
          "*"
        ],
        "label": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "label"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "DebugPrint",
    "display_name": "Debug Print",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Debug",
    "output_node": false
  },
  "MakeListNode": {
    "input": {
      "required": {
        "value1": [
          "*"
        ]
      },
      "optional": {
        "value1": [
          "*"
        ],
        "value2": [
          "*"
        ],
        "value3": [
          "*"
        ],
        "value4": [
          "*"
        ],
        "value5": [
          "*"
        ],
        "value6": [
          "*"
        ],
        "value7": [
          "*"
        ],
        "value8": [
          "*"
        ],
        "value9": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "value1"
      ],
      "optional": [
        "value1",
        "value2",
        "value3",
        "value4",
        "value5",
        "value6",
        "value7",
        "value8",
        "value9"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "MakeListNode",
    "display_name": "Make List",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Lists",
    "output_node": false
  },
  "IntConditions": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "operation": [
          [
            "==",
            "!=",
            "<",
            ">",
            "<=",
            ">="
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "IntConditions",
    "display_name": "Int Condition",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "FloatConditions": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -999999999999.0,
            "max": 999999999999.0,
            "step": 1
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -999999999999.0,
            "max": 999999999999.0,
            "step": 1
          }
        ],
        "operation": [
          [
            "==",
            "!=",
            "<",
            ">",
            "<=",
            ">="
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "FloatConditions",
    "display_name": "Float Condition",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "StringConditions": {
    "input": {
      "required": {
        "a": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "b": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "operation": [
          [
            "a == b",
            "a != b",
            "a IN b",
            "a MATCH REGEX(b)",
            "a BEGINSWITH b",
            "a ENDSWITH b"
          ]
        ],
        "case_sensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation",
        "case_sensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "StringConditions",
    "display_name": "String Condition",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "ToBoolNode": {
    "input": {
      "required": {
        "value": [
          "*"
        ]
      },
      "optional": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ],
      "optional": [
        "invert"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ToBoolNode",
    "display_name": "To Bool",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "BoolOperationNode": {
    "input": {
      "required": {
        "a": [
          "BOOLEAN"
        ],
        "b": [
          "BOOLEAN"
        ],
        "op": [
          [
            "a AND b",
            "a OR b",
            "a XOR b",
            "NOT a"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "op"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "BoolOperationNode",
    "display_name": "Bool Operation",
    "description": "",
    "python_module": "custom_nodes.execution-inversion-demo-comfyui",
    "category": "InversionDemo Nodes/Logic",
    "output_node": false
  },
  "ApplyInstantID": {
    "input": {
      "required": {
        "instantid": [
          "INSTANTID"
        ],
        "insightface": [
          "FACEANALYSIS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "image_kps": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "instantid",
        "insightface",
        "control_net",
        "image",
        "model",
        "positive",
        "negative",
        "weight",
        "start_at",
        "end_at"
      ],
      "optional": [
        "image_kps",
        "mask"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "positive",
      "negative"
    ],
    "name": "ApplyInstantID",
    "display_name": "Apply InstantID",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_InstantID",
    "category": "InstantID",
    "output_node": false
  },
  "ApplyInstantIDAdvanced": {
    "input": {
      "required": {
        "instantid": [
          "INSTANTID"
        ],
        "insightface": [
          "FACEANALYSIS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "ip_weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 3.0,
            "step": 0.01
          }
        ],
        "cn_strength": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "combine_embeds": [
          [
            "average",
            "norm average",
            "concat"
          ],
          {
            "default": "average"
          }
        ]
      },
      "optional": {
        "image_kps": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "instantid",
        "insightface",
        "control_net",
        "image",
        "model",
        "positive",
        "negative",
        "ip_weight",
        "cn_strength",
        "start_at",
        "end_at",
        "noise",
        "combine_embeds"
      ],
      "optional": [
        "image_kps",
        "mask"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "positive",
      "negative"
    ],
    "name": "ApplyInstantIDAdvanced",
    "display_name": "Apply InstantID Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_InstantID",
    "category": "InstantID",
    "output_node": false
  },
  "FaceKeypointsPreprocessor": {
    "input": {
      "required": {
        "faceanalysis": [
          "FACEANALYSIS"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "faceanalysis",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FaceKeypointsPreprocessor",
    "display_name": "Face Keypoints Preprocessor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_InstantID",
    "category": "InstantID",
    "output_node": false
  },
  "InstantIDAttentionPatch": {
    "input": {
      "required": {
        "instantid": [
          "INSTANTID"
        ],
        "insightface": [
          "FACEANALYSIS"
        ],
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "instantid",
        "insightface",
        "image",
        "model",
        "weight",
        "start_at",
        "end_at",
        "noise"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "MODEL",
      "FACE_EMBEDS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "FACE_EMBEDS"
    ],
    "name": "InstantIDAttentionPatch",
    "display_name": "InstantID Patch Attention",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_InstantID",
    "category": "InstantID",
    "output_node": false
  },
  "ApplyInstantIDControlNet": {
    "input": {
      "required": {
        "face_embeds": [
          "FACE_EMBEDS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image_kps": [
          "IMAGE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "face_embeds",
        "control_net",
        "image_kps",
        "positive",
        "negative",
        "strength",
        "start_at",
        "end_at"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ApplyInstantIDControlNet",
    "display_name": "InstantID Apply ControlNet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_InstantID",
    "category": "InstantID",
    "output_node": false
  },
  "CLIPTextEncodeSDXL+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "size_cond_factor": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "size_cond_factor",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL+",
    "display_name": "\ud83d\udd27 SDXL CLIPTextEncode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "ConditioningCombineMultiple+": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "conditioning_3": [
          "CONDITIONING"
        ],
        "conditioning_4": [
          "CONDITIONING"
        ],
        "conditioning_5": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ],
      "optional": [
        "conditioning_3",
        "conditioning_4",
        "conditioning_5"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombineMultiple+",
    "display_name": "\ud83d\udd27 Cond Combine Multiple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3NegativeConditioning+": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "end": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "SD3NegativeConditioning+",
    "display_name": "\ud83d\udd27 SD3 Negative Conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "FluxAttentionSeeker+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_l_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "clip_l_0",
        "clip_l_1",
        "clip_l_2",
        "clip_l_3",
        "clip_l_4",
        "clip_l_5",
        "clip_l_6",
        "clip_l_7",
        "clip_l_8",
        "clip_l_9",
        "clip_l_10",
        "clip_l_11",
        "t5xxl_0",
        "t5xxl_1",
        "t5xxl_2",
        "t5xxl_3",
        "t5xxl_4",
        "t5xxl_5",
        "t5xxl_6",
        "t5xxl_7",
        "t5xxl_8",
        "t5xxl_9",
        "t5xxl_10",
        "t5xxl_11",
        "t5xxl_12",
        "t5xxl_13",
        "t5xxl_14",
        "t5xxl_15",
        "t5xxl_16",
        "t5xxl_17",
        "t5xxl_18",
        "t5xxl_19",
        "t5xxl_20",
        "t5xxl_21",
        "t5xxl_22",
        "t5xxl_23"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "FluxAttentionSeeker+",
    "display_name": "\ud83d\udd27 Flux Attention Seeker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3AttentionSeekerLG+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_l_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_24": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_25": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_26": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_27": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_28": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_29": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_30": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_31": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "clip_l_0",
        "clip_l_1",
        "clip_l_2",
        "clip_l_3",
        "clip_l_4",
        "clip_l_5",
        "clip_l_6",
        "clip_l_7",
        "clip_l_8",
        "clip_l_9",
        "clip_l_10",
        "clip_l_11",
        "clip_g_0",
        "clip_g_1",
        "clip_g_2",
        "clip_g_3",
        "clip_g_4",
        "clip_g_5",
        "clip_g_6",
        "clip_g_7",
        "clip_g_8",
        "clip_g_9",
        "clip_g_10",
        "clip_g_11",
        "clip_g_12",
        "clip_g_13",
        "clip_g_14",
        "clip_g_15",
        "clip_g_16",
        "clip_g_17",
        "clip_g_18",
        "clip_g_19",
        "clip_g_20",
        "clip_g_21",
        "clip_g_22",
        "clip_g_23",
        "clip_g_24",
        "clip_g_25",
        "clip_g_26",
        "clip_g_27",
        "clip_g_28",
        "clip_g_29",
        "clip_g_30",
        "clip_g_31"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "SD3AttentionSeekerLG+",
    "display_name": "\ud83d\udd27 SD3 Attention Seeker L/G",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3AttentionSeekerT5+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "t5xxl_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "t5xxl_0",
        "t5xxl_1",
        "t5xxl_2",
        "t5xxl_3",
        "t5xxl_4",
        "t5xxl_5",
        "t5xxl_6",
        "t5xxl_7",
        "t5xxl_8",
        "t5xxl_9",
        "t5xxl_10",
        "t5xxl_11",
        "t5xxl_12",
        "t5xxl_13",
        "t5xxl_14",
        "t5xxl_15",
        "t5xxl_16",
        "t5xxl_17",
        "t5xxl_18",
        "t5xxl_19",
        "t5xxl_20",
        "t5xxl_21",
        "t5xxl_22",
        "t5xxl_23"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "SD3AttentionSeekerT5+",
    "display_name": "\ud83d\udd27 SD3 Attention Seeker T5",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "FluxBlocksBuster+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "blocks": [
          "STRING",
          {
            "default": "## 0 = 1.0\n## 1 = 1.0\n## 2 = 1.0\n## 3 = 1.0\n## 4 = 1.0\n## 5 = 1.0\n## 6 = 1.0\n## 7 = 1.0\n## 8 = 1.0\n## 9 = 1.0\n## 10 = 1.0\n## 11 = 1.0\n## 12 = 1.0\n## 13 = 1.0\n## 14 = 1.0\n## 15 = 1.0\n## 16 = 1.0\n## 17 = 1.0\n## 18 = 1.0\n# 0 = 1.0\n# 1 = 1.0\n# 2 = 1.0\n# 3 = 1.0\n# 4 = 1.0\n# 5 = 1.0\n# 6 = 1.0\n# 7 = 1.0\n# 8 = 1.0\n# 9 = 1.0\n# 10 = 1.0\n# 11 = 1.0\n# 12 = 1.0\n# 13 = 1.0\n# 14 = 1.0\n# 15 = 1.0\n# 16 = 1.0\n# 17 = 1.0\n# 18 = 1.0\n# 19 = 1.0\n# 20 = 1.0\n# 21 = 1.0\n# 22 = 1.0\n# 23 = 1.0\n# 24 = 1.0\n# 25 = 1.0\n# 26 = 1.0\n# 27 = 1.0\n# 28 = 1.0\n# 29 = 1.0\n# 30 = 1.0\n# 31 = 1.0\n# 32 = 1.0\n# 33 = 1.0\n# 34 = 1.0\n# 35 = 1.0\n# 36 = 1.0\n# 37 = 1.0",
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "blocks"
      ]
    },
    "output": [
      "MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "patched_blocks"
    ],
    "name": "FluxBlocksBuster+",
    "display_name": "\ud83d\udd27 Flux Model Blocks Buster",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "ImageEnhanceDifference+": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "exponent"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageEnhanceDifference+",
    "display_name": "\ud83d\udd27 Image Enhance Difference",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image analysis",
    "output_node": false
  },
  "ImageBatchMultiple+": {
    "input": {
      "required": {
        "image_1": [
          "IMAGE"
        ],
        "method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ],
          {
            "default": "lanczos"
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_1",
        "method"
      ],
      "optional": [
        "image_2",
        "image_3",
        "image_4",
        "image_5"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchMultiple+",
    "display_name": "\ud83d\udd27 Images Batch Multiple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageExpandBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "method": [
          [
            "expand",
            "repeat all",
            "repeat first",
            "repeat last"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageExpandBatch+",
    "display_name": "\ud83d\udd27 Image Expand Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageFromBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "length": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "start",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch+",
    "display_name": "\ud83d\udd27 Image From Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageListToBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageListToBatch+",
    "display_name": "\ud83d\udd27 Image List To Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageBatchToList+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchToList+",
    "display_name": "\ud83d\udd27 Image Batch To List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageCompositeFromMaskBatch+": {
    "input": {
      "required": {
        "image_from": [
          "IMAGE"
        ],
        "image_to": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_from",
        "image_to",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeFromMaskBatch+",
    "display_name": "\ud83d\udd27 Image Composite From Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageComposite+": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "offset_x",
        "offset_y"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageComposite+",
    "display_name": "\ud83d\udd27 Image Composite",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageCrop+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "position": [
          [
            "top-left",
            "top-center",
            "top-right",
            "right-center",
            "bottom-right",
            "bottom-center",
            "bottom-left",
            "left-center",
            "center"
          ]
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "step": 1
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "position",
        "x_offset",
        "y_offset"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "x",
      "y"
    ],
    "name": "ImageCrop+",
    "display_name": "\ud83d\udd27 Image Crop",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageFlip+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "axis": [
          [
            "x",
            "y",
            "xy"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "axis"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFlip+",
    "display_name": "\ud83d\udd27 Image Flip",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageRandomTransform+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "variation": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "seed",
        "repeat",
        "variation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRandomTransform+",
    "display_name": "\ud83d\udd27 Image Random Transform",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageRemoveAlpha+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRemoveAlpha+",
    "display_name": "\ud83d\udd27 Image Remove Alpha",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImageRemoveBackground+": {
    "input": {
      "required": {
        "rembg_session": [
          "REMBG_SESSION"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "rembg_session",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageRemoveBackground+",
    "display_name": "\ud83d\udd27 Image Remove Background",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageResize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "area",
            "nearest-exact",
            "lanczos"
          ]
        ],
        "method": [
          [
            "stretch",
            "keep proportion",
            "fill / crop",
            "pad"
          ]
        ],
        "condition": [
          [
            "always",
            "downscale if bigger",
            "upscale if smaller",
            "if bigger area",
            "if smaller area"
          ]
        ],
        "multiple_of": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "interpolation",
        "method",
        "condition",
        "multiple_of"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "ImageResize+",
    "display_name": "\ud83d\udd27 Image Resize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageSeamCarving+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "energy": [
          [
            "backward",
            "forward"
          ]
        ],
        "order": [
          [
            "width-first",
            "height-first"
          ]
        ]
      },
      "optional": {
        "keep_mask": [
          "MASK"
        ],
        "drop_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "energy",
        "order"
      ],
      "optional": [
        "keep_mask",
        "drop_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSeamCarving+",
    "display_name": "\ud83d\udd27 Image Seam Carving",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageTile+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "overlap": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "overlap_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "overlap_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rows",
        "cols",
        "overlap",
        "overlap_x",
        "overlap_y"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "tile_width",
      "tile_height",
      "overlap_x",
      "overlap_y"
    ],
    "name": "ImageTile+",
    "display_name": "\ud83d\udd27 Image Tile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageUntile+": {
    "input": {
      "required": {
        "tiles": [
          "IMAGE"
        ],
        "overlap_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "overlap_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tiles",
        "overlap_x",
        "overlap_y",
        "rows",
        "cols"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUntile+",
    "display_name": "\ud83d\udd27 Image Untile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "RemBGSession+": {
    "input": {
      "required": {
        "model": [
          [
            "u2net: general purpose",
            "u2netp: lightweight general purpose",
            "u2net_human_seg: human segmentation",
            "u2net_cloth_seg: cloths Parsing",
            "silueta: very small u2net",
            "isnet-general-use: general purpose",
            "isnet-anime: anime illustrations",
            "sam: general purpose"
          ]
        ],
        "providers": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML",
            "Tensorrt",
            "Azure"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "providers"
      ]
    },
    "output": [
      "REMBG_SESSION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REMBG_SESSION"
    ],
    "name": "RemBGSession+",
    "display_name": "\ud83d\udd27 RemBG Session",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "TransparentBGSession+": {
    "input": {
      "required": {
        "mode": [
          [
            "base",
            "fast",
            "base-nightly"
          ]
        ],
        "use_jit": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "use_jit"
      ]
    },
    "output": [
      "REMBG_SESSION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REMBG_SESSION"
    ],
    "name": "TransparentBGSession+",
    "display_name": "\ud83d\udd27 InSPyReNet TransparentBG",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageApplyLUT+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "lut_file": [
          [
            "put_luts_files_here.txt"
          ]
        ],
        "gamma_correction": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_values": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "lut_file",
        "gamma_correction",
        "clip_values",
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageApplyLUT+",
    "display_name": "\ud83d\udd27 Image Apply LUT",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageCASharpening+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCASharpening+",
    "display_name": "\ud83d\udd27 Image Contrast Adaptive Sharpening",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageDesaturate+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "method": [
          [
            "luminance (Rec.709)",
            "luminance (Rec.601)",
            "average",
            "lightness"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor",
        "method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageDesaturate+",
    "display_name": "\ud83d\udd27 Image Desaturate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "PixelOEPixelize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "downscale_mode": [
          [
            "contrast",
            "bicubic",
            "nearest",
            "center",
            "k-centroid"
          ]
        ],
        "target_size": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "patch_size": [
          "INT",
          {
            "default": 16,
            "min": 4,
            "max": 32,
            "step": 2
          }
        ],
        "thickness": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "color_matching": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "upscale": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "downscale_mode",
        "target_size",
        "patch_size",
        "thickness",
        "color_matching",
        "upscale"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PixelOEPixelize+",
    "display_name": "\ud83d\udd27 Pixelize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImagePosterize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImagePosterize+",
    "display_name": "\ud83d\udd27 Image Posterize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageColorMatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "color_space": [
          [
            "LAB",
            "YCbCr",
            "RGB",
            "LUV",
            "YUV",
            "XYZ"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ]
      },
      "optional": {
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "color_space",
        "factor",
        "device",
        "batch_size"
      ],
      "optional": [
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageColorMatch+",
    "display_name": "\ud83d\udd27 Image Color Match",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageColorMatchAdobe+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "color_space": [
          [
            "RGB",
            "LAB"
          ]
        ],
        "luminance_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.05
          }
        ],
        "color_intensity_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.05
          }
        ],
        "fade_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "neutralization_factor": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      },
      "optional": {
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "color_space",
        "luminance_factor",
        "color_intensity_factor",
        "fade_factor",
        "neutralization_factor",
        "device"
      ],
      "optional": [
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageColorMatchAdobe+",
    "display_name": "\ud83d\udd27 Image Color Match Adobe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageHistogramMatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "method": [
          [
            "pytorch",
            "skimage"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "method",
        "factor",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageHistogramMatch+",
    "display_name": "\ud83d\udd27 Image Histogram Match",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageSmartSharpen+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 25,
            "step": 1
          }
        ],
        "preserve_edges": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "sharpen": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 25.0,
            "step": 0.5
          }
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_radius",
        "preserve_edges",
        "sharpen",
        "ratio"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSmartSharpen+",
    "display_name": "\ud83d\udd27 Image Smart Sharpen",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "GetImageSize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "count"
    ],
    "name": "GetImageSize+",
    "display_name": "\ud83d\udd27 Get Image Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImageToDevice+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageToDevice+",
    "display_name": "\ud83d\udd27 Image To Device",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImagePreviewFromLatent+": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "latent",
        "vae",
        "tile_size"
      ],
      "optional": [
        "image"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "width",
      "height"
    ],
    "name": "ImagePreviewFromLatent+",
    "display_name": "\ud83d\udd27 Image Preview From Latent",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": true
  },
  "NoiseFromImage+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_strenght": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_size": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "color_noise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_scale_diff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "blur": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "noise_mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_strenght",
        "noise_size",
        "color_noise",
        "mask_strength",
        "mask_scale_diff",
        "mask_contrast",
        "saturation",
        "contrast",
        "blur"
      ],
      "optional": [
        "noise_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "NoiseFromImage+",
    "display_name": "\ud83d\udd27 Noise From Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "MaskBlur+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "amount": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "amount",
        "device"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskBlur+",
    "display_name": "\ud83d\udd27 Mask Blur",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskBoundingBox+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ]
      },
      "optional": {
        "image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "blur"
      ],
      "optional": [
        "image_optional"
      ]
    },
    "output": [
      "MASK",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MASK",
      "IMAGE",
      "x",
      "y",
      "width",
      "height"
    ],
    "name": "MaskBoundingBox+",
    "display_name": "\ud83d\udd27 Mask Bounding Box",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFix+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "erode_dilate": [
          "INT",
          {
            "default": 0,
            "min": -256,
            "max": 256,
            "step": 1
          }
        ],
        "fill_holes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 128,
            "step": 1
          }
        ],
        "remove_isolated_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "smooth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "erode_dilate",
        "fill_holes",
        "remove_isolated_pixels",
        "smooth",
        "blur"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFix+",
    "display_name": "\ud83d\udd27 Mask Fix",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFlip+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "axis": [
          [
            "x",
            "y",
            "xy"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "axis"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFlip+",
    "display_name": "\ud83d\udd27 Mask Flip",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromColor+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 127,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red",
        "green",
        "blue",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromColor+",
    "display_name": "\ud83d\udd27 Mask From Color",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromList+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      },
      "optional": {
        "values": [
          "*",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "str_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "0.0, 0.5, 1.0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height"
      ],
      "optional": [
        "values",
        "str_values"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromList+",
    "display_name": "\ud83d\udd27 Mask From List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromRGBCMYBW+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold_r": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_g": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_b": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold_r",
        "threshold_g",
        "threshold_b"
      ]
    },
    "output": [
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "red",
      "green",
      "blue",
      "cyan",
      "magenta",
      "yellow",
      "black",
      "white"
    ],
    "name": "MaskFromRGBCMYBW+",
    "display_name": "\ud83d\udd27 Mask From RGB/CMY/BW",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromSegmentation+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segments": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "remove_isolated_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "remove_small_masks": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "fill_holes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segments",
        "remove_isolated_pixels",
        "remove_small_masks",
        "fill_holes"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromSegmentation+",
    "display_name": "\ud83d\udd27 Mask From Segmentation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskPreview+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "MaskPreview+",
    "display_name": "\ud83d\udd27 Mask Preview",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": true
  },
  "MaskSmooth+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "amount": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 127,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "amount"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskSmooth+",
    "display_name": "\ud83d\udd27 Mask Smooth",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "TransitionMask+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 9999,
            "step": 1
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "end_frame": [
          "INT",
          {
            "default": 9999,
            "min": 0,
            "step": 1
          }
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "horizontal bar",
            "vertical bar",
            "center box",
            "horizontal door",
            "vertical door",
            "circle",
            "fade"
          ]
        ],
        "timing_function": [
          [
            "linear",
            "in",
            "out",
            "in-out"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frames",
        "start_frame",
        "end_frame",
        "transition_type",
        "timing_function"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "TransitionMask+",
    "display_name": "\ud83d\udd27 Transition Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskBatch+": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskBatch+",
    "display_name": "\ud83d\udd27 Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "MaskExpandBatch+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "method": [
          [
            "expand",
            "repeat all",
            "repeat first",
            "repeat last"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "size",
        "method"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskExpandBatch+",
    "display_name": "\ud83d\udd27 Mask Expand Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "MaskFromBatch+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "start",
        "length"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromBatch+",
    "display_name": "\ud83d\udd27 Mask From Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "KSamplerVariationsStochastic+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "variation_seed": [
          "INT:seed",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05,
            "round": 0.01
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "noise_seed",
        "steps",
        "cfg",
        "sampler",
        "scheduler",
        "positive",
        "negative",
        "variation_seed",
        "variation_strength",
        "cfg_scale"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerVariationsStochastic+",
    "display_name": "\ud83d\udd27 KSampler Stochastic Variations",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "KSamplerVariationsWithNoise+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "main_seed": [
          "INT:seed",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.17,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "variation_seed": [
          "INT:seed",
          {
            "default": 12345,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "main_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "variation_strength",
        "variation_seed",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerVariationsWithNoise+",
    "display_name": "\ud83d\udd27 KSampler Variations with Noise Injection",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "InjectLatentNoise+": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "noise_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "normalize": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "noise_seed",
        "noise_strength",
        "normalize"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "InjectLatentNoise+",
    "display_name": "\ud83d\udd27 Inject Latent Noise",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "FluxSamplerParams+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "seed": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "?"
          }
        ],
        "sampler": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "euler"
          }
        ],
        "scheduler": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "simple"
          }
        ],
        "steps": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "20"
          }
        ],
        "guidance": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "3.5"
          }
        ],
        "max_shift": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": ""
          }
        ],
        "base_shift": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": ""
          }
        ],
        "denoise": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.0"
          }
        ]
      },
      "optional": {
        "loras": [
          "LORA_PARAMS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning",
        "latent_image",
        "seed",
        "sampler",
        "scheduler",
        "steps",
        "guidance",
        "max_shift",
        "base_shift",
        "denoise"
      ],
      "optional": [
        "loras"
      ]
    },
    "output": [
      "LATENT",
      "SAMPLER_PARAMS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "latent",
      "params"
    ],
    "name": "FluxSamplerParams+",
    "display_name": "\ud83d\udd27 Flux Sampler Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "GuidanceTimestepping+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "value": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "value",
        "start_at",
        "end_at"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "GuidanceTimestepping+",
    "display_name": "\ud83d\udd27 Guidance Timestep (experimental)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "PlotParameters+": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "params": [
          "SAMPLER_PARAMS"
        ],
        "order_by": [
          [
            "none",
            "time",
            "seed",
            "steps",
            "denoise",
            "sampler",
            "scheduler",
            "guidance",
            "max_shift",
            "base_shift",
            "lora_strength"
          ]
        ],
        "cols_value": [
          [
            "none",
            "time",
            "seed",
            "steps",
            "denoise",
            "sampler",
            "scheduler",
            "guidance",
            "max_shift",
            "base_shift",
            "lora_strength"
          ]
        ],
        "cols_num": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1024
          }
        ],
        "add_prompt": [
          [
            "false",
            "true",
            "excerpt"
          ]
        ],
        "add_params": [
          [
            "false",
            "true",
            "changes only"
          ],
          {
            "default": "true"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "params",
        "order_by",
        "cols_value",
        "cols_num",
        "add_prompt",
        "add_params"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PlotParameters+",
    "display_name": "\ud83d\udd27 Plot Sampler Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "TextEncodeForSamplerParams+": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "Separate prompts with at least three dashes\n---\nLike so"
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TextEncodeForSamplerParams+",
    "display_name": "\ud83d\udd27Text Encode for Sampler Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "SamplerSelectHelper+": {
    "input": {
      "required": {
        "euler": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_ancestral_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "heun": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "heunpp2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_2_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "lms": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_fast": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_adaptive": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2s_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2s_ancestral_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_3m_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_3m_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddpm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "lcm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ipndm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ipndm_v": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "deis": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "res_multistep": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "res_multistep_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "gradient_estimation": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddim": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "uni_pc": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "uni_pc_bh2": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "gradient_estimation",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "SamplerSelectHelper+",
    "display_name": "\ud83d\udd27 Sampler Select Helper",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "SchedulerSelectHelper+": {
    "input": {
      "required": {
        "normal": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "karras": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "exponential": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sgm_uniform": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "simple": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddim_uniform": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "beta": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "linear_quadratic": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "kl_optimal": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "SchedulerSelectHelper+",
    "display_name": "\ud83d\udd27 Scheduler Select Helper",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "LorasForFluxParams+": {
    "input": {
      "required": {
        "lora_1": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model_1": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_1",
        "strength_model_1"
      ]
    },
    "output": [
      "LORA_PARAMS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LORA_PARAMS"
    ],
    "name": "LorasForFluxParams+",
    "display_name": "\ud83d\udd27 LoRA for Flux Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "ModelSamplingSD3Advanced+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "cut_off": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "shift_multiplier": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift",
        "cut_off",
        "shift_multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3Advanced+",
    "display_name": "\ud83d\udd27 Model Sampling SD3 Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "ApplyCLIPSeg+": {
    "input": {
      "required": {
        "clip_seg": [
          "CLIP_SEG"
        ],
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "smooth": [
          "INT",
          {
            "default": 9,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "dilate": [
          "INT",
          {
            "default": 0,
            "min": -32,
            "max": 32,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_seg",
        "image",
        "prompt",
        "threshold",
        "smooth",
        "dilate",
        "blur"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ApplyCLIPSeg+",
    "display_name": "\ud83d\udd27 Apply CLIPSeg",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/segmentation",
    "output_node": false
  },
  "LoadCLIPSegModels+": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CLIP_SEG"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_SEG"
    ],
    "name": "LoadCLIPSegModels+",
    "display_name": "\ud83d\udd27 Load CLIPSeg Models",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/segmentation",
    "output_node": false
  },
  "DrawText+": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "Hello, World!"
          }
        ],
        "font": [
          [
            "ShareTechMono-Regular.ttf"
          ]
        ],
        "size": [
          "INT",
          {
            "default": 56,
            "min": 1,
            "max": 9999,
            "step": 1
          }
        ],
        "color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "background_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#00000000"
          }
        ],
        "shadow_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "shadow_blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "shadow_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "horizontal_align": [
          [
            "left",
            "center",
            "right"
          ]
        ],
        "vertical_align": [
          [
            "top",
            "center",
            "bottom"
          ]
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "direction": [
          [
            "ltr",
            "rtl"
          ]
        ]
      },
      "optional": {
        "img_composite": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "font",
        "size",
        "color",
        "background_color",
        "shadow_distance",
        "shadow_blur",
        "shadow_color",
        "horizontal_align",
        "vertical_align",
        "offset_x",
        "offset_y",
        "direction"
      ],
      "optional": [
        "img_composite"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "DrawText+",
    "display_name": "\ud83d\udd27 Draw Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/text",
    "output_node": false
  },
  "BatchCount+": {
    "input": {
      "required": {
        "batch": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "batch"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "BatchCount+",
    "display_name": "\ud83d\udd27 Batch Count",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "ConsoleDebug+": {
    "input": {
      "required": {
        "value": [
          "*",
          {}
        ]
      },
      "optional": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": "Value:"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ],
      "optional": [
        "prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ConsoleDebug+",
    "display_name": "\ud83d\udd27 Console Debug",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "DebugTensorShape+": {
    "input": {
      "required": {
        "tensor": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "tensor"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "DebugTensorShape+",
    "display_name": "\ud83d\udd27 Debug Tensor Shape",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "DisplayAny": {
    "input": {
      "required": {
        "input": [
          "*",
          {}
        ],
        "mode": [
          [
            "raw value",
            "tensor shape"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "mode"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "DisplayAny",
    "display_name": "\ud83d\udd27 Display Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "ModelCompile+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mode": [
          [
            "default",
            "reduce-overhead",
            "max-autotune",
            "max-autotune-no-cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "fullgraph",
        "dynamic",
        "mode"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelCompile+",
    "display_name": "\ud83d\udd27 Model Compile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "RemoveLatentMask+": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RemoveLatentMask+",
    "display_name": "\ud83d\udd27 Remove Latent Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SDXLEmptyLatentSizePicker+": {
    "input": {
      "required": {
        "resolution": [
          [
            "704x1408 (0.5)",
            "704x1344 (0.52)",
            "768x1344 (0.57)",
            "768x1280 (0.6)",
            "832x1216 (0.68)",
            "832x1152 (0.72)",
            "896x1152 (0.78)",
            "896x1088 (0.82)",
            "960x1088 (0.88)",
            "960x1024 (0.94)",
            "1024x1024 (1.0)",
            "1024x960 (1.07)",
            "1088x960 (1.13)",
            "1088x896 (1.21)",
            "1152x896 (1.29)",
            "1152x832 (1.38)",
            "1216x832 (1.46)",
            "1280x768 (1.67)",
            "1344x768 (1.75)",
            "1344x704 (1.91)",
            "1408x704 (2.0)",
            "1472x704 (2.09)",
            "1536x640 (2.4)",
            "1600x640 (2.5)",
            "1664x576 (2.89)",
            "1728x576 (3.0)"
          ],
          {
            "default": "1024x1024 (1.0)"
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "width_override": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height_override": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "batch_size",
        "width_override",
        "height_override"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "width",
      "height"
    ],
    "name": "SDXLEmptyLatentSizePicker+",
    "display_name": "\ud83d\udd27 Empty Latent Size Picker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleComparison+": {
    "input": {
      "required": {
        "a": [
          "*",
          {
            "default": 0
          }
        ],
        "b": [
          "*",
          {
            "default": 0
          }
        ],
        "comparison": [
          [
            "==",
            "!=",
            "<",
            "<=",
            ">",
            ">="
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "comparison"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "SimpleComparison+",
    "display_name": "\ud83d\udd27 Simple Comparison",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleCondition+": {
    "input": {
      "required": {
        "evaluate": [
          "*",
          {
            "default": 0
          }
        ],
        "on_true": [
          "*",
          {
            "default": 0
          }
        ]
      },
      "optional": {
        "on_false": [
          "*",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "evaluate",
        "on_true"
      ],
      "optional": [
        "on_false"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "result"
    ],
    "name": "SimpleCondition+",
    "display_name": "\ud83d\udd27 Simple Condition",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMath+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0.0
          }
        ],
        "b": [
          "*",
          {
            "default": 0.0
          }
        ],
        "c": [
          "*",
          {
            "default": 0.0
          }
        ]
      },
      "required": {
        "value": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c"
      ],
      "required": [
        "value"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "SimpleMath+",
    "display_name": "\ud83d\udd27 Simple Math",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathDual+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0.0
          }
        ],
        "b": [
          "*",
          {
            "default": 0.0
          }
        ],
        "c": [
          "*",
          {
            "default": 0.0
          }
        ],
        "d": [
          "*",
          {
            "default": 0.0
          }
        ]
      },
      "required": {
        "value_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "value_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c",
        "d"
      ],
      "required": [
        "value_1",
        "value_2"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "int_1",
      "float_1",
      "int_2",
      "float_2"
    ],
    "name": "SimpleMathDual+",
    "display_name": "\ud83d\udd27 Simple Math Dual",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathCondition+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0.0
          }
        ],
        "b": [
          "*",
          {
            "default": 0.0
          }
        ],
        "c": [
          "*",
          {
            "default": 0.0
          }
        ]
      },
      "required": {
        "evaluate": [
          "*",
          {
            "default": 0
          }
        ],
        "on_true": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "on_false": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c"
      ],
      "required": [
        "evaluate",
        "on_true",
        "on_false"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "SimpleMathCondition+",
    "display_name": "\ud83d\udd27 Simple Math Condition",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathBoolean+": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "SimpleMathBoolean+",
    "display_name": "\ud83d\udd27 Simple Math Boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathFloat+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "SimpleMathFloat+",
    "display_name": "\ud83d\udd27 Simple Math Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathInt+": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "SimpleMathInt+",
    "display_name": "\ud83d\udd27 Simple Math Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathPercent+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "SimpleMathPercent+",
    "display_name": "\ud83d\udd27 Simple Math Percent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathSlider+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "display": "slider",
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.001
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.001
          }
        ],
        "rounding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "min",
        "max",
        "rounding"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT"
    ],
    "name": "SimpleMathSlider+",
    "display_name": "\ud83d\udd27 Simple Math Slider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathSliderLowRes+": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "display": "slider",
            "default": 5,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.001
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.001
          }
        ],
        "rounding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "min",
        "max",
        "rounding"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT"
    ],
    "name": "SimpleMathSliderLowRes+",
    "display_name": "\ud83d\udd27 Simple Math Slider low-res",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "ttN tinyLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "config_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "sampling": [
          [
            "Default",
            "eps",
            "v_prediction",
            "lcm",
            "x0"
          ],
          {
            "default": "Default"
          }
        ],
        "zsnr": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "cfg_rescale_mult": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "empty_latent_aspect": [
          [
            "width x height [custom]",
            "512 x 512 [S] 1:1",
            "768 x 768 [S] 1:1",
            "910 x 910 [S] 1:1",
            "512 x 682 [P] 3:4",
            "512 x 768 [P] 2:3",
            "512 x 910 [P] 9:16",
            "682 x 512 [L] 4:3",
            "768 x 512 [L] 3:2",
            "910 x 512 [L] 16:9",
            "1024 x 1024 [S] 1:1",
            "512 x 1024 [P] 1:2",
            "1024 x 512 [L] 2:1",
            "640 x 1536 [P] 9:21",
            "704 x 1472 [P] 9:19",
            "768 x 1344 [P] 9:16",
            "768 x 1216 [P] 5:8",
            "832 x 1216 [P] 2:3",
            "896 x 1152 [P] 3:4",
            "1536 x 640 [L] 21:9",
            "1472 x 704 [L] 19:9",
            "1344 x 768 [L] 16:9",
            "1216 x 768 [L] 8:5",
            "1216 x 832 [L] 3:2",
            "1152 x 896 [L] 4:3"
          ],
          {
            "default": "512 x 512 [S] 1:1"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "ttNnodeVersion": "1.1.0",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "config_name",
        "sampling",
        "zsnr",
        "cfg_rescale_mult",
        "vae_name",
        "clip_skip",
        "empty_latent_aspect",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size"
      ],
      "hidden": [
        "prompt",
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "LATENT",
      "VAE",
      "CLIP",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "latent",
      "vae",
      "clip",
      "width",
      "height"
    ],
    "name": "ttN tinyLoader",
    "display_name": "tinyLoader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/base",
    "output_node": false
  },
  "ttN conditioning": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "loras": [
          "STRING",
          {
            "placeholder": "<lora:loraName:weight:optClipWeight>",
            "multiline": true
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "Positive",
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "negative": [
          "STRING",
          {
            "default": "Negative",
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "prepend_positive": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "prepend_negative": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "loras",
        "positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "negative",
        "negative_token_normalization",
        "negative_weight_interpretation"
      ],
      "optional": [
        "optional_lora_stack",
        "prepend_positive",
        "prepend_negative"
      ],
      "hidden": [
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "positive",
      "negative",
      "clip",
      "pos_string",
      "neg_string"
    ],
    "name": "ttN conditioning",
    "display_name": "tinyConditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/base",
    "output_node": false
  },
  "ttN KSampler_v2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "upscale_method": [
          [
            "None",
            "[latent] nearest-exact",
            "[latent] bilinear",
            "[latent] area",
            "[latent] bicubic",
            "[latent] lanczos",
            "[latent] bislerp",
            "[hiresFix] nearest-exact",
            "[hiresFix] bilinear",
            "[hiresFix] area",
            "[hiresFix] bicubic",
            "[hiresFix] lanczos",
            "[hiresFix] bislerp"
          ],
          {
            "default": "None"
          }
        ],
        "upscale_model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth",
            "None"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.25
          }
        ],
        "rescale": [
          [
            "by percentage",
            "to Width/Height",
            "to longer side - maintain aspect",
            "None"
          ]
        ],
        "percent": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "longer_side": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS SD1"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save",
            "Disabled"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "file_type": [
          [
            "png",
            "jpg",
            "jpeg",
            "tiff",
            "tif",
            "webp",
            "bmp"
          ],
          {
            "default": "png"
          }
        ],
        "embed_workflow": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "clip": [
          "CLIP"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "input_image_override": [
          "IMAGE"
        ],
        "adv_xyPlot": [
          "ADV_XYPLOT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "2.3.1"
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "latent",
        "vae",
        "lora_name",
        "lora_strength",
        "upscale_method",
        "upscale_model_name",
        "factor",
        "rescale",
        "percent",
        "width",
        "height",
        "longer_side",
        "crop",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "image_output",
        "save_prefix",
        "file_type",
        "embed_workflow"
      ],
      "optional": [
        "clip",
        "seed",
        "input_image_override",
        "adv_xyPlot"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "images",
      "seed",
      "plot_image"
    ],
    "name": "ttN KSampler_v2",
    "display_name": "tinyKSampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/base",
    "output_node": true
  },
  "ttN pipeLoader_v2": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "config_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "loras": [
          "STRING",
          {
            "placeholder": "<lora:loraName:weight:optClipWeight>",
            "multiline": true
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "Positive",
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "negative": [
          "STRING",
          {
            "default": "Negative",
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "empty_latent_aspect": [
          [
            "width x height [custom]",
            "512 x 512 [S] 1:1",
            "768 x 768 [S] 1:1",
            "910 x 910 [S] 1:1",
            "512 x 682 [P] 3:4",
            "512 x 768 [P] 2:3",
            "512 x 910 [P] 9:16",
            "682 x 512 [L] 4:3",
            "768 x 512 [L] 3:2",
            "910 x 512 [L] 16:9",
            "512 x 1024 [P] 1:2",
            "1024 x 512 [L] 2:1",
            "1024 x 1024 [S] 1:1"
          ],
          {
            "default": "512 x 512 [S] 1:1"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "prepend_positive": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "prepend_negative": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "ttNnodeVersion": "2.1.0",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "config_name",
        "vae_name",
        "clip_skip",
        "loras",
        "positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "negative",
        "negative_token_normalization",
        "negative_weight_interpretation",
        "empty_latent_aspect",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size",
        "seed"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "optional_lora_stack",
        "optional_controlnet_stack",
        "prepend_positive",
        "prepend_negative"
      ],
      "hidden": [
        "prompt",
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "INT",
      "INT",
      "INT",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "seed",
      "width",
      "height",
      "pos_string",
      "neg_string"
    ],
    "name": "ttN pipeLoader_v2",
    "display_name": "pipeLoader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": false
  },
  "ttN pipeKSampler_v2": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "upscale_method": [
          [
            "None",
            "[latent] nearest-exact",
            "[latent] bilinear",
            "[latent] area",
            "[latent] bicubic",
            "[latent] lanczos",
            "[latent] bislerp",
            "[hiresFix] nearest-exact",
            "[hiresFix] bilinear",
            "[hiresFix] area",
            "[hiresFix] bicubic",
            "[hiresFix] lanczos",
            "[hiresFix] bislerp"
          ],
          {
            "default": "None"
          }
        ],
        "upscale_model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth",
            "None"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.25
          }
        ],
        "rescale": [
          [
            "by percentage",
            "to Width/Height",
            "to longer side - maintain aspect",
            "None"
          ]
        ],
        "percent": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "longer_side": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS SD1"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save",
            "Disabled"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "file_type": [
          [
            "png",
            "jpg",
            "jpeg",
            "tiff",
            "tif",
            "webp",
            "bmp"
          ],
          {
            "default": "png"
          }
        ],
        "embed_workflow": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_positive": [
          "CONDITIONING"
        ],
        "optional_negative": [
          "CONDITIONING"
        ],
        "optional_latent": [
          "LATENT"
        ],
        "optional_vae": [
          "VAE"
        ],
        "optional_clip": [
          "CLIP"
        ],
        "input_image_override": [
          "IMAGE"
        ],
        "adv_xyPlot": [
          "ADV_XYPLOT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "2.3.1"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "lora_name",
        "lora_strength",
        "upscale_method",
        "upscale_model_name",
        "factor",
        "rescale",
        "percent",
        "width",
        "height",
        "longer_side",
        "crop",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "image_output",
        "save_prefix",
        "file_type",
        "embed_workflow"
      ],
      "optional": [
        "seed",
        "optional_model",
        "optional_positive",
        "optional_negative",
        "optional_latent",
        "optional_vae",
        "optional_clip",
        "input_image_override",
        "adv_xyPlot"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "images",
      "seed",
      "plot_image"
    ],
    "name": "ttN pipeKSampler_v2",
    "display_name": "pipeKSampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": true
  },
  "ttN pipeKSamplerAdvanced_v2": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "upscale_method": [
          [
            "None",
            "[latent] nearest-exact",
            "[latent] bilinear",
            "[latent] area",
            "[latent] bicubic",
            "[latent] lanczos",
            "[latent] bislerp",
            "[hiresFix] nearest-exact",
            "[hiresFix] bilinear",
            "[hiresFix] area",
            "[hiresFix] bicubic",
            "[hiresFix] lanczos",
            "[hiresFix] bislerp"
          ],
          {
            "default": "None"
          }
        ],
        "upscale_model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth",
            "None"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.25
          }
        ],
        "rescale": [
          [
            "by percentage",
            "to Width/Height",
            "to longer side - maintain aspect",
            "None"
          ]
        ],
        "percent": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "longer_side": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS SD1"
          ]
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save",
            "Disabled"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "file_type": [
          [
            "png",
            "jpg",
            "jpeg",
            "tiff",
            "tif",
            "webp",
            "bmp"
          ],
          {
            "default": "png"
          }
        ],
        "embed_workflow": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_positive": [
          "CONDITIONING"
        ],
        "optional_negative": [
          "CONDITIONING"
        ],
        "optional_latent": [
          "LATENT"
        ],
        "optional_vae": [
          "VAE"
        ],
        "optional_clip": [
          "CLIP"
        ],
        "input_image_override": [
          "IMAGE"
        ],
        "adv_xyPlot": [
          "ADV_XYPLOT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "2.3.0"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "lora_name",
        "lora_strength",
        "upscale_method",
        "upscale_model_name",
        "factor",
        "rescale",
        "percent",
        "width",
        "height",
        "longer_side",
        "crop",
        "add_noise",
        "noise",
        "steps",
        "start_at_step",
        "end_at_step",
        "cfg",
        "sampler_name",
        "scheduler",
        "return_with_leftover_noise",
        "image_output",
        "save_prefix",
        "file_type",
        "embed_workflow"
      ],
      "optional": [
        "noise_seed",
        "optional_model",
        "optional_positive",
        "optional_negative",
        "optional_latent",
        "optional_vae",
        "optional_clip",
        "input_image_override",
        "adv_xyPlot"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "image",
      "seed"
    ],
    "name": "ttN pipeKSamplerAdvanced_v2",
    "display_name": "pipeKSamplerAdvanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": true
  },
  "ttN pipeLoaderSDXL_v2": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "config_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "loras": [
          "STRING",
          {
            "placeholder": "Loras - <lora:loraName:weight:optClipWeight>",
            "multiline": true
          }
        ],
        "refiner_ckpt_name": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "refiner_config_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "positive_g": [
          "STRING",
          {
            "placeholder": "Linguistic Positive (positive_g)",
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "positive_l": [
          "STRING",
          {
            "placeholder": "Supporting Terms (positive_l)",
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "negative_g": [
          "STRING",
          {
            "placeholder": "negative_g",
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "negative_l": [
          "STRING",
          {
            "placeholder": "negative_l",
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "conditioning_aspect": [
          [
            "width x height [custom]",
            "1x Empty Latent Aspect",
            "2x Empty Latent Aspect",
            "3x Empty Latent Aspect",
            "4x Empty Latent Aspect",
            "5x Empty Latent Aspect",
            "6x Empty Latent ASpect",
            "7x Empty Latent Aspect",
            "8x Empty Latent Aspect"
          ],
          {
            "default": "1x Empty Latent Aspect"
          }
        ],
        "conditioning_width": [
          "INT",
          {
            "default": 2048.0,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "conditioning_height": [
          "INT",
          {
            "default": 2048.0,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_aspect": [
          [
            "width x height [custom]",
            "1x Empty Latent Aspect",
            "2x Empty Latent Aspect",
            "3x Empty Latent Aspect",
            "4x Empty Latent Aspect",
            "5x Empty Latent Aspect",
            "6x Empty Latent ASpect",
            "7x Empty Latent Aspect",
            "8x Empty Latent Aspect"
          ],
          {
            "default": "1x Empty Latent Aspect"
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "positive_ascore": [
          "INT",
          {
            "default": 6.0,
            "min": 0,
            "step": 0.1
          }
        ],
        "negative_ascore": [
          "INT",
          {
            "default": 2.0,
            "min": 0,
            "step": 0.1
          }
        ],
        "empty_latent_aspect": [
          [
            "width x height [custom]",
            "1024 x 1024 [S] 1:1",
            "640 x 1536 [P] 9:21",
            "704 x 1472 [P] 9:19",
            "768 x 1344 [P] 9:16",
            "768 x 1216 [P] 5:8",
            "832 x 1216 [P] 2:3",
            "896 x 1152 [P] 3:4",
            "1536 x 640 [L] 21:9",
            "1472 x 704 [L] 19:9",
            "1344 x 768 [L] 16:9",
            "1216 x 768 [L] 8:5",
            "1216 x 832 [L] 3:2",
            "1152 x 896 [L] 4:3"
          ],
          {
            "default": "1024 x 1024 [S] 1:1"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "refiner_model_override": [
          "MODEL"
        ],
        "refiner_clip_override": [
          "CLIP"
        ],
        "prepend_positive_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "prepend_positive_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "prepend_negative_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "prepend_negative_l": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "ttNnodeVersion": "2.1.0",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "config_name",
        "vae_name",
        "clip_skip",
        "loras",
        "refiner_ckpt_name",
        "refiner_config_name",
        "positive_g",
        "positive_l",
        "negative_g",
        "negative_l",
        "conditioning_aspect",
        "conditioning_width",
        "conditioning_height",
        "crop_width",
        "crop_height",
        "target_aspect",
        "target_width",
        "target_height",
        "positive_ascore",
        "negative_ascore",
        "empty_latent_aspect",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size",
        "seed"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "optional_lora_stack",
        "optional_controlnet_stack",
        "refiner_model_override",
        "refiner_clip_override",
        "prepend_positive_g",
        "prepend_positive_l",
        "prepend_negative_g",
        "prepend_negative_l"
      ],
      "hidden": [
        "prompt",
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE_SDXL",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "VAE",
      "CLIP",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "CLIP",
      "LATENT",
      "INT",
      "INT",
      "INT",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "sdxl_pipe",
      "model",
      "positive",
      "negative",
      "vae",
      "clip",
      "refiner_model",
      "refiner_positive",
      "refiner_negative",
      "refiner_clip",
      "latent",
      "seed",
      "width",
      "height",
      "pos_string",
      "neg_string"
    ],
    "name": "ttN pipeLoaderSDXL_v2",
    "display_name": "pipeLoaderSDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": false
  },
  "ttN pipeKSamplerSDXL_v2": {
    "input": {
      "required": {
        "sdxl_pipe": [
          "PIPE_LINE_SDXL"
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "upscale_method": [
          [
            "None",
            "[latent] nearest-exact",
            "[latent] bilinear",
            "[latent] area",
            "[latent] bicubic",
            "[latent] lanczos",
            "[latent] bislerp",
            "[hiresFix] nearest-exact",
            "[hiresFix] bilinear",
            "[hiresFix] area",
            "[hiresFix] bicubic",
            "[hiresFix] lanczos",
            "[hiresFix] bislerp"
          ],
          {
            "default": "None"
          }
        ],
        "upscale_model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth",
            "None"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.25
          }
        ],
        "rescale": [
          [
            "by percentage",
            "to Width/Height",
            "to longer side - maintain aspect",
            "None"
          ]
        ],
        "percent": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "longer_side": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "base_steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "refiner_steps": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000
          }
        ],
        "refiner_cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "refiner_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS SD1"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save",
            "Disabled"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "file_type": [
          [
            "png",
            "jpg",
            "jpeg",
            "tiff",
            "tif",
            "webp",
            "bmp"
          ],
          {
            "default": "png"
          }
        ],
        "embed_workflow": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_positive": [
          "CONDITIONING"
        ],
        "optional_negative": [
          "CONDITIONING"
        ],
        "optional_latent": [
          "LATENT"
        ],
        "optional_vae": [
          "VAE"
        ],
        "optional_refiner_model": [
          "MODEL"
        ],
        "optional_refiner_positive": [
          "CONDITIONING"
        ],
        "optional_refiner_negative": [
          "CONDITIONING"
        ],
        "optional_clip": [
          "CLIP"
        ],
        "input_image_override": [
          "IMAGE"
        ],
        "adv_xyPlot": [
          "ADV_XYPLOT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "2.3.1"
      }
    },
    "input_order": {
      "required": [
        "sdxl_pipe",
        "lora_name",
        "lora_strength",
        "upscale_method",
        "upscale_model_name",
        "factor",
        "rescale",
        "percent",
        "width",
        "height",
        "longer_side",
        "crop",
        "base_steps",
        "cfg",
        "denoise",
        "refiner_steps",
        "refiner_cfg",
        "refiner_denoise",
        "sampler_name",
        "scheduler",
        "image_output",
        "save_prefix",
        "file_type",
        "embed_workflow"
      ],
      "optional": [
        "seed",
        "optional_model",
        "optional_positive",
        "optional_negative",
        "optional_latent",
        "optional_vae",
        "optional_refiner_model",
        "optional_refiner_positive",
        "optional_refiner_negative",
        "optional_clip",
        "input_image_override",
        "adv_xyPlot"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "PIPE_LINE_SDXL",
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "sdxl_pipe",
      "pipe",
      "model",
      "positive",
      "negative",
      "refiner_model",
      "refiner_positive",
      "refiner_negative",
      "latent",
      "vae",
      "clip",
      "images",
      "seed",
      "plot_image"
    ],
    "name": "ttN pipeKSamplerSDXL_v2",
    "display_name": "pipeKSamplerSDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": true
  },
  "ttN advanced xyPlot": {
    "input": {
      "required": {
        "grid_spacing": [
          "INT",
          {
            "min": 0,
            "max": 500,
            "step": 5,
            "default": 0
          }
        ],
        "save_individuals": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "flip_xy": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "x_plot": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "X_PLOT\nExample:\n\n<axis number:label1>\n[node_ID:widget_Name='value']\n\n<axis number2:label2>\n[node_ID:widget_Name='value2']\n[node_ID:widget2_Name='value']\n[node_ID2:widget_Name='value']\n\netc...",
            "pysssss.autocomplete": false
          }
        ],
        "y_plot": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Y_PLOT\nExample:\n\n<axis number:label1>\n[node_ID:widget_Name='value']\n\n<axis number2:label2>\n[node_ID:widget_Name='value2']\n[node_ID:widget2_Name='value']\n[node_ID2:widget_Name='value']\n\netc...",
            "pysssss.autocomplete": false
          }
        ],
        "z_plot": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Z_PLOT\nExample:\n\n<axis number:label1>\n[node_ID:widget_Name='value']\n\n<axis number2:label2>\n[node_ID:widget_Name='value2']\n[node_ID:widget2_Name='value']\n[node_ID2:widget_Name='value']\n\netc...",
            "pysssss.autocomplete": false
          }
        ],
        "invert_background": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "1.2.1"
      }
    },
    "input_order": {
      "required": [
        "grid_spacing",
        "save_individuals",
        "flip_xy",
        "x_plot",
        "y_plot",
        "z_plot",
        "invert_background"
      ],
      "hidden": [
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "ADV_XYPLOT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "adv_xyPlot"
    ],
    "name": "ttN advanced xyPlot",
    "display_name": "advanced xyPlot",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/xyPlot",
    "output_node": false
  },
  "ttN advPlot images": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "image": [
          "IMAGE",
          {}
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save",
            "Disabled"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "file_type": [
          [
            "png",
            "jpg",
            "jpeg",
            "tiff",
            "tif",
            "webp",
            "bmp"
          ],
          {
            "default": "png"
          }
        ],
        "embed_workflow": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "adv_xyPlot": [
          "ADV_XYPLOT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "image",
        "image_output",
        "save_prefix",
        "file_type",
        "embed_workflow"
      ],
      "optional": [
        "adv_xyPlot"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "plot_image"
    ],
    "name": "ttN advPlot images",
    "display_name": "advPlot images",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/xyPlot",
    "output_node": true
  },
  "ttN advPlot range": {
    "input": {
      "required": {
        "node": [
          [
            "Connect to xyPlot for options"
          ],
          {}
        ],
        "widget": [
          [
            "Select node for options"
          ],
          {}
        ],
        "range_mode": [
          [
            "step_int",
            "num_steps_int",
            "step_float",
            "num_steps_float"
          ],
          {}
        ],
        "start": [
          "FLOAT",
          {
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01,
            "default": 1
          }
        ],
        "step": [
          "FLOAT",
          {
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01,
            "default": 1
          }
        ],
        "stop": [
          "FLOAT",
          {
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01,
            "default": 5
          }
        ],
        "include_stop": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "num_steps": [
          "INT",
          {
            "min": 1,
            "max": 1000,
            "step": 1,
            "default": 5
          }
        ],
        "label_type": [
          [
            "Values",
            "Title and Values",
            "ID, Title and Values"
          ],
          {
            "default": "Values"
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.1.0"
      }
    },
    "input_order": {
      "required": [
        "node",
        "widget",
        "range_mode",
        "start",
        "step",
        "stop",
        "include_stop",
        "num_steps",
        "label_type"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "plot_text"
    ],
    "name": "ttN advPlot range",
    "display_name": "advPlot range",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/xyPlot",
    "output_node": true
  },
  "ttN advPlot string": {
    "input": {
      "required": {
        "node": [
          [
            "Connect to xyPlot for options"
          ],
          {}
        ],
        "widget": [
          [
            "Select node for options"
          ],
          {}
        ],
        "replace_mode": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "search_string": [
          "STRING",
          {
            "default": ""
          }
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": "\\n",
            "multiline": false
          }
        ],
        "label_type": [
          [
            "Values",
            "Title and Values",
            "ID, Title and Values"
          ],
          {
            "default": "Values"
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.1.0"
      }
    },
    "input_order": {
      "required": [
        "node",
        "widget",
        "replace_mode",
        "search_string",
        "text",
        "delimiter",
        "label_type"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "plot_text"
    ],
    "name": "ttN advPlot string",
    "display_name": "advPlot string",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/xyPlot",
    "output_node": true
  },
  "ttN advPlot combo": {
    "input": {
      "required": {
        "node": [
          [
            "Connect to xyPlot for options"
          ],
          {}
        ],
        "widget": [
          [
            "Select node for options"
          ],
          {}
        ],
        "mode": [
          [
            "all",
            "range",
            "select"
          ]
        ],
        "start_from": [
          [
            "Select widget for options"
          ]
        ],
        "end_with": [
          [
            "Select widget for options"
          ]
        ],
        "select": [
          [
            "Select widget for options"
          ]
        ],
        "selection": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "label_type": [
          [
            "Values",
            "Title and Values",
            "ID, Title and Values"
          ],
          {
            "default": "Values"
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.1.0",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "node",
        "widget",
        "mode",
        "start_from",
        "end_with",
        "select",
        "selection",
        "label_type"
      ],
      "hidden": [
        "ttNnodeVersion",
        "prompt"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "plot_text"
    ],
    "name": "ttN advPlot combo",
    "display_name": "advPlot combo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/xyPlot",
    "output_node": true
  },
  "ttN advPlot merge": {
    "input": {
      "required": {
        "label_type": [
          [
            "Values",
            "Title and Values",
            "ID, Title and Values"
          ],
          {
            "default": "Values"
          }
        ]
      },
      "optional": {
        "plot_text1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "plot_text2": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "label_type"
      ],
      "optional": [
        "plot_text1",
        "plot_text2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "plot_text"
    ],
    "name": "ttN advPlot merge",
    "display_name": "advPlot merge",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/xyPlot",
    "output_node": false
  },
  "ttN pipeEDIT": {
    "input": {
      "required": {},
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.1.1",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "pipe",
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "image",
        "seed"
      ],
      "hidden": [
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "image",
      "seed"
    ],
    "name": "ttN pipeEDIT",
    "display_name": "pipeEDIT",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": false
  },
  "ttN pipe2BASIC": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.1.0"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "PIPE_LINE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "basic_pipe",
      "pipe"
    ],
    "name": "ttN pipe2BASIC",
    "display_name": "pipe > basic_pipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": false
  },
  "ttN pipe2DETAILER": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "wildcard spec: if kept empty, this option will be ignored"
          }
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.2.0"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "bbox_detector",
        "wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "DETAILER_PIPE",
      "PIPE_LINE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "detailer_pipe",
      "pipe"
    ],
    "name": "ttN pipe2DETAILER",
    "display_name": "pipe > detailer_pipe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": false
  },
  "ttN pipeEncodeConcat": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "toggle": [
          [
            true,
            false
          ]
        ]
      },
      "optional": {
        "positive": [
          "STRING",
          {
            "default": "Positive",
            "multiline": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "negative": [
          "STRING",
          {
            "default": "Negative",
            "multiline": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "optional_positive_from": [
          "CONDITIONING"
        ],
        "optional_negative_from": [
          "CONDITIONING"
        ],
        "optional_clip": [
          "CLIP"
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.2",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "toggle"
      ],
      "optional": [
        "positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "negative",
        "negative_token_normalization",
        "negative_weight_interpretation",
        "optional_positive_from",
        "optional_negative_from",
        "optional_clip"
      ],
      "hidden": [
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "CONDITIONING",
      "CONDITIONING",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "positive",
      "negative",
      "clip"
    ],
    "name": "ttN pipeEncodeConcat",
    "display_name": "pipeEncodeConcat",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": true
  },
  "ttN pipeLoraStack": {
    "input": {
      "required": {
        "toggle": [
          [
            true,
            false
          ]
        ],
        "mode": [
          [
            "simple",
            "advanced"
          ]
        ],
        "num_loras": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 20
          }
        ]
      },
      "optional": {
        "optional_pipe": [
          "PIPE_LINE",
          {
            "default": null
          }
        ],
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "lora_1_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_1_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_1_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_2_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_2_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_2_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_3_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_3_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_3_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_4_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_4_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_4_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_4_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_5_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_5_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_5_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_5_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_6_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_6_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_6_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_6_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_7_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_7_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_7_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_7_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_8_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_8_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_8_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_8_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_9_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_9_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_9_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_9_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_10_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_10_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_10_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_10_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_11_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_11_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_11_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_11_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_12_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_12_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_12_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_12_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_13_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_13_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_13_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_13_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_14_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_14_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_14_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_14_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_15_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_15_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_15_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_15_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_16_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_16_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_16_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_16_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_17_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_17_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_17_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_17_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_18_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_18_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_18_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_18_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_19_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_19_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_19_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_19_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_20_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "lora_20_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_20_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_20_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.1.1"
      }
    },
    "input_order": {
      "required": [
        "toggle",
        "mode",
        "num_loras"
      ],
      "optional": [
        "optional_pipe",
        "model_override",
        "clip_override",
        "optional_lora_stack",
        "lora_1_name",
        "lora_1_strength",
        "lora_1_model_strength",
        "lora_1_clip_strength",
        "lora_2_name",
        "lora_2_strength",
        "lora_2_model_strength",
        "lora_2_clip_strength",
        "lora_3_name",
        "lora_3_strength",
        "lora_3_model_strength",
        "lora_3_clip_strength",
        "lora_4_name",
        "lora_4_strength",
        "lora_4_model_strength",
        "lora_4_clip_strength",
        "lora_5_name",
        "lora_5_strength",
        "lora_5_model_strength",
        "lora_5_clip_strength",
        "lora_6_name",
        "lora_6_strength",
        "lora_6_model_strength",
        "lora_6_clip_strength",
        "lora_7_name",
        "lora_7_strength",
        "lora_7_model_strength",
        "lora_7_clip_strength",
        "lora_8_name",
        "lora_8_strength",
        "lora_8_model_strength",
        "lora_8_clip_strength",
        "lora_9_name",
        "lora_9_strength",
        "lora_9_model_strength",
        "lora_9_clip_strength",
        "lora_10_name",
        "lora_10_strength",
        "lora_10_model_strength",
        "lora_10_clip_strength",
        "lora_11_name",
        "lora_11_strength",
        "lora_11_model_strength",
        "lora_11_clip_strength",
        "lora_12_name",
        "lora_12_strength",
        "lora_12_model_strength",
        "lora_12_clip_strength",
        "lora_13_name",
        "lora_13_strength",
        "lora_13_model_strength",
        "lora_13_clip_strength",
        "lora_14_name",
        "lora_14_strength",
        "lora_14_model_strength",
        "lora_14_clip_strength",
        "lora_15_name",
        "lora_15_strength",
        "lora_15_model_strength",
        "lora_15_clip_strength",
        "lora_16_name",
        "lora_16_strength",
        "lora_16_model_strength",
        "lora_16_clip_strength",
        "lora_17_name",
        "lora_17_strength",
        "lora_17_model_strength",
        "lora_17_clip_strength",
        "lora_18_name",
        "lora_18_strength",
        "lora_18_model_strength",
        "lora_18_clip_strength",
        "lora_19_name",
        "lora_19_strength",
        "lora_19_model_strength",
        "lora_19_clip_strength",
        "lora_20_name",
        "lora_20_strength",
        "lora_20_model_strength",
        "lora_20_clip_strength"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LORA_STACK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "optional_pipe",
      "lora_stack"
    ],
    "name": "ttN pipeLoraStack",
    "display_name": "pipeLoraStack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/pipe",
    "output_node": false
  },
  "ttN multiModelMerge": {
    "input": {
      "required": {
        "ckpt_A_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "config_A_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "ckpt_B_name": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "config_B_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "ckpt_C_name": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "config_C_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "model_interpolation": [
          [
            "Weighted sum = (  A*(1-M) + B*M  )",
            "Add difference = (  A + (B-C)*M  )",
            "A Only"
          ]
        ],
        "model_multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "clip_interpolation": [
          [
            "Follow model interp",
            "Weighted sum = (  A*(1-M) + B*M  )",
            "Add difference = (  A + (B-C)*M  )",
            "A Only",
            "B Only",
            "C Only"
          ]
        ],
        "clip_multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "model_A_override": [
          "MODEL"
        ],
        "model_B_override": [
          "MODEL"
        ],
        "model_C_override": [
          "MODEL"
        ],
        "clip_A_override": [
          "CLIP"
        ],
        "clip_B_override": [
          "CLIP"
        ],
        "clip_C_override": [
          "CLIP"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "ttNnodeVersion": "1.1.0",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_A_name",
        "config_A_name",
        "ckpt_B_name",
        "config_B_name",
        "ckpt_C_name",
        "config_C_name",
        "model_interpolation",
        "model_multiplier",
        "clip_interpolation",
        "clip_multiplier"
      ],
      "optional": [
        "model_A_override",
        "model_B_override",
        "model_C_override",
        "clip_A_override",
        "clip_B_override",
        "clip_C_override"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "clip"
    ],
    "name": "ttN multiModelMerge",
    "display_name": "multiModelMerge",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra",
    "output_node": false
  },
  "ttN debugInput": {
    "input": {
      "required": {
        "print_to_console": [
          "BOOLEAN"
        ],
        "console_title": [
          "STRING",
          {
            "default": "ttN debug:"
          }
        ],
        "console_color": [
          [
            "Black",
            "Red",
            "Green",
            "Yellow",
            "Blue",
            "Violet",
            "Cyan",
            "White",
            "Grey",
            "LightRed",
            "LightGreen",
            "LightYellow",
            "LightBlue",
            "LightViolet",
            "LightCyan",
            "LightWhite"
          ],
          {
            "default": "Red"
          }
        ]
      },
      "optional": {
        "debug": [
          "*",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "print_to_console",
        "console_title",
        "console_color"
      ],
      "optional": [
        "debug"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ttN debugInput",
    "display_name": "debugInput",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/util",
    "output_node": true
  },
  "ttN text": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text"
    ],
    "name": "ttN text",
    "display_name": "text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/text",
    "output_node": false
  },
  "ttN textDebug": {
    "input": {
      "required": {
        "print_to_console": [
          [
            false,
            true
          ]
        ],
        "console_title": [
          "STRING",
          {
            "default": ""
          }
        ],
        "execute": [
          [
            "Always",
            "On Change"
          ]
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true,
            "dynamicPrompts": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "1.0."
      }
    },
    "input_order": {
      "required": [
        "print_to_console",
        "console_title",
        "execute",
        "text"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text"
    ],
    "name": "ttN textDebug",
    "display_name": "textDebug",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/text",
    "output_node": true
  },
  "ttN concat": {
    "input": {
      "required": {
        "text1": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text2": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text3": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "text1",
        "text2",
        "text3",
        "delimiter"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "concat"
    ],
    "name": "ttN concat",
    "display_name": "textConcat",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/text",
    "output_node": false
  },
  "ttN text3BOX_3WAYconcat": {
    "input": {
      "required": {
        "text1": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text2": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text3": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "text1",
        "text2",
        "text3",
        "delimiter"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "text1",
      "text2",
      "text3",
      "1 & 2",
      "1 & 3",
      "2 & 3",
      "concat"
    ],
    "name": "ttN text3BOX_3WAYconcat",
    "display_name": "3x TXT Loader MultiConcat",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/text",
    "output_node": false
  },
  "ttN text7BOX_concat": {
    "input": {
      "required": {
        "text1": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text2": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text3": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text4": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text5": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text6": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "text7": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "text1",
        "text2",
        "text3",
        "text4",
        "text5",
        "text6",
        "text7",
        "delimiter"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "text1",
      "text2",
      "text3",
      "text4",
      "text5",
      "text6",
      "text7",
      "concat"
    ],
    "name": "ttN text7BOX_concat",
    "display_name": "7x TXT Loader Concat",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/text",
    "output_node": false
  },
  "ttN textCycleLine": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "dynamicPrompts": true
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "index_control": [
          [
            "increment",
            "decrement",
            "randomize",
            "fixed"
          ]
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "text",
        "index",
        "index_control"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ttN textCycleLine",
    "display_name": "textCycleLine",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/text",
    "output_node": false
  },
  "ttN textOutput": {
    "input": {
      "required": {
        "text_output": [
          [
            "Preview",
            "Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "/ComfyUI/output",
            "multiline": false
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "number_padding": [
          [
            "None",
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          {
            "default": 5
          }
        ],
        "file_type": [
          [
            "txt",
            "md",
            "rtf",
            "log",
            "ini",
            "csv"
          ],
          {
            "default": "txt"
          }
        ],
        "overwrite_existing": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "1.2.0"
      }
    },
    "input_order": {
      "required": [
        "text_output",
        "text",
        "output_path",
        "save_prefix",
        "number_padding",
        "file_type",
        "overwrite_existing"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text"
    ],
    "name": "ttN textOutput",
    "display_name": "textOutput",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/text",
    "output_node": true
  },
  "ttN imageOutput": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "/ComfyUI/output",
            "multiline": false
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "number_padding": [
          [
            "None",
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          {
            "default": 5
          }
        ],
        "file_type": [
          [
            "png",
            "jpg",
            "jpeg",
            "tiff",
            "tif",
            "webp",
            "bmp"
          ],
          {
            "default": "png"
          }
        ],
        "overwrite_existing": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "embed_workflow": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "1.2.0"
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_output",
        "output_path",
        "save_prefix",
        "number_padding",
        "file_type",
        "overwrite_existing",
        "embed_workflow"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ttN imageOutput",
    "display_name": "imageOutput",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/image",
    "output_node": true
  },
  "ttN imageREMBG": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_output",
        "save_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "ttN imageREMBG",
    "display_name": "imageRemBG",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/image",
    "output_node": true
  },
  "ttN hiresfixScale": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4.pth"
          ]
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "rescale_after_model": [
          [
            false,
            true
          ],
          {
            "default": true
          }
        ],
        "rescale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos",
            "bislerp"
          ]
        ],
        "rescale": [
          [
            "by percentage",
            "to Width/Height",
            "to longer side - maintain aspect"
          ]
        ],
        "percent": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "longer_side": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "output_latent": [
          [
            false,
            true
          ],
          {
            "default": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "ttNnodeVersion": "1.1.0"
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "vae",
        "image",
        "rescale_after_model",
        "rescale_method",
        "rescale",
        "percent",
        "width",
        "height",
        "longer_side",
        "crop",
        "image_output",
        "save_prefix",
        "output_latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "LATENT",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "latent",
      "image"
    ],
    "name": "ttN hiresfixScale",
    "display_name": "hiresfixScale",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/image",
    "output_node": true
  },
  "ttN int": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "int"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "int",
      "float",
      "text"
    ],
    "name": "ttN int",
    "display_name": "int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/util",
    "output_node": false
  },
  "ttN float": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "float"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "float",
      "int",
      "text"
    ],
    "name": "ttN float",
    "display_name": "float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/util",
    "output_node": false
  },
  "ttN seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.0.0"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "seed"
    ],
    "name": "ttN seed",
    "display_name": "seed",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/util",
    "output_node": true
  },
  "ttN xyPlot": {
    "input": {
      "required": {
        "grid_spacing": [
          "INT",
          {
            "min": 0,
            "max": 500,
            "step": 5,
            "default": 0
          }
        ],
        "latent_id": [
          "INT",
          {
            "min": 0,
            "max": 100,
            "step": 1,
            "default": 0
          }
        ],
        "output_individuals": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ],
        "flip_xy": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ],
        "x_axis": [
          [
            "None",
            "---------------------",
            "sampler: lora_name",
            "sampler: lora_model_strength",
            "sampler: lora_clip_strength",
            "sampler: lora_model&clip_strength",
            "sampler: steps",
            "sampler: cfg",
            "sampler: sampler_name",
            "sampler: scheduler",
            "sampler: denoise",
            "sampler: seed",
            "---------------------",
            "loader: ckpt_name",
            "loader: vae_name",
            "loader: clip_skip",
            "loader: lora1_name",
            "loader: lora1_model_strength",
            "loader: lora1_clip_strength",
            "loader: lora1_model&clip_strength",
            "loader: lora2_name",
            "loader: lora2_model_strength",
            "loader: lora2_clip_strength",
            "loader: lora2_model&clip_strength",
            "loader: lora3_name",
            "loader: lora3_model_strength",
            "loader: lora3_clip_strength",
            "loader: lora3_model&clip_strength",
            "loader: positive",
            "loader: positive_token_normalization",
            "loader: positive_weight_interpretation",
            "loader: negative",
            "loader: negative_token_normalization",
            "loader: negative_weight_interpretation"
          ],
          {
            "default": "None"
          }
        ],
        "x_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "insert values seperated by \"; \""
          }
        ],
        "y_axis": [
          [
            "None",
            "---------------------",
            "sampler: lora_name",
            "sampler: lora_model_strength",
            "sampler: lora_clip_strength",
            "sampler: lora_model&clip_strength",
            "sampler: steps",
            "sampler: cfg",
            "sampler: sampler_name",
            "sampler: scheduler",
            "sampler: denoise",
            "sampler: seed",
            "---------------------",
            "loader: ckpt_name",
            "loader: vae_name",
            "loader: clip_skip",
            "loader: lora1_name",
            "loader: lora1_model_strength",
            "loader: lora1_clip_strength",
            "loader: lora1_model&clip_strength",
            "loader: lora2_name",
            "loader: lora2_model_strength",
            "loader: lora2_clip_strength",
            "loader: lora2_model&clip_strength",
            "loader: lora3_name",
            "loader: lora3_model_strength",
            "loader: lora3_clip_strength",
            "loader: lora3_model&clip_strength",
            "loader: positive",
            "loader: positive_token_normalization",
            "loader: positive_weight_interpretation",
            "loader: negative",
            "loader: negative_token_normalization",
            "loader: negative_weight_interpretation"
          ],
          {
            "default": "None"
          }
        ],
        "y_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "insert values seperated by \"; \""
          }
        ]
      },
      "hidden": {
        "plot_dict": [
          {
            "lora_name": [
              "None",
              "1.5/pixel-art-xl-v1.0.safetensors",
              "1.5/pixel-art-xl-v1.1.safetensors",
              "1990sAnalogStyle.safetensors",
              "Instagram_Selfie_SDXL.safetensors",
              "MJ52_v2.0.safetensors",
              "NSFWFilter.safetensors",
              "Pinterest_Selfie_V4.safetensors",
              "Pinterest_Selfie_V5_20_epochs.safetensors",
              "Pinterest_Snap_Selfie.safetensors",
              "SD1.5/pixel-art-xl-v1.0.safetensors",
              "SD1.5/pixel-art-xl-v1.1.safetensors",
              "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
              "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
              "badquality.safetensors",
              "blurxl.safetensors",
              "dark.safetensors",
              "envyzoomslider.safetensors",
              "hand_5_5.safetensors",
              "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
              "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "ip-adapter-faceid_sd15_lora.safetensors",
              "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "lcm.safetensors",
              "lcm_sdxl.safetensors",
              "lcmxl.safetensors",
              "midjourney.safetensors",
              "more_details.safetensors",
              "outdoor_selife_epoch_10.safetensors",
              "selfie_epoch_10.safetensors"
            ],
            "lora_model_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora_clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora_model&clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "steps": {
              "min": 1,
              "max": 100,
              "step": 1
            },
            "cfg": {
              "min": 0.0,
              "max": 100.0,
              "step": 1.0
            },
            "sampler_name": [
              "euler",
              "euler_cfg_pp",
              "euler_ancestral",
              "euler_ancestral_cfg_pp",
              "heun",
              "heunpp2",
              "dpm_2",
              "dpm_2_ancestral",
              "lms",
              "dpm_fast",
              "dpm_adaptive",
              "dpmpp_2s_ancestral",
              "dpmpp_2s_ancestral_cfg_pp",
              "dpmpp_sde",
              "dpmpp_sde_gpu",
              "dpmpp_2m",
              "dpmpp_2m_cfg_pp",
              "dpmpp_2m_sde",
              "dpmpp_2m_sde_gpu",
              "dpmpp_3m_sde",
              "dpmpp_3m_sde_gpu",
              "ddpm",
              "lcm",
              "ipndm",
              "ipndm_v",
              "deis",
              "res_multistep",
              "res_multistep_cfg_pp",
              "gradient_estimation",
              "ddim",
              "uni_pc",
              "uni_pc_bh2"
            ],
            "scheduler": [
              "normal",
              "karras",
              "exponential",
              "sgm_uniform",
              "simple",
              "ddim_uniform",
              "beta",
              "linear_quadratic",
              "kl_optimal"
            ],
            "denoise": {
              "min": 0.0,
              "max": 1.0,
              "step": 0.01
            },
            "seed": [
              "increment",
              "decrement",
              "randomize"
            ],
            "ckpt_name": [
              "1.5/aziibpixelmix_v10.safetensors",
              "FLUX1/flux1-dev-fp8.safetensors",
              "SD1.5/aziibpixelmix_v10.safetensors",
              "SDXL/dreamshaper_xl_v2.1.safetensors",
              "SDXL/sd_xl_base_1.0.safetensors",
              "SDXL/sd_xl_refiner_1.0.safetensors",
              "atomixAnimeXL_v10.safetensors",
              "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
              "juggernautXL_juggXIByRundiffusion.safetensors",
              "meinamix.safetensors",
              "photogasm.safetensors",
              "realvisxlV40_v40LightningBakedvae.safetensors",
              "revanimated.safetensors",
              "sd_xl_base_1.0.safetensors",
              "sd_xl_refiner_1.0.safetensors",
              "theAraminta_cv5.safetensors"
            ],
            "vae_name": [
              "Baked-VAE",
              "FLUX1/ae.safetensors",
              "SDXL/sdxl_vae.safetensors",
              "ae.safetensors"
            ],
            "clip_skip": {
              "min": -24,
              "max": -1,
              "step": 1
            },
            "lora1_name": [
              "None",
              "1.5/pixel-art-xl-v1.0.safetensors",
              "1.5/pixel-art-xl-v1.1.safetensors",
              "1990sAnalogStyle.safetensors",
              "Instagram_Selfie_SDXL.safetensors",
              "MJ52_v2.0.safetensors",
              "NSFWFilter.safetensors",
              "Pinterest_Selfie_V4.safetensors",
              "Pinterest_Selfie_V5_20_epochs.safetensors",
              "Pinterest_Snap_Selfie.safetensors",
              "SD1.5/pixel-art-xl-v1.0.safetensors",
              "SD1.5/pixel-art-xl-v1.1.safetensors",
              "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
              "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
              "badquality.safetensors",
              "blurxl.safetensors",
              "dark.safetensors",
              "envyzoomslider.safetensors",
              "hand_5_5.safetensors",
              "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
              "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "ip-adapter-faceid_sd15_lora.safetensors",
              "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "lcm.safetensors",
              "lcm_sdxl.safetensors",
              "lcmxl.safetensors",
              "midjourney.safetensors",
              "more_details.safetensors",
              "outdoor_selife_epoch_10.safetensors",
              "selfie_epoch_10.safetensors"
            ],
            "lora1_model_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora1_clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora1_model&clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora2_name": [
              "None",
              "1.5/pixel-art-xl-v1.0.safetensors",
              "1.5/pixel-art-xl-v1.1.safetensors",
              "1990sAnalogStyle.safetensors",
              "Instagram_Selfie_SDXL.safetensors",
              "MJ52_v2.0.safetensors",
              "NSFWFilter.safetensors",
              "Pinterest_Selfie_V4.safetensors",
              "Pinterest_Selfie_V5_20_epochs.safetensors",
              "Pinterest_Snap_Selfie.safetensors",
              "SD1.5/pixel-art-xl-v1.0.safetensors",
              "SD1.5/pixel-art-xl-v1.1.safetensors",
              "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
              "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
              "badquality.safetensors",
              "blurxl.safetensors",
              "dark.safetensors",
              "envyzoomslider.safetensors",
              "hand_5_5.safetensors",
              "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
              "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "ip-adapter-faceid_sd15_lora.safetensors",
              "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "lcm.safetensors",
              "lcm_sdxl.safetensors",
              "lcmxl.safetensors",
              "midjourney.safetensors",
              "more_details.safetensors",
              "outdoor_selife_epoch_10.safetensors",
              "selfie_epoch_10.safetensors"
            ],
            "lora2_model_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora2_clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora2_model&clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora3_name": [
              "None",
              "1.5/pixel-art-xl-v1.0.safetensors",
              "1.5/pixel-art-xl-v1.1.safetensors",
              "1990sAnalogStyle.safetensors",
              "Instagram_Selfie_SDXL.safetensors",
              "MJ52_v2.0.safetensors",
              "NSFWFilter.safetensors",
              "Pinterest_Selfie_V4.safetensors",
              "Pinterest_Selfie_V5_20_epochs.safetensors",
              "Pinterest_Snap_Selfie.safetensors",
              "SD1.5/pixel-art-xl-v1.0.safetensors",
              "SD1.5/pixel-art-xl-v1.1.safetensors",
              "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
              "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
              "badquality.safetensors",
              "blurxl.safetensors",
              "dark.safetensors",
              "envyzoomslider.safetensors",
              "hand_5_5.safetensors",
              "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
              "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "ip-adapter-faceid_sd15_lora.safetensors",
              "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
              "lcm.safetensors",
              "lcm_sdxl.safetensors",
              "lcmxl.safetensors",
              "midjourney.safetensors",
              "more_details.safetensors",
              "outdoor_selife_epoch_10.safetensors",
              "selfie_epoch_10.safetensors"
            ],
            "lora3_model_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora3_clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora3_model&clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "positive": [],
            "positive_token_normalization": [
              "none",
              "mean",
              "length",
              "length+mean"
            ],
            "positive_weight_interpretation": [
              "comfy",
              "A1111",
              "compel",
              "comfy++"
            ],
            "negative": [],
            "negative_token_normalization": [
              "none",
              "mean",
              "length",
              "length+mean"
            ],
            "negative_weight_interpretation": [
              "comfy",
              "A1111",
              "compel",
              "comfy++"
            ]
          }
        ],
        "ttNnodeVersion": "1.2.0"
      }
    },
    "input_order": {
      "required": [
        "grid_spacing",
        "latent_id",
        "output_individuals",
        "flip_xy",
        "x_axis",
        "x_values",
        "y_axis",
        "y_values"
      ],
      "hidden": [
        "plot_dict",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "XYPLOT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "xyPlot"
    ],
    "name": "ttN xyPlot",
    "display_name": "xyPlot",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/legacy",
    "output_node": false
  },
  "ttN pipeIN": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.1.0"
      }
    },
    "input_order": {
      "required": [
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "seed"
      ],
      "optional": [
        "image"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "ttN pipeIN",
    "display_name": "pipeIN (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/legacy",
    "output_node": false
  },
  "ttN pipeOUT": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "ttNnodeVersion": "1.1.0"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "ttNnodeVersion"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT",
      "PIPE_LINE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "image",
      "seed",
      "pipe"
    ],
    "name": "ttN pipeOUT",
    "display_name": "pipeOUT (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/legacy",
    "output_node": false
  },
  "ttN pipeLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "config_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "lora1_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora1_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora1_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora2_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora2_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora2_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora3_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora3_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora3_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "Positive",
            "multiline": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "negative": [
          "STRING",
          {
            "default": "Negative",
            "multiline": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "ttNnodeVersion": "1.1.2",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "config_name",
        "vae_name",
        "clip_skip",
        "lora1_name",
        "lora1_model_strength",
        "lora1_clip_strength",
        "lora2_name",
        "lora2_model_strength",
        "lora2_clip_strength",
        "lora3_name",
        "lora3_model_strength",
        "lora3_clip_strength",
        "positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "negative",
        "negative_token_normalization",
        "negative_weight_interpretation",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size",
        "seed"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "optional_lora_stack"
      ],
      "hidden": [
        "prompt",
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "seed"
    ],
    "name": "ttN pipeLoader",
    "display_name": "pipeLoader v1 (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/legacy",
    "output_node": false
  },
  "ttN pipeKSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "upscale_method": [
          [
            "None",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos",
            "bislerp"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.25
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "sampler_state": [
          [
            "Sample",
            "Hold"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_positive": [
          "CONDITIONING"
        ],
        "optional_negative": [
          "CONDITIONING"
        ],
        "optional_latent": [
          "LATENT"
        ],
        "optional_vae": [
          "VAE"
        ],
        "optional_clip": [
          "CLIP"
        ],
        "xyPlot": [
          "XYPLOT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ],
        "ttNnodeVersion": "1.0.5"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "upscale_method",
        "factor",
        "crop",
        "sampler_state",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "image_output",
        "save_prefix"
      ],
      "optional": [
        "seed",
        "optional_model",
        "optional_positive",
        "optional_negative",
        "optional_latent",
        "optional_vae",
        "optional_clip",
        "xyPlot"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "image",
      "seed"
    ],
    "name": "ttN pipeKSampler",
    "display_name": "pipeKSampler v1 (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/legacy",
    "output_node": true
  },
  "ttN pipeKSamplerAdvanced": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "lora_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "upscale_method": [
          [
            "None",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos",
            "bislerp"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.25
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "sampler_state": [
          [
            "Sample",
            "Hold"
          ]
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_positive": [
          "CONDITIONING"
        ],
        "optional_negative": [
          "CONDITIONING"
        ],
        "optional_latent": [
          "LATENT"
        ],
        "optional_vae": [
          "VAE"
        ],
        "optional_clip": [
          "CLIP"
        ],
        "xyPlot": [
          "XYPLOT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ],
        "ttNnodeVersion": "1.0.5"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "upscale_method",
        "factor",
        "crop",
        "sampler_state",
        "add_noise",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise",
        "image_output",
        "save_prefix"
      ],
      "optional": [
        "noise_seed",
        "optional_model",
        "optional_positive",
        "optional_negative",
        "optional_latent",
        "optional_vae",
        "optional_clip",
        "xyPlot"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "image",
      "seed"
    ],
    "name": "ttN pipeKSamplerAdvanced",
    "display_name": "pipeKSamplerAdvanced v1 (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/legacy",
    "output_node": true
  },
  "ttN pipeLoaderSDXL": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "lora1_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora1_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora1_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora2_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "lora2_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora2_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "refiner_ckpt_name": [
          [
            "None",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "refiner_vae_name": [
          [
            "Baked VAE",
            "FLUX1/ae.safetensors",
            "SDXL/sdxl_vae.safetensors",
            "ae.safetensors"
          ]
        ],
        "refiner_lora1_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "refiner_lora1_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "refiner_lora1_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "refiner_lora2_name": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "refiner_lora2_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "refiner_lora2_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "Positive",
            "multiline": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "negative": [
          "STRING",
          {
            "default": "Negative",
            "multiline": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "ttNnodeVersion": "1.1.2",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "lora1_name",
        "lora1_model_strength",
        "lora1_clip_strength",
        "lora2_name",
        "lora2_model_strength",
        "lora2_clip_strength",
        "refiner_ckpt_name",
        "refiner_vae_name",
        "refiner_lora1_name",
        "refiner_lora1_model_strength",
        "refiner_lora1_clip_strength",
        "refiner_lora2_name",
        "refiner_lora2_model_strength",
        "refiner_lora2_clip_strength",
        "clip_skip",
        "positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "negative",
        "negative_token_normalization",
        "negative_weight_interpretation",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size",
        "seed"
      ],
      "hidden": [
        "prompt",
        "ttNnodeVersion",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE_SDXL",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "VAE",
      "CLIP",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "VAE",
      "CLIP",
      "LATENT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "sdxl_pipe",
      "model",
      "positive",
      "negative",
      "vae",
      "clip",
      "refiner_model",
      "refiner_positive",
      "refiner_negative",
      "refiner_vae",
      "refiner_clip",
      "latent",
      "seed"
    ],
    "name": "ttN pipeLoaderSDXL",
    "display_name": "pipeLoaderSDXL v1 (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/legacy",
    "output_node": false
  },
  "ttN pipeKSamplerSDXL": {
    "input": {
      "required": {
        "sdxl_pipe": [
          "PIPE_LINE_SDXL"
        ],
        "upscale_method": [
          [
            "None",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos",
            "bislerp"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.25
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "sampler_state": [
          [
            "Sample",
            "Hold"
          ]
        ],
        "base_steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "refiner_steps": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ]
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_positive": [
          "CONDITIONING"
        ],
        "optional_negative": [
          "CONDITIONING"
        ],
        "optional_vae": [
          "VAE"
        ],
        "optional_refiner_model": [
          "MODEL"
        ],
        "optional_refiner_positive": [
          "CONDITIONING"
        ],
        "optional_refiner_negative": [
          "CONDITIONING"
        ],
        "optional_refiner_vae": [
          "VAE"
        ],
        "optional_latent": [
          "LATENT"
        ],
        "optional_clip": [
          "CLIP"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ],
        "ttNnodeVersion": "1.0.2"
      }
    },
    "input_order": {
      "required": [
        "sdxl_pipe",
        "upscale_method",
        "factor",
        "crop",
        "sampler_state",
        "base_steps",
        "refiner_steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "image_output",
        "save_prefix"
      ],
      "optional": [
        "seed",
        "optional_model",
        "optional_positive",
        "optional_negative",
        "optional_vae",
        "optional_refiner_model",
        "optional_refiner_positive",
        "optional_refiner_negative",
        "optional_refiner_vae",
        "optional_latent",
        "optional_clip"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList",
        "ttNnodeVersion"
      ]
    },
    "output": [
      "PIPE_LINE_SDXL",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "VAE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "VAE",
      "LATENT",
      "CLIP",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "sdxl_pipe",
      "model",
      "positive",
      "negative",
      "vae",
      "refiner_model",
      "refiner_positive",
      "refiner_negative",
      "refiner_vae",
      "latent",
      "clip",
      "image",
      "seed"
    ],
    "name": "ttN pipeKSamplerSDXL",
    "display_name": "pipeKSamplerSDXL v1 (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_tinyterraNodes",
    "category": "\ud83c\udf0f tinyterra/legacy",
    "output_node": true
  },
  "Smart Step (mtb)": {
    "input": {
      "required": {
        "step": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "start_percent": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "end_percent": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "step",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "step",
      "start",
      "end"
    ],
    "name": "Smart Step (mtb)",
    "display_name": "Smart Step (mtb)",
    "description": "# Smart Step\n\nUtils to control the steps start/stop of the KAdvancedSampler in percentage\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/conditioning",
    "output_node": false
  },
  "Styles Loader (mtb)": {
    "input": {
      "required": {
        "style_name": [
          [
            "name",
            "\u274cLow Token",
            "\u2705Line Art / Manga"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style_name"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "Styles Loader (mtb)",
    "display_name": "Styles Loader (mtb)",
    "description": "# Styles Loader\n\nThis node uses the same logic as the A111 styles csv.  \nThe first column is the name, the second the positive, the third the negative.  \nA sample [styles.csv](https://github.com/melMass/comfy_mtb/blob/main/styles.csv) gets installed on first run.\n\n> **Note**\n> Some styles can have empty columns, for instance I personally use distinct ones for positive and negatives, so be sure to wire the right output.\n\n## Extract Styles\nIt's sometime useful to be able to directly act on the content of a given style, for that an option was added to the context menu of that node to.. extract the styles to plain text inputs:  \n![extract](https://github.com/melMass/comfy_mtb/assets/7041726/c068d770-d5a8-4078-bc3c-20bb6533e42d)\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/conditioning",
    "output_node": false
  },
  "Interpolate Clip Sequential (mtb)": {
    "input": {
      "required": {
        "base_text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "text_to_replace": [
          "STRING",
          {
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ],
        "interpolation_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base_text",
        "text_to_replace",
        "clip",
        "interpolation_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Interpolate Clip Sequential (mtb)",
    "display_name": "Interpolate Clip Sequential (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/conditioning",
    "output_node": false
  },
  "Interpolate Condition (mtb)": {
    "input": {
      "required": {
        "blend": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blend"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Interpolate Condition (mtb)",
    "display_name": "Interpolate Condition (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/conditioning",
    "output_node": false
  },
  "Filter Z (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "depth": [
          "IMAGE"
        ],
        "to_black": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "step": 0.01,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "depth",
        "to_black",
        "threshold",
        "invert"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Filter Z (mtb)",
    "display_name": "Filter Z (mtb)",
    "description": "# Filter Z\nFilters an image based on a depth map\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/filters",
    "output_node": false
  },
  "Animation Builder (mtb)": {
    "input": {
      "required": {
        "total_frames": [
          "INT",
          {
            "default": 100,
            "min": 0
          }
        ],
        "scale_float": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0
          }
        ],
        "loop_count": [
          "INT",
          {
            "default": 1,
            "min": 0
          }
        ],
        "raw_iteration": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "raw_loop": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "total_frames",
        "scale_float",
        "loop_count",
        "raw_iteration",
        "raw_loop"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "INT",
      "BOOLEAN"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "frame",
      "0-1 (scaled)",
      "count",
      "loop_ended"
    ],
    "name": "Animation Builder (mtb)",
    "display_name": "Animation Builder (mtb)",
    "description": "\n# Animation Builder\n\nCheck the\n[wiki page](https://github.com/melMass/comfy_mtb/wiki/nodes-animation-builder)\nfor more info.\n\n\n- This basic example should help to understand the meaning of\nits inputs and outputs thanks to the [debug](nodes-debug) node.\n\n![](https://github.com/melMass/comfy_mtb/assets/7041726/2b5c7e4f-372d-4494-9e73-abb2daa7cb36)\n\n- In this other example Animation Builder is used in combination with\n[Batch From History](https://github.com/melMass/comfy_mtb/wiki/nodes-batch-from-history)\nto create a zoom-in animation on a static image\n\n![](https://github.com/melMass/comfy_mtb/assets/7041726/77d37da1-0a8e-4519-a493-dfdef7f755ea)\n\n## Inputs\n\n| name | description |\n| ---- | :----------:|\n| total_frames | The number of frame to queue (this is multiplied by the `loop_count`)|\n| scale_float | Convenience input to scale the normalized `current value` (a float between 0 and 1 lerp over the current queue length) |\n| loop_count | The number of loops to queue |\n| **Reset Button** | resets the internal counters, although the node is though around using its queue button it should still work fine when using the regular queue button of comfy |\n| **Queue Button** | Convenience button to run the queues (`total_frames` * `loop_count`) |\n\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/animation",
    "output_node": false
  },
  "Audio Sequence (mtb)": {
    "input": {
      "required": {
        "silence_duration": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -999.0,
            "max": 999,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "silence_duration"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "sequenced_audio"
    ],
    "name": "Audio Sequence (mtb)",
    "display_name": "Audio Sequence (mtb)",
    "description": "Sequence audio inputs (dynamic inputs).\n\n    - adding silence_duration between each segment\n      can now also be negative to overlap the clips, safely bound\n      to the the input length.\n    - resample audios to the highest sample rate in the inputs.\n    - convert them all to stereo if one of the inputs is.\n    ",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Audio Stack (mtb)": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "stacked_audio"
    ],
    "name": "Audio Stack (mtb)",
    "display_name": "Audio Stack (mtb)",
    "description": "Stack/Overlay audio inputs (dynamic inputs).\n\n    - pad audios to the longest inputs.\n    - resample audios to the highest sample rate in the inputs.\n    - convert them all to stereo if one of the inputs is.\n    ",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Audio Cut (mtb)": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "length": [
          "FLOAT",
          {
            "default": 1000.0,
            "min": 0.0,
            "max": 999999.0,
            "step": 1
          }
        ],
        "offset": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 999999.0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "length",
        "offset"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "cut_audio"
    ],
    "name": "Audio Cut (mtb)",
    "display_name": "Audio Cut (mtb)",
    "description": "Basic audio cutter, values are in ms.",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/audio",
    "output_node": false
  },
  "Float To Number (mtb)": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0,
            "min": -1000000000.0,
            "max": 1000000000.0,
            "step": 1,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NUMBER"
    ],
    "name": "Float To Number (mtb)",
    "display_name": "Float To Number (mtb)",
    "description": "Node addon for the WAS Suite. Converts a \"comfy\" FLOAT to a NUMBER.",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/number",
    "output_node": false
  },
  "Int To Bool (mtb)": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Int To Bool (mtb)",
    "display_name": "Int To Bool (mtb)",
    "description": "# Int to Bool\n\nBasic int to bool conversion, >= 1 is true\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/number",
    "output_node": false
  },
  "Int To Number (mtb)": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 0,
            "min": -1000000000.0,
            "max": 1000000000.0,
            "step": 1,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NUMBER"
    ],
    "name": "Int To Number (mtb)",
    "display_name": "Int To Number (mtb)",
    "description": "Node addon for the WAS Suite. Converts a \"comfy\" INT to a NUMBER.",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/number",
    "output_node": false
  },
  "Image H264 Compression (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "The input image tensor to be compressed and decompressed."
          }
        ],
        "crf": [
          "INT",
          {
            "default": 23,
            "min": 0,
            "max": 51,
            "step": 1,
            "tooltip": "Constant Rate Factor for h264 encoding (lower values mean higher quality)."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crf"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image H264 Compression (mtb)",
    "display_name": "Image H264 Compression (mtb)",
    "description": "\n**Encodes the input with h264 compression using a configurable CRF**.\n\n> [!IMPORTANT]\n> This node is not really needed with the latest version of LTXVideo.\n\n> [!NOTE]\n> This was recommended by the creators of LTX over banodoco's discord.\n\n*Orginal code from [mix](https://github.com/XmYx)*",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "image",
    "output_node": false
  },
  "Latent Lerp (mtb)": {
    "input": {
      "required": {
        "A": [
          "LATENT"
        ],
        "B": [
          "LATENT"
        ],
        "t": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "A",
        "B",
        "t"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Lerp (mtb)",
    "display_name": "Latent Lerp (mtb)",
    "description": "# Latent Lerp\nLinear interpolation (blend) between two latent vectors\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/latent",
    "output_node": false
  },
  "Unsplash Image (mtb)": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 8096,
            "min": 0,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 8096,
            "min": 0,
            "step": 1
          }
        ],
        "random_seed": [
          "INT",
          {
            "default": 0,
            "max": 100000.0,
            "min": 0,
            "step": 1
          }
        ]
      },
      "optional": {
        "keyword": [
          "STRING",
          {
            "default": "nature"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "random_seed"
      ],
      "optional": [
        "keyword"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Unsplash Image (mtb)",
    "display_name": "Unsplash Image (mtb)",
    "description": "# Unsplash Image\n\nUnsplash Image given a keyword and a size\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Text To Image (mtb)": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "Hello world!"
          }
        ],
        "font": [
          [
            "font"
          ]
        ],
        "wrap": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "trim": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "line_height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "step": 0.1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 32,
            "min": 1,
            "max": 2500,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 8096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 8096,
            "step": 1
          }
        ],
        "color": [
          "COLOR",
          {
            "default": "black"
          }
        ],
        "background": [
          "COLOR",
          {
            "default": "white"
          }
        ],
        "h_align": [
          [
            "left",
            "center",
            "right"
          ],
          {
            "default": "left"
          }
        ],
        "v_align": [
          [
            "top",
            "center",
            "bottom"
          ],
          {
            "default": "top"
          }
        ],
        "h_offset": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8096,
            "step": 1
          }
        ],
        "v_offset": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8096,
            "step": 1
          }
        ],
        "h_coverage": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "font",
        "wrap",
        "trim",
        "line_height",
        "font_size",
        "width",
        "height",
        "color",
        "background",
        "h_align",
        "v_align",
        "h_offset",
        "v_offset",
        "h_coverage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Text To Image (mtb)",
    "display_name": "Text To Image (mtb)",
    "description": "# Text to Image\n\nThis node look for any font files in comfy_dir/fonts.\nby default it fallsback to a default font.\n\n![img](https://i.imgur.com/3GT92hy.gif)\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Image Remove Background Rembg (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "alpha_matting": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting_foreground_threshold": [
          "INT",
          {
            "default": 240,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_background_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_erode_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "post_process_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bgcolor": [
          "COLOR",
          {
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "alpha_matting",
        "alpha_matting_foreground_threshold",
        "alpha_matting_background_threshold",
        "alpha_matting_erode_size",
        "post_process_mask",
        "bgcolor"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "Image (rgba)",
      "Mask",
      "Image"
    ],
    "name": "Image Remove Background Rembg (mtb)",
    "display_name": "Image Remove Background Rembg (mtb)",
    "description": "# Image Remove Background\n\nRemoves the background from the input using Rembg.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Batch2d Transform (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "border_handling": [
          [
            "edge",
            "constant",
            "reflect",
            "symmetric"
          ],
          {
            "default": "edge"
          }
        ],
        "constant_color": [
          "COLOR",
          {
            "default": "#000000"
          }
        ]
      },
      "optional": {
        "x": [
          "FLOATS"
        ],
        "y": [
          "FLOATS"
        ],
        "zoom": [
          "FLOATS"
        ],
        "angle": [
          "FLOATS"
        ],
        "shear": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "border_handling",
        "constant_color"
      ],
      "optional": [
        "x",
        "y",
        "zoom",
        "angle",
        "shear"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch2d Transform (mtb)",
    "display_name": "Batch2d Transform (mtb)",
    "description": "# Batch Transform\n\nTransform a batch of images using a batch of keyframes\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float (mtb)": {
    "input": {
      "required": {
        "mode": [
          [
            "Single",
            "Steps"
          ],
          {
            "default": "Steps"
          }
        ],
        "count": [
          "INT",
          {
            "default": 2
          }
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "step": 0.001
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "step": 0.001
          }
        ],
        "easing": [
          [
            "Linear",
            "Sine In",
            "Sine Out",
            "Sine In/Out",
            "Quart In",
            "Quart Out",
            "Quart In/Out",
            "Cubic In",
            "Cubic Out",
            "Cubic In/Out",
            "Circ In",
            "Circ Out",
            "Circ In/Out",
            "Back In",
            "Back Out",
            "Back In/Out",
            "Elastic In",
            "Elastic Out",
            "Elastic In/Out",
            "Bounce In",
            "Bounce Out",
            "Bounce In/Out"
          ],
          {
            "default": "Linear"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "count",
        "min",
        "max",
        "easing"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float (mtb)",
    "display_name": "Batch Float (mtb)",
    "description": "# Batch Float\n\nGenerates a batch of float values with interpolation\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float Assemble (mtb)": {
    "input": {
      "required": {
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reverse"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float Assemble (mtb)",
    "display_name": "Batch Float Assemble (mtb)",
    "description": "# Batch Float Assemble\n\nAssembles mutiple batches of floats into a single stream (batch)\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float Fill (mtb)": {
    "input": {
      "required": {
        "floats": [
          "FLOATS"
        ],
        "direction": [
          [
            "head",
            "tail"
          ],
          {
            "default": "tail"
          }
        ],
        "value": [
          "FLOAT",
          {
            "default": 0.0
          }
        ],
        "count": [
          "INT",
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "floats",
        "direction",
        "value",
        "count"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float Fill (mtb)",
    "display_name": "Batch Float Fill (mtb)",
    "description": "# Batch Float Fill\n\nFills a batch float with a single value until it reaches the target length\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float Fit (mtb)": {
    "input": {
      "required": {
        "values": [
          "FLOATS",
          {
            "forceInput": true
          }
        ],
        "clamp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "auto_compute_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "source_min": [
          "FLOAT",
          {
            "default": 0.0,
            "step": 0.01
          }
        ],
        "source_max": [
          "FLOAT",
          {
            "default": 1.0,
            "step": 0.01
          }
        ],
        "target_min": [
          "FLOAT",
          {
            "default": 0.0,
            "step": 0.01
          }
        ],
        "target_max": [
          "FLOAT",
          {
            "default": 1.0,
            "step": 0.01
          }
        ],
        "easing": [
          [
            "Linear",
            "Sine In",
            "Sine Out",
            "Sine In/Out",
            "Quart In",
            "Quart Out",
            "Quart In/Out",
            "Cubic In",
            "Cubic Out",
            "Cubic In/Out",
            "Circ In",
            "Circ Out",
            "Circ In/Out",
            "Back In",
            "Back Out",
            "Back In/Out",
            "Elastic In",
            "Elastic Out",
            "Elastic In/Out",
            "Bounce In",
            "Bounce Out",
            "Bounce In/Out"
          ],
          {
            "default": "Linear"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "values",
        "clamp",
        "auto_compute_source",
        "source_min",
        "source_max",
        "target_min",
        "target_max",
        "easing"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float Fit (mtb)",
    "display_name": "Batch Float Fit (mtb)",
    "description": "Fit a list of floats using a source and target range",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Float Math (mtb)": {
    "input": {
      "required": {
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "operation": [
          [
            "add",
            "sub",
            "mul",
            "div",
            "pow",
            "abs"
          ],
          {
            "default": "add"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reverse",
        "operation"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOATS"
    ],
    "name": "Batch Float Math (mtb)",
    "display_name": "Batch Float Math (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Batch Float Normalize (mtb)": {
    "input": {
      "required": {
        "floats": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "normalized_floats"
    ],
    "name": "Batch Float Normalize (mtb)",
    "display_name": "Batch Float Normalize (mtb)",
    "description": "Normalize the values in the list of floats",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Make (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "count": [
          "INT",
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "count"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Make (mtb)",
    "display_name": "Batch Make (mtb)",
    "description": "# Batch Make \n\nSimply duplicates the input frame as a batch",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Merge (mtb)": {
    "input": {
      "required": {
        "fusion_mode": [
          [
            "add",
            "multiply",
            "average"
          ],
          {
            "default": "average"
          }
        ],
        "fill": [
          [
            "head",
            "tail"
          ],
          {
            "default": "tail"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "fusion_mode",
        "fill"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Merge (mtb)",
    "display_name": "Batch Merge (mtb)",
    "description": "# Batch Merge\n\nMerges multiple image batches with different frame counts\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Sequence (mtb)": {
    "input": {
      "required": {
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reverse"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Sequence (mtb)",
    "display_name": "Batch Sequence (mtb)",
    "description": "Sequences multiple image batches one after another",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Sequence Plus (mtb)": {
    "input": {
      "required": {
        "transition": [
          [
            "none",
            "crossfade",
            "slide_left",
            "slide_right",
            "slide_up",
            "slide_down",
            "wipe_left",
            "wipe_right",
            "wipe_up",
            "wipe_down",
            "band_wipe_h",
            "band_wipe_v"
          ],
          {
            "default": "none"
          }
        ],
        "overlap_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "transition",
        "overlap_frames",
        "reverse"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Sequence Plus (mtb)",
    "display_name": "Batch Sequence Plus (mtb)",
    "description": "Sequences multiple image batches with transition effects.",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Shake (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "position_amount_x": [
          "FLOAT",
          {
            "default": 1.0
          }
        ],
        "position_amount_y": [
          "FLOAT",
          {
            "default": 1.0
          }
        ],
        "rotation_amount": [
          "FLOAT",
          {
            "default": 10.0
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.005
          }
        ],
        "frequency_divider": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.005
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 1,
            "min": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "position_amount_x",
        "position_amount_y",
        "rotation_amount",
        "frequency",
        "frequency_divider",
        "octaves",
        "seed"
      ]
    },
    "output": [
      "IMAGE",
      "FLOATS",
      "FLOATS",
      "FLOATS"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "pos_x",
      "pos_y",
      "rot"
    ],
    "name": "Batch Shake (mtb)",
    "display_name": "Batch Shake (mtb)",
    "description": "# Batch Shake\n\nApplies a shaking effect to batches of images.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Shape (mtb)": {
    "input": {
      "required": {
        "count": [
          "INT",
          {
            "default": 1
          }
        ],
        "shape": [
          [
            "Box",
            "Circle",
            "Diamond",
            "Tube"
          ],
          {
            "default": "Circle"
          }
        ],
        "image_width": [
          "INT",
          {
            "default": 512
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512
          }
        ],
        "shape_size": [
          "INT",
          {
            "default": 100
          }
        ],
        "color": [
          "COLOR",
          {
            "default": "#ffffff"
          }
        ],
        "bg_color": [
          "COLOR",
          {
            "default": "#000000"
          }
        ],
        "shade_color": [
          "COLOR",
          {
            "default": "#000000"
          }
        ],
        "thickness": [
          "INT",
          {
            "default": 5
          }
        ],
        "shadex": [
          "FLOAT",
          {
            "default": 0.0
          }
        ],
        "shadey": [
          "FLOAT",
          {
            "default": 0.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "count",
        "shape",
        "image_width",
        "image_height",
        "shape_size",
        "color",
        "bg_color",
        "shade_color",
        "thickness",
        "shadex",
        "shadey"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Batch Shape (mtb)",
    "display_name": "Batch Shape (mtb)",
    "description": "# Batch Shape\n\nGenerates a batch of 2D shapes with optional shading (experimental)\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Batch Time Wrap (mtb)": {
    "input": {
      "required": {
        "target_count": [
          "INT",
          {
            "default": 25,
            "min": 2
          }
        ],
        "frames": [
          "IMAGE"
        ],
        "curve": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "target_count",
        "frames",
        "curve"
      ]
    },
    "output": [
      "IMAGE",
      "FLOATS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "interpolated_floats"
    ],
    "name": "Batch Time Wrap (mtb)",
    "display_name": "Batch Time Wrap (mtb)",
    "description": "Remap a batch using a time curve (FLOATS)",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Plot Batch Float (mtb)": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 768
          }
        ],
        "height": [
          "INT",
          {
            "default": 768
          }
        ],
        "point_size": [
          "INT",
          {
            "default": 4
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1
          }
        ],
        "start_at_zero": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "point_size",
        "seed",
        "start_at_zero"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "plot"
    ],
    "name": "Plot Batch Float (mtb)",
    "display_name": "Plot Batch Float (mtb)",
    "description": "# Plot `FLOATS`\nPlot FLOATS using matplotlib, each of them are drawn in a different\ncolor.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/batch",
    "output_node": false
  },
  "Curve (mtb)": {
    "input": {
      "required": {
        "curve": [
          "FLOAT_CURVE"
        ]
      }
    },
    "input_order": {
      "required": [
        "curve"
      ]
    },
    "output": [
      "FLOAT_CURVE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT_CURVE"
    ],
    "name": "Curve (mtb)",
    "display_name": "Curve (mtb)",
    "description": "# Curve\n\n*WIP*\nA basic FLOAT_CURVE input node.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/curve",
    "output_node": false
  },
  "Curve To Float (mtb)": {
    "input": {
      "required": {
        "curve": [
          "FLOAT_CURVE",
          {
            "forceInput": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "curve",
        "steps"
      ]
    },
    "output": [
      "FLOATS",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOATS",
      "FLOAT"
    ],
    "name": "Curve To Float (mtb)",
    "display_name": "Curve To Float (mtb)",
    "description": "Convert a FLOAT_CURVE to a FLOAT or FLOATS",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/curve",
    "output_node": false
  },
  "Model Pruner (mtb)": {
    "input": {
      "optional": {
        "unet": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ]
      },
      "required": {
        "save_separately": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "save_folder": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ],
        "fix_clip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "remove_junk": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "ema_mode": [
          [
            "disabled",
            "remove_ema",
            "ema_only"
          ],
          {
            "default": "remove_ema"
          }
        ],
        "precision_unet": [
          [
            "full",
            "fp32",
            "fp16",
            "bf16",
            "fp8"
          ],
          {
            "default": "full"
          }
        ],
        "operation_unet": [
          [
            "copy",
            "convert",
            "delete"
          ],
          {
            "default": "convert"
          }
        ],
        "precision_clip": [
          [
            "full",
            "fp32",
            "fp16",
            "bf16",
            "fp8"
          ],
          {
            "default": "full"
          }
        ],
        "operation_clip": [
          [
            "copy",
            "convert",
            "delete"
          ],
          {
            "default": "convert"
          }
        ],
        "precision_vae": [
          [
            "full",
            "fp32",
            "fp16",
            "bf16",
            "fp8"
          ],
          {
            "default": "full"
          }
        ],
        "operation_vae": [
          [
            "copy",
            "convert",
            "delete"
          ],
          {
            "default": "convert"
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "unet",
        "clip",
        "vae"
      ],
      "required": [
        "save_separately",
        "save_folder",
        "fix_clip",
        "remove_junk",
        "ema_mode",
        "precision_unet",
        "operation_unet",
        "precision_clip",
        "operation_clip",
        "precision_vae",
        "operation_vae"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Model Pruner (mtb)",
    "display_name": "Model Pruner (mtb)",
    "description": "# Model Pruner\n\nBasic output node to prune/downsample a model.\n\nIf `save_folder` is a relative path, it will be relative to comfy's output directory?\n\n**This is a bit experimental for now**\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/prune",
    "output_node": true
  },
  "Load Vit Matte Model (mtb)": {
    "input": {
      "required": {
        "kind": [
          [
            "Composition-1K",
            "Distinctions-646"
          ]
        ],
        "autodownload": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "kind",
        "autodownload"
      ]
    },
    "output": [
      "VITMATTE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "torch_script"
    ],
    "name": "Load Vit Matte Model (mtb)",
    "display_name": "Load Vit Matte Model (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/vitmatte",
    "output_node": false
  },
  "Generate Trimap (mtb)": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "erode": [
          "INT",
          {
            "default": 10
          }
        ],
        "dilate": [
          "INT",
          {
            "default": 10
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "erode",
        "dilate"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "trimap"
    ],
    "name": "Generate Trimap (mtb)",
    "display_name": "Generate Trimap (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/vitmatte",
    "output_node": false
  },
  "Apply Vit Matte (mtb)": {
    "input": {
      "required": {
        "model": [
          "VITMATTE_MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "trimap": [
          "IMAGE"
        ],
        "returns": [
          [
            "RGB",
            "RGBA"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "trimap",
        "returns"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image (rgba)",
      "mask"
    ],
    "name": "Apply Vit Matte (mtb)",
    "display_name": "Apply Vit Matte (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Transform Image (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "step": 1,
            "min": -4096,
            "max": 4096
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "step": 1,
            "min": -4096,
            "max": 4096
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.001,
            "step": 0.01
          }
        ],
        "angle": [
          "FLOAT",
          {
            "default": 0,
            "step": 1,
            "min": -360,
            "max": 360
          }
        ],
        "shear": [
          "FLOAT",
          {
            "default": 0,
            "step": 1,
            "min": -4096,
            "max": 4096
          }
        ],
        "border_handling": [
          [
            "edge",
            "constant",
            "reflect",
            "symmetric"
          ],
          {
            "default": "edge"
          }
        ],
        "constant_color": [
          "COLOR",
          {
            "default": "#000000"
          }
        ]
      },
      "optional": {
        "filter_type": [
          [
            "nearest",
            "box",
            "bilinear",
            "hamming",
            "bicubic",
            "lanczos"
          ],
          {
            "default": "bilinear"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "x",
        "y",
        "zoom",
        "angle",
        "shear",
        "border_handling",
        "constant_color"
      ],
      "optional": [
        "filter_type"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Transform Image (mtb)",
    "display_name": "Transform Image (mtb)",
    "description": "# Transform Image\n\nTransform images while maintaining the input tensor shape\n\n## Filter Types\n1. `NEAREST`: Nearest neighbor - fastest but lowest quality\n2. `BOX`: Box filtering - similar to nearest neighbor but with some averaging\n3. `BILINEAR`: Bilinear filtering - good balance between quality and speed\n4. `HAMMING`: Hamming filtering - improved version of bilinear (doesn't allow rotations)\n5. `BICUBIC`: Bicubic filtering - better quality than bilinear but slower\n6. `LANCZOS`: Lanczos filtering - highest quality but slowest (doesn't allow rotations)\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/transform",
    "output_node": false
  },
  "Bbox From Mask (mtb)": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "invert"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "BBOX",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "bbox",
      "image (optional)"
    ],
    "name": "Bbox From Mask (mtb)",
    "display_name": "Bbox From Mask (mtb)",
    "description": "# BBox from Mask\n\nFrom a mask extract the bounding box\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Bbox (mtb)": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "BBOX"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BBOX"
    ],
    "name": "Bbox (mtb)",
    "display_name": "Bbox (mtb)",
    "description": "# BBox\n\nThe bounding box (BBOX) custom type used by other nodes\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Crop (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bbox": [
          "BBOX"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "mask",
        "x",
        "y",
        "width",
        "height",
        "bbox"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "name": "Crop (mtb)",
    "display_name": "Crop (mtb)",
    "description": "# Crop\n\nCrops an image and an optional mask to a given bounding box\n\nThe bounding box can be given as a tuple of (x, y, width, height) or as a BBOX type\nThe BBOX input takes precedence over the tuple input\n    \n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Uncrop (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "bbox": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "bbox",
        "border_blending"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Uncrop (mtb)",
    "display_name": "Uncrop (mtb)",
    "description": "# Uncrop\nUncrops an image to a given bounding box\nThe bounding box can be given as a tuple of (x, y, width, height) or as a BBOX type\nThe BBOX input takes precedence over the tuple input\n    \n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Split Bbox (mtb)": {
    "input": {
      "required": {
        "bbox": [
          "BBOX"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "x",
      "y",
      "width",
      "height"
    ],
    "name": "Split Bbox (mtb)",
    "display_name": "Split Bbox (mtb)",
    "description": "Split the components of a bbox",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Upscale Bbox By (mtb)": {
    "input": {
      "required": {
        "bbox": [
          "BBOX"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox",
        "scale"
      ]
    },
    "output": [
      "BBOX"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BBOX"
    ],
    "name": "Upscale Bbox By (mtb)",
    "display_name": "Upscale Bbox By (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/crop",
    "output_node": false
  },
  "Color Correct (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "clamp": [
          [
            true,
            false
          ],
          {
            "default": true
          }
        ],
        "gamma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "exposure": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "offset": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "hue": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -0.5,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "clamp",
        "gamma",
        "contrast",
        "exposure",
        "offset",
        "hue",
        "saturation",
        "value"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Color Correct (mtb)",
    "display_name": "Color Correct (mtb)",
    "description": "# Color Correct\n\nVarious color correction methods\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image processing",
    "output_node": false
  },
  "Color Correct GPU (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "force_gpu": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clamp": [
          [
            true,
            false
          ],
          {
            "default": true
          }
        ],
        "gamma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "exposure": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "offset": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "hue": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -0.5,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "force_gpu",
        "clamp",
        "gamma",
        "contrast",
        "exposure",
        "offset",
        "hue",
        "saturation",
        "value"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Color Correct GPU (mtb)",
    "display_name": "Color Correct GPU (mtb)",
    "description": "Various color correction methods using only Torch.",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image processing",
    "output_node": false
  },
  "Image Compare (mtb)": {
    "input": {
      "required": {
        "imageA": [
          "IMAGE"
        ],
        "imageB": [
          "IMAGE"
        ],
        "mode": [
          [
            "checkerboard",
            "diff",
            "blend"
          ],
          {
            "default": "checkerboard"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "imageA",
        "imageB",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Compare (mtb)",
    "display_name": "Image Compare (mtb)",
    "description": "# Image Compare\nCompare two images and return a difference image\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Image Tile Offset (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "tilesX": [
          "INT",
          {
            "default": 2,
            "min": 1
          }
        ],
        "tilesY": [
          "INT",
          {
            "default": 2,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "tilesX",
        "tilesY"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Tile Offset (mtb)",
    "display_name": "Image Tile Offset (mtb)",
    "description": "# Image Tile Offset\n\nMimics an old photoshop technique to check for seamless textures\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Blur (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sigmaX": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ],
        "sigmaY": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "sigmasX": [
          "FLOATS"
        ],
        "sigmasY": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sigmaX",
        "sigmaY"
      ],
      "optional": [
        "sigmasX",
        "sigmasY"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Blur (mtb)",
    "display_name": "Blur (mtb)",
    "description": "# Blur\n\nApplies a Gaussian blur to the given image / batch.  \nIt allows a few more things than the core blur node, namely:\n- **Higher values** (core is limited to 30)  \n  <img width=650 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/c0cd8426-7b44-4067-bb98-9a178e715169\"/>\n\n- **Individual X & Y blur**  \n  <img width=650 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/f5511f9a-d659-4935-abb5-3242894a0a82\"/>\n\n- [`FLOATS`](nodes-batch#batch-floats) support for individual batch frame blur\n  <img width=650 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/8aab18d2-b140-4e04-a4bd-fd294f2e187b\"/>\n\n\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image processing",
    "output_node": false
  },
  "Mask To Image (mtb)": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "color": [
          "COLOR"
        ],
        "background": [
          "COLOR",
          {
            "default": "#000000"
          }
        ]
      },
      "optional": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "color",
        "background"
      ],
      "optional": [
        "invert"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Mask To Image (mtb)",
    "display_name": "Mask To Image (mtb)",
    "description": "# Mask to Image\n\nConverts a mask (alpha) to an RGB image with a color and background\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Colored Image (mtb)": {
    "input": {
      "required": {
        "color": [
          "COLOR"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 8160
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 8160
          }
        ]
      },
      "optional": {
        "foreground_image": [
          "IMAGE"
        ],
        "foreground_mask": [
          "MASK"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mask_opacity": [
          "FLOAT",
          {
            "default": 1.0,
            "step": 0.1,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "color",
        "width",
        "height"
      ],
      "optional": [
        "foreground_image",
        "foreground_mask",
        "invert",
        "mask_opacity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Colored Image (mtb)",
    "display_name": "Colored Image (mtb)",
    "description": "# Colored Image\n\nConstant color images of a given size can also be used to mask images.\n\nThis example uses [VHS Nodes](https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite) for animation preview\n![batch_shapes](https://github.com/melMass/comfy_mtb/assets/7041726/a1aa62c5-f8cb-4f90-a14a-f7260a982e5a)\n\n**Workflow**: \n```json\n{\"last_node_id\":41,\"last_link_id\":65,\"nodes\":[{\"id\":13,\"type\":\"Batch Float (mtb)\",\"pos\":[-1213,622],\"size\":[315,154],\"flags\":{},\"order\":0,\"mode\":0,\"outputs\":[{\"name\":\"FLOATS\",\"type\":\"FLOATS\",\"links\":[30],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Float (mtb)\"},\"widgets_values\":[\"Steps\",12,0.001,5,\"Quart In/Out\"]},{\"id\":31,\"type\":\"VHS_VideoCombine\",\"pos\":[1080,280],\"size\":[315,314],\"flags\":{},\"order\":16,\"mode\":0,\"inputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"link\":50},{\"name\":\"audio\",\"type\":\"VHS_AUDIO\",\"link\":null},{\"name\":\"batch_manager\",\"type\":\"VHS_BatchManager\",\"link\":null}],\"outputs\":[{\"name\":\"Filenames\",\"type\":\"VHS_FILENAMES\",\"links\":null,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"VHS_VideoCombine\"},\"widgets_values\":{\"frame_rate\":12,\"loop_count\":0,\"filename_prefix\":\"AnimateDiff\",\"format\":\"video/nvenc_hevc-mp4\",\"pix_fmt\":\"yuv420p\",\"bitrate\":10,\"megabit\":true,\"save_metadata\":true,\"pingpong\":false,\"save_output\":false,\"videopreview\":{\"hidden\":false,\"paused\":false,\"params\":{\"filename\":\"AnimateDiff_00004.mp4\",\"subfolder\":\"\",\"type\":\"temp\",\"format\":\"video/nvenc_hevc-mp4\"}}}},{\"id\":22,\"type\":\"Batch Float Fill (mtb)\",\"pos\":[-884,621],\"size\":[315,106],\"flags\":{},\"order\":4,\"mode\":0,\"inputs\":[{\"name\":\"floats\",\"type\":\"FLOATS\",\"link\":30}],\"outputs\":[{\"name\":\"FLOATS\",\"type\":\"FLOATS\",\"links\":[31],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Float Fill (mtb)\"},\"widgets_values\":[\"tail\",0,20]},{\"id\":30,\"type\":\"ImageBlend\",\"pos\":[680,280],\"size\":[315,102],\"flags\":{},\"order\":14,\"mode\":0,\"inputs\":[{\"name\":\"image1\",\"type\":\"IMAGE\",\"link\":65},{\"name\":\"image2\",\"type\":\"IMAGE\",\"link\":48}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[50],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"ImageBlend\"},\"widgets_values\":[1,\"screen\"]},{\"id\":15,\"type\":\"Batch Transform (mtb)\",\"pos\":[484,561],\"size\":[210,194],\"flags\":{},\"order\":10,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":29,\"slot_index\":0},{\"name\":\"x\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"y\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"zoom\",\"type\":\"FLOATS\",\"link\":33},{\"name\":\"angle\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"shear\",\"type\":\"FLOATS\",\"link\":null}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[48],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Transform (mtb)\"},\"widgets_values\":[\"edge\",\"#fa96c0\"]},{\"id\":23,\"type\":\"Batch Float Fill (mtb)\",\"pos\":[110,623],\"size\":[315,106],\"flags\":{},\"order\":5,\"mode\":0,\"inputs\":[{\"name\":\"floats\",\"type\":\"FLOATS\",\"link\":32}],\"outputs\":[{\"name\":\"FLOATS\",\"type\":\"FLOATS\",\"links\":[33],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Float Fill (mtb)\"},\"widgets_values\":[\"head\",0,20]},{\"id\":21,\"type\":\"Batch Float (mtb)\",\"pos\":[-246,623],\"size\":[315,154],\"flags\":{},\"order\":1,\"mode\":0,\"outputs\":[{\"name\":\"FLOATS\",\"type\":\"FLOATS\",\"links\":[32],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Float (mtb)\"},\"widgets_values\":[\"Steps\",20,0.001,4.5,\"Quart In/Out\"]},{\"id\":41,\"type\":\"Reroute\",\"pos\":[-91,283],\"size\":[75,26],\"flags\":{},\"order\":12,\"mode\":0,\"inputs\":[{\"name\":\"\",\"type\":\"*\",\"link\":64}],\"outputs\":[{\"name\":\"\",\"type\":\"IMAGE\",\"links\":[65]}],\"properties\":{\"showOutputText\":false,\"horizontal\":false}},{\"id\":14,\"type\":\"Batch Transform (mtb)\",\"pos\":[-517,562],\"size\":[210,194],\"flags\":{},\"order\":9,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":27,\"slot_index\":0},{\"name\":\"x\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"y\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"zoom\",\"type\":\"FLOATS\",\"link\":31},{\"name\":\"angle\",\"type\":\"FLOATS\",\"link\":null},{\"name\":\"shear\",\"type\":\"FLOATS\",\"link\":null}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[37,62,64],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Transform (mtb)\"},\"widgets_values\":[\"edge\",\"#fa96c0\"]},{\"id\":35,\"type\":\"LoadImage\",\"pos\":[-560,920],\"size\":[315,314],\"flags\":{},\"order\":2,\"mode\":0,\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[56],\"shape\":3,\"slot_index\":0},{\"name\":\"MASK\",\"type\":\"MASK\",\"links\":null,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"LoadImage\"},\"widgets_values\":[\"189.png\",\"image\"]},{\"id\":40,\"type\":\"Blur (mtb)\",\"pos\":[-217,1000],\"size\":[315,82],\"flags\":{},\"order\":11,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":62,\"slot_index\":0}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[63],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Blur (mtb)\"},\"widgets_values\":[50,50]},{\"id\":33,\"type\":\"ImageToMask\",\"pos\":[120,997],\"size\":[210,58],\"flags\":{},\"order\":13,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":63,\"slot_index\":0}],\"outputs\":[{\"name\":\"MASK\",\"type\":\"MASK\",\"links\":[57],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"ImageToMask\"},\"widgets_values\":[\"red\"]},{\"id\":37,\"type\":\"Colored Image (mtb)\",\"pos\":[350,920],\"size\":[210,138],\"flags\":{},\"order\":15,\"mode\":0,\"inputs\":[{\"name\":\"foreground_image\",\"type\":\"IMAGE\",\"link\":56,\"slot_index\":0},{\"name\":\"foreground_mask\",\"type\":\"MASK\",\"link\":57,\"slot_index\":1}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[55],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Colored Image (mtb)\"},\"widgets_values\":[\"#1603fc\",512,512]},{\"id\":36,\"type\":\"VHS_VideoCombine\",\"pos\":[584,918],\"size\":[315,314],\"flags\":{},\"order\":17,\"mode\":0,\"inputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"link\":55,\"slot_index\":0},{\"name\":\"audio\",\"type\":\"VHS_AUDIO\",\"link\":null},{\"name\":\"batch_manager\",\"type\":\"VHS_BatchManager\",\"link\":null}],\"outputs\":[{\"name\":\"Filenames\",\"type\":\"VHS_FILENAMES\",\"links\":null,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"VHS_VideoCombine\"},\"widgets_values\":{\"frame_rate\":12,\"loop_count\":0,\"filename_prefix\":\"AnimateDiff\",\"format\":\"video/nvenc_hevc-mp4\",\"pix_fmt\":\"yuv420p\",\"bitrate\":10,\"megabit\":true,\"save_metadata\":true,\"pingpong\":false,\"save_output\":false,\"videopreview\":{\"hidden\":false,\"paused\":false,\"params\":{\"filename\":\"AnimateDiff_00009.mp4\",\"subfolder\":\"\",\"type\":\"temp\",\"format\":\"video/nvenc_hevc-mp4\"}}}},{\"id\":20,\"type\":\"Mask To Image (mtb)\",\"pos\":[231,459],\"size\":[210,106],\"flags\":{},\"order\":8,\"mode\":0,\"inputs\":[{\"name\":\"mask\",\"type\":\"MASK\",\"link\":28,\"slot_index\":0}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[29],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Mask To Image (mtb)\"},\"widgets_values\":[\"#00ff00\",\"#000000\"]},{\"id\":16,\"type\":\"ImageToMask\",\"pos\":[-750,191],\"size\":[210,58],\"flags\":{},\"order\":6,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":25}],\"outputs\":[{\"name\":\"MASK\",\"type\":\"MASK\",\"links\":[26,28],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"ImageToMask\"},\"widgets_values\":[\"red\"]},{\"id\":19,\"type\":\"Mask To Image (mtb)\",\"pos\":[-750,446],\"size\":[210,106],\"flags\":{},\"order\":7,\"mode\":0,\"inputs\":[{\"name\":\"mask\",\"type\":\"MASK\",\"link\":26,\"slot_index\":0}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[27],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Mask To Image (mtb)\"},\"widgets_values\":[\"#ff0000\",\"#000000\"]},{\"id\":11,\"type\":\"Batch Shape (mtb)\",\"pos\":[-1039,192],\"size\":[210,334],\"flags\":{},\"order\":3,\"mode\":0,\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[25],\"shape\":3,\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"Batch Shape (mtb)\"},\"widgets_values\":[20,\"Tube\",1024,1024,512,\"#ffffff\",\"#000000\",\"#000000\",250,0,0]}],\"links\":[[25,11,0,16,0,\"IMAGE\"],[26,16,0,19,0,\"MASK\"],[27,19,0,14,0,\"IMAGE\"],[28,16,0,20,0,\"MASK\"],[29,20,0,15,0,\"IMAGE\"],[30,13,0,22,0,\"FLOATS\"],[31,22,0,14,3,\"FLOATS\"],[32,21,0,23,0,\"FLOATS\"],[33,23,0,15,3,\"FLOATS\"],[37,14,0,27,0,\"IMAGE\"],[48,15,0,30,1,\"IMAGE\"],[50,30,0,31,0,\"IMAGE\"],[55,37,0,36,0,\"IMAGE\"],[56,35,0,37,0,\"IMAGE\"],[57,33,0,37,1,\"MASK\"],[62,14,0,40,0,\"IMAGE\"],[63,40,0,33,0,\"IMAGE\"],[64,14,0,41,0,\"*\"],[65,41,0,30,0,\"IMAGE\"]],\"groups\":[],\"config\":{},\"extra\":{\"workspace_info\":{\"id\":\"lHUoc3eCvYMplIxkGM68o\"}},\"version\":0.4}\n```",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/generate",
    "output_node": false
  },
  "Image Premultiply (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "invert"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RGBA"
    ],
    "name": "Image Premultiply (mtb)",
    "display_name": "Image Premultiply (mtb)",
    "description": "# Image Premultiply\n\nPremultiply image with mask\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Image Resize Factor (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "supersample": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "resampling": [
          [
            "nearest",
            "linear",
            "bilinear",
            "bicubic",
            "trilinear",
            "area",
            "nearest-exact"
          ],
          {
            "default": "nearest"
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor",
        "supersample",
        "resampling"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Resize Factor (mtb)",
    "display_name": "Image Resize Factor (mtb)",
    "description": "# Image Resize Factor\n\nExtracted mostly from WAS Node Suite, with a few edits (most notably multiple image support) and less features.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Save Image Grid (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "save_intermediate": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "save_intermediate"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Image Grid (mtb)",
    "display_name": "Save Image Grid (mtb)",
    "description": "# Save Image Grid\n\nSave all the images in the input batch as a grid of images.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/IO",
    "output_node": true
  },
  "Load Image From Url (mtb)": {
    "input": {
      "required": {
        "url": [
          "STRING",
          {
            "default": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Example.jpg/800px-Example.jpg"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "url"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Load Image From Url (mtb)",
    "display_name": "Load Image From Url (mtb)",
    "description": "# Load image from URL\n\nLoad an image from the given URL\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/IO",
    "output_node": false
  },
  "Sharpen (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma_x": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "sigma_y": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sharpen_radius",
        "sigma_x",
        "sigma_y",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Sharpen (mtb)",
    "display_name": "Sharpen (mtb)",
    "description": "# Sharpen\nSharpens an image using a Gaussian kernel.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image processing",
    "output_node": false
  },
  "Extract Coordinates From Image (mtb)": {
    "input": {
      "required": {
        "threshold": [
          "FLOAT"
        ],
        "max_points": [
          "INT",
          {
            "default": 50,
            "min": 0
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "threshold",
        "max_points"
      ],
      "optional": [
        "image",
        "mask"
      ]
    },
    "output": [
      "BATCH_COORDINATES",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "BATCH_COORDINATES",
      "IMAGE"
    ],
    "name": "Extract Coordinates From Image (mtb)",
    "display_name": "Extract Coordinates From Image (mtb)",
    "description": "Extract 2D points from a batch of images based on a threshold.",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/coordinates",
    "output_node": false
  },
  "Coordinates To String (mtb)": {
    "input": {
      "required": {
        "coordinates": [
          "BATCH_COORDINATES"
        ],
        "frame": [
          "INT"
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "frame"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Coordinates To String (mtb)",
    "display_name": "Coordinates To String (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/coordinates",
    "output_node": false
  },
  "Debug (mtb)": {
    "input": {
      "required": {
        "output_to_console": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "output_to_console"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Debug (mtb)",
    "display_name": "Debug (mtb)",
    "description": "# Debug\n\nThis node is basically trying to provide informations about any input types supported by Comfy.\nIt uses the [dynamic inputs](web-dynamic-inputs) concept used across a few of the mtb nodes.\nIt specifically handles a few types and fallback to string representation for the others.\n\n![debug](https://github.com/melMass/comfy_mtb/assets/7041726/e20b5379-b5bf-4e2f-8d4c-c79f217d7f8d)\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/debug",
    "output_node": true
  },
  "Save Tensors (mtb)": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyPickle"
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix"
      ],
      "optional": [
        "image",
        "mask",
        "latent"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Tensors (mtb)",
    "display_name": "Save Tensors (mtb)",
    "description": "# Save Tensors\nSave torch tensors (image, mask or latent) to disk.\nuseful to debug things outside comfy like in notebooks.\n    \n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/debug",
    "output_node": true
  },
  "Load Image Sequence (mtb)": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "videos/####.png"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 9999999
          }
        ]
      },
      "optional": {
        "range": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path",
        "current_frame"
      ],
      "optional": [
        "range"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "current_frame",
      "total_frames"
    ],
    "name": "Load Image Sequence (mtb)",
    "display_name": "Load Image Sequence (mtb)",
    "description": "# Load Image Sequence\n\nLoad an image sequence from a folder. The current frame is used to determine which image to load.  \nThe UX need improvements but you can use it as follow:  \n\n- If current_frame is -1, it will load all the frames matching the pattern.\n- If the path contains a `*` it will glob the paths using it.\n- If range is provided (for instance `0-10` to load frame 0 to 10) current_frame is ignored.\n\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/IO",
    "output_node": false
  },
  "Save Image Sequence (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "Sequence"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "current_frame"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Image Sequence (mtb)",
    "display_name": "Save Image Sequence (mtb)",
    "description": "# Save Image Sequence\n\nSave an image sequence to a folder. The current frame is used to determine which image to save.\nThis is merely a wrapper around the `save_images` function with formatting for the output folder and filename.\n    \n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/IO",
    "output_node": true
  },
  "Deep Bump (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Color to Normals",
            "Normals to Curvature",
            "Normals to Height"
          ]
        ],
        "color_to_normals_overlap": [
          [
            "SMALL",
            "MEDIUM",
            "LARGE"
          ]
        ],
        "normals_to_curvature_blur_radius": [
          [
            "SMALLEST",
            "SMALLER",
            "SMALL",
            "MEDIUM",
            "LARGE",
            "LARGER",
            "LARGEST"
          ]
        ],
        "normals_to_height_seamless": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "color_to_normals_overlap",
        "normals_to_curvature_blur_radius",
        "normals_to_height_seamless"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Deep Bump (mtb)",
    "display_name": "Deep Bump (mtb)",
    "description": "# Deep Bump\n\nThis node uses the [deep bump](https://github.com/HugoTini/DeepBump) model (GPLv3).\nThe 3 inference modes (color -> normals, normals -> curvature, normals -> depth) are all baked into a single node with a dropdown to select the operation.\nSome inputs are only used in some context, UX could be better.\nThe inputs are self explanatory, but you should probably experiment a bit with it since inference is quite fast. One thing to be sure is to tick `normals_to_height_seamless` when the input is seamless, see below for more infos.\n\nThis example is available in the [base examples list](https://github.com/melMass/comfy_mtb/wiki/Examples). In the example we also use the [Model Patch Seamless](nodes-model-patch-seamless) node in order to have non repeating, tileable textures\n| workflow | This is the output textures from the workflow applied to a tessellated mesh in blender | \n| - | - |\n|![](https://user-images.githubusercontent.com/7041726/272970715-7e4477f6-8e18-4839-9864-83d07d6690a1.png)| ![](https://user-images.githubusercontent.com/7041726/272970506-9db516b5-45d2-4389-b904-b3a94660f24c.png) |",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/textures",
    "output_node": false
  },
  "Model Patch Seamless (mtb)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "startStep": [
          "INT",
          {
            "default": 0
          }
        ],
        "stopStep": [
          "INT",
          {
            "default": 999
          }
        ],
        "tilingX": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tilingY": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "startStep",
        "stopStep",
        "tilingX",
        "tilingY"
      ]
    },
    "output": [
      "MODEL",
      "MODEL"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "Original Model (passthrough)",
      "Patched Model"
    ],
    "name": "Model Patch Seamless (mtb)",
    "display_name": "Model Patch Seamless (mtb)",
    "description": "# Model Patch Seamless\n\nThis uses this [hack](https://gitlab.com/-/snippets/2395088) to generate seamless image right at the inference stage.\nResults might vary depending on the model and prompt.\n\nHere is a few output from an extended version of the available [example](https://github.com/melMass/comfy_mtb/wiki/Examples). The main difference is that I use an upscale step before running [deep bump](nodes-deep-bump).\n\n|albedo|\n|-|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/3984907b-617e-49ff-8100-92c91af4459e\"/>|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/1194b2b8-eca4-4f75-8a1c-4d8074c08ea6\"/>|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/11026b5d-500b-4cfe-8cdc-682cc995dfb1\"/>|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/1f5d1671-5208-47ca-b625-478b09eed969\"/>|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/cdf3463f-c66c-472c-8ac3-e80af1901852\"/>|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/151b44ca-26e2-49d0-91be-cda938c0577a\"/>|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/b4280a65-644f-45d8-9fe8-b6148bf66b3c\"/>|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/cbfacbbc-2ae2-4cd2-84bc-8849c2115b51\"/>|\n|<img width=400 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/8c6eea98-ae90-48d3-9051-de542102166e\"/>|",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/textures",
    "output_node": false
  },
  "Vae Decode (mtb)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "seamless_model": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_tiling_decoder": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "seamless_model",
        "use_tiling_decoder",
        "tile_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Vae Decode (mtb)",
    "display_name": "Vae Decode (mtb)",
    "description": "# VAE Decode\nThis works exactly as the builtin one but also supports the sd seamless hack, taken from: FlyingFireCo/tiled_ksampler\nthat is use in the `Model Patch Seamless` node.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/decode",
    "output_node": false
  },
  "Postshot Export (mtb)": {
    "input": {
      "required": {
        "project_file": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "export_splat_ply": [
          "STRING",
          {
            "default": "output.ply"
          }
        ],
        "postshot_cli": [
          "STRING",
          {
            "default": "C:/Program Files/Jawset Postshot/bin/postshot-cli.exe"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "project_file",
        "export_splat_ply",
        "postshot_cli"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "exported_ply_path"
    ],
    "name": "Postshot Export (mtb)",
    "display_name": "Postshot Export (mtb)",
    "description": "",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/postshot",
    "output_node": true
  },
  "Postshot Train (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "These image will get save to disk first"
          }
        ],
        "profile": [
          [
            "NeRF L",
            "NeRF M",
            "NeRF S",
            "NeRF XL",
            "NeRF XXL",
            "Splat ADC",
            "Splat MCMC"
          ],
          {
            "default": "Splat MCMC",
            "tooltip": "The radiance field model profile to train"
          }
        ],
        "image_select": [
          [
            "all",
            "best"
          ],
          {
            "default": "best",
            "tooltip": "How to select training images from the source image sets"
          }
        ],
        "train_steps_limit": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 1000,
            "tooltip": "Number of kSteps to train the model for"
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "output",
            "tooltip": "path to save the project to\nAbsolute paths are kept as is, relatives are from the output directory.\n"
          }
        ],
        "postshot_cli": [
          "STRING",
          {
            "default": "C:/Program Files/Jawset Postshot/bin/postshot-cli.exe"
          }
        ]
      },
      "optional": {
        "gpu": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "tooltip": "Specify the index of the GPU to use"
          }
        ],
        "num_train_images": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "tooltip": "If image-select best is used, specifies the number of training images to select"
          }
        ],
        "max_image_size": [
          "INT",
          {
            "default": 1600,
            "min": 0,
            "tooltip": "Downscale training images such that their longer edge is at most this value in pixels. Disabled if zero."
          }
        ],
        "max_num_features": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "tooltip": "Maximum number of 2D kFeatures extracted from each image."
          }
        ],
        "splat_density": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.125,
            "max": 8.0,
            "tooltip": "Controls how much additional splats are generated during training.Applies only in 'Splat ADC' profile."
          }
        ],
        "max_num_splats": [
          "INT",
          {
            "default": 3000,
            "min": 1,
            "tooltip": "Sets the maximum number of splats (in kSplats) created during training. Applies only in 'Splat MCMC' profile."
          }
        ],
        "export_splat_ply": [
          "STRING",
          {
            "default": "",
            "tooltip": "If not empty will also save a ply file.\nAbsolute paths are kept as is, relatives are from the output directory.\n"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "profile",
        "image_select",
        "train_steps_limit",
        "output_path",
        "postshot_cli"
      ],
      "optional": [
        "gpu",
        "num_train_images",
        "max_image_size",
        "max_num_features",
        "splat_density",
        "max_num_splats",
        "export_splat_ply"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "project_file_path"
    ],
    "name": "Postshot Train (mtb)",
    "display_name": "Postshot Train (mtb)",
    "description": "# Postshot Train\n\nhttps://github.com/user-attachments/assets/fcaf4163-28c7-4768-a785-bc794fca3ec0\n\n\nWrapper around the [Potshot](https://www.jawset.com/) CLI. \nYou must first run the GUI at least once and login.\nIf you use a custom install location you can specify it in **Settings > MTB**\n\n\n\n## Radiance Field Profile\n\nPostshot supports two different models to create radiance fields:\n- Gaussian Splatting (Splat)\n- Neural Radiance Fields (NeRF).\n\n### Splat MCMC\n\nBoth Splat profiles allow for very fast rendering and quickly reconstruct fine detail in well-covered regions of the scene.\n\nThe Splat MCMC profile is currently the recommended profile for most scenes. It allows limiting the number of Splat primitives and thereby the amount of memory and disk space the resulting model requires.\n\n### Splat ADC\n\nThe Splat ADC profile is very similar to the Splat MCMC profile, but differs in the way it produces detail in the scene during training. You can control the amount of detail it creates during training through the Splat Density parameter.\n\n### NeRF models\n\nWhen using the NeRF model, the maximum accuracy has to be specified before the training can begin. Postshot currently provides five sizes (S, M, L, XL, XXL) for NeRF models. NeRFs are much slower to render than Splats.\n\nHere is an intuition for how 'large' the NeRF profile options are:\n- **S** is for toy-like testing.\n- **M** is a significant step up, such that real scenes can be reasonably captured with low memory requirements.\n- **L** is the recommended default if you want to produce good image quality.\n- **XL** and **XXL** are for pushing toward fine detail in the scene center or for large scenes.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/postshot",
    "output_node": true
  },
  "String Replace (mtb)": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "old": [
          "STRING",
          {
            "default": ""
          }
        ],
        "new": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "old",
        "new"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "String Replace (mtb)",
    "display_name": "String Replace (mtb)",
    "description": "# String Replace\nBasic string replacement.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/string",
    "output_node": false
  },
  "Fit Number (mtb)": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "forceInput": true
          }
        ],
        "clamp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "source_min": [
          "FLOAT",
          {
            "default": 0.0,
            "step": 0.01,
            "min": -100000.0
          }
        ],
        "source_max": [
          "FLOAT",
          {
            "default": 1.0,
            "step": 0.01,
            "min": -100000.0
          }
        ],
        "target_min": [
          "FLOAT",
          {
            "default": 0.0,
            "step": 0.01,
            "min": -100000.0
          }
        ],
        "target_max": [
          "FLOAT",
          {
            "default": 1.0,
            "step": 0.01,
            "min": -100000.0
          }
        ],
        "easing": [
          [
            "Linear",
            "Sine In",
            "Sine Out",
            "Sine In/Out",
            "Quart In",
            "Quart Out",
            "Quart In/Out",
            "Cubic In",
            "Cubic Out",
            "Cubic In/Out",
            "Circ In",
            "Circ Out",
            "Circ In/Out",
            "Back In",
            "Back Out",
            "Back In/Out",
            "Elastic In",
            "Elastic Out",
            "Elastic In/Out",
            "Bounce In",
            "Bounce Out",
            "Bounce In/Out"
          ],
          {
            "default": "Linear"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "clamp",
        "source_min",
        "source_max",
        "target_min",
        "target_max",
        "easing"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "Fit Number (mtb)",
    "display_name": "Fit Number (mtb)",
    "description": "Fit the input float using a source and target range",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/math",
    "output_node": false
  },
  "Get Batch From History (mtb)": {
    "input": {
      "required": {
        "enable": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "count": [
          "INT",
          {
            "default": 1,
            "min": 0
          }
        ],
        "offset": [
          "INT",
          {
            "default": 0,
            "min": -1000000000.0,
            "max": 1000000000.0
          }
        ],
        "internal_count": [
          "INT",
          {
            "default": 0
          }
        ]
      },
      "optional": {
        "passthrough_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "enable",
        "count",
        "offset",
        "internal_count"
      ],
      "optional": [
        "passthrough_image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Get Batch From History (mtb)",
    "display_name": "Get Batch From History (mtb)",
    "description": "# Get Batch from History\n\nThis experimental node does something really simple, it reads the outputs from the history endpoint of Comfy.\nOutputs gets populated by... output nodes. There are various ones but  for instance in core comfy, `Save Image` and `Preview Image` are output nodes.\nI advice to start simple and have workflows that only generates one output per queue run. Of course once you master it you can use multiple outputs as output order is kept (as long as all outputs are ran).\n\nAnother basic use case of batch from history that you can see in the 4th [example](Examples), the fake deforum effect, basically this flow allows you to **feedback** an image using the history.\n\nA classic example when showing the feedback concept is the poor man's [grey scott diffusion model](https://groups.csail.mit.edu/mac/projects/amorphous/GrayScott/) i.e the \"creative\" derivative using only a gaussian blur and a sharp at each fed steps. \n\n \nHere is an example workflow of just that.\n\nthis is the output:  \n<p align=center>\n<img width=250 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/162fb62e-96d4-4843-8902-19d59c536469\"/>\n</p>\n\nand the workflow:\n<p align=center>  \n<img width=1000 src=\"https://github.com/melMass/comfy_mtb/assets/7041726/11257918-86ff-4ddd-8d08-f2a59f7f45a2\"/>\n</p>\n\n<details><summary>expand here to copy paste this workflow</summary>\n\n```json\n{\"last_node_id\":17,\"last_link_id\":27,\"nodes\":[{\"id\":9,\"type\":\"Get Batch From History (mtb)\",\"pos\":[181,706],\"size\":[315,130],\"flags\":{},\"order\":5,\"mode\":0,\"inputs\":[{\"name\":\"passthrough_image\",\"type\":\"IMAGE\",\"link\":null,\"slot_index\":0,\"shape\":7},{\"name\":\"enable\",\"type\":\"BOOLEAN\",\"link\":6,\"widget\":{\"name\":\"enable\"}}],\"outputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"links\":[23],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Get Batch From History (mtb)\"},\"widgets_values\":[true,44,0,969]},{\"id\":13,\"type\":\"Sharpen (mtb)\",\"pos\":[996,276],\"size\":[315,130],\"flags\":{},\"order\":9,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":14}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[22],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Sharpen (mtb)\"},\"widgets_values\":[31,2,1,1]},{\"id\":15,\"type\":\"VHS_VideoCombine\",\"pos\":[528,708],\"size\":[276,580],\"flags\":{},\"order\":7,\"mode\":0,\"inputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"link\":23},{\"name\":\"audio\",\"type\":\"AUDIO\",\"link\":null,\"shape\":7},{\"name\":\"meta_batch\",\"type\":\"VHS_BatchManager\",\"link\":null,\"shape\":7},{\"name\":\"vae\",\"type\":\"VAE\",\"link\":null,\"shape\":7}],\"outputs\":[{\"name\":\"Filenames\",\"type\":\"VHS_FILENAMES\",\"links\":null}],\"properties\":{\"Node name for S&R\":\"VHS_VideoCombine\"},\"widgets_values\":{\"frame_rate\":20,\"loop_count\":0,\"filename_prefix\":\"MTB_BatchFromHistory\",\"format\":\"video/h264-mp4\",\"pix_fmt\":\"yuv420p\",\"crf\":19,\"save_metadata\":true,\"pingpong\":false,\"save_output\":true,\"videopreview\":{\"hidden\":false,\"paused\":false,\"params\":{\"filename\":\"AnimateDiff_01089.mp4\",\"subfolder\":\"\",\"type\":\"output\",\"format\":\"video/h264-mp4\",\"frame_rate\":20},\"muted\":false}}},{\"id\":16,\"type\":\"LoadImage\",\"pos\":[-168,-216],\"size\":[315,314],\"flags\":{},\"order\":0,\"mode\":4,\"inputs\":[],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[25],\"slot_index\":0},{\"name\":\"MASK\",\"type\":\"MASK\",\"links\":null}],\"properties\":{\"Node name for S&R\":\"LoadImage\"},\"widgets_values\":[\"example.png\",\"image\"]},{\"id\":17,\"type\":\"ImageScale\",\"pos\":[192,-36],\"size\":[315,130],\"flags\":{},\"order\":3,\"mode\":4,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":25}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[],\"slot_index\":0}],\"properties\":{\"Node name for S&R\":\"ImageScale\"},\"widgets_values\":[\"nearest-exact\",512,512,\"disabled\"]},{\"id\":10,\"type\":\"Blur (mtb)\",\"pos\":[672,276],\"size\":[315,122],\"flags\":{},\"order\":8,\"mode\":0,\"inputs\":[{\"name\":\"image\",\"type\":\"IMAGE\",\"link\":24},{\"name\":\"sigmasX\",\"type\":\"FLOATS\",\"link\":null,\"shape\":7},{\"name\":\"sigmasY\",\"type\":\"FLOATS\",\"link\":null,\"shape\":7}],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[14],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Blur (mtb)\"},\"widgets_values\":[6,6]},{\"id\":3,\"type\":\"Get Batch From History (mtb)\",\"pos\":[336,276],\"size\":[315,130],\"flags\":{},\"order\":6,\"mode\":0,\"inputs\":[{\"name\":\"passthrough_image\",\"type\":\"IMAGE\",\"link\":27,\"slot_index\":0,\"shape\":7},{\"name\":\"enable\",\"type\":\"BOOLEAN\",\"link\":16,\"widget\":{\"name\":\"enable\"}}],\"outputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"links\":[24],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Get Batch From History (mtb)\"},\"widgets_values\":[false,1,0,969]},{\"id\":6,\"type\":\"Int To Bool (mtb)\",\"pos\":[324,444],\"size\":[210,42.27488708496094],\"flags\":{},\"order\":4,\"mode\":0,\"inputs\":[{\"name\":\"int\",\"type\":\"INT\",\"link\":4,\"widget\":{\"name\":\"int\"}}],\"outputs\":[{\"name\":\"BOOLEAN\",\"type\":\"BOOLEAN\",\"links\":[16],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Int To Bool (mtb)\"},\"widgets_values\":[0]},{\"id\":2,\"type\":\"PreviewImage\",\"pos\":[972,456],\"size\":[360,348],\"flags\":{},\"order\":10,\"mode\":0,\"inputs\":[{\"name\":\"images\",\"type\":\"IMAGE\",\"link\":22}],\"outputs\":[],\"properties\":{\"Node name for S&R\":\"PreviewImage\"},\"widgets_values\":[]},{\"id\":1,\"type\":\"Batch Shape (mtb)\",\"pos\":[-120,192],\"size\":[210,334],\"flags\":{},\"order\":1,\"mode\":0,\"inputs\":[],\"outputs\":[{\"name\":\"IMAGE\",\"type\":\"IMAGE\",\"links\":[27],\"slot_index\":0,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Batch Shape (mtb)\"},\"widgets_values\":[1,\"Diamond\",512,512,229,\"#ffffff\",\"#000000\",\"#000000\",0,0,0]},{\"id\":4,\"type\":\"Animation Builder (mtb)\",\"pos\":[-110,596],\"size\":[210,318],\"flags\":{},\"order\":2,\"mode\":0,\"inputs\":[],\"outputs\":[{\"name\":\"frame\",\"type\":\"INT\",\"links\":[4],\"slot_index\":0,\"shape\":3},{\"name\":\"0-1 (scaled)\",\"type\":\"FLOAT\",\"links\":null,\"shape\":3},{\"name\":\"count\",\"type\":\"INT\",\"links\":null,\"shape\":3},{\"name\":\"loop_ended\",\"type\":\"BOOLEAN\",\"links\":[6],\"slot_index\":3,\"shape\":3}],\"properties\":{\"Node name for S&R\":\"Animation Builder (mtb)\"},\"widgets_values\":[45,1,1,0,0,null,null,\"reset\",\"queue\"]}],\"links\":[[4,4,0,6,0,\"INT\"],[6,4,3,9,1,\"BOOLEAN\"],[14,10,0,13,0,\"IMAGE\"],[16,6,0,3,1,\"BOOLEAN\"],[22,13,0,2,0,\"IMAGE\"],[23,9,0,15,0,\"IMAGE\"],[24,3,0,10,0,\"IMAGE\"],[25,16,0,17,0,\"IMAGE\"],[27,1,0,3,0,\"IMAGE\"]],\"groups\":[],\"config\":{},\"extra\":{\"ds\":{\"scale\":0.6727499949325705,\"offset\":[682.4627866508608,403.88645096355583]},\"ue_links\":[]},\"version\":0.4}\n```\n\n</details>\n\nThe blue bordered node is the one doing the feedback, on first frame (frame == 0 converted to bool is false) the passthrough image will be used, this example uses the [Batch Shape](nodes-batch-shape) node, only on the first queue item, then the previous queue item is fed to each subsequent queue item.\nThe orange bordered one is fetching all the frames we queued once done to assemble the GIF. All this happens in \"one click\" thanks to [Animation Builder](nodes-animation-builder)\n\n\n## Inputs\n|name|description|\n|-|-|\n|passthrough_image | This is the image that gets sent out when `enable` is set to false, useful for the init first image in the fake deforum [example](Examples) for instance ([04-animation_builder-deforum.json](https://github.com/melMass/comfy_mtb/blob/main/examples/04-animation_builder-deforum.json)) |\n|enable | This makes the node not fetch the history. For instance when you just initiated the server the history is empty, see [Animation Builder](nodes-animation-builder) for practical examples |\n|count | the number of frames to fetch from the history |\n| **Reset Button** | resets the internal counters, although the node is though around using its queue button it should still work fine when using the regular queue button of comfy |\n| **Queue Button** | Convenience button to run the queues (`total_frames` * `loop_count`) |",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/animation",
    "output_node": false
  },
  "Any To String (mtb)": {
    "input": {
      "required": {
        "input": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Any To String (mtb)",
    "display_name": "Any To String (mtb)",
    "description": "# Any to String\n\nTries to take any input and convert it to a string.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/converters",
    "output_node": false
  },
  "Concat Images (mtb)": {
    "input": {
      "required": {
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "on_mismatch": [
          [
            "Error",
            "Smallest",
            "Largest"
          ],
          {
            "default": "Smallest"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "reverse"
      ],
      "optional": [
        "on_mismatch"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Concat Images (mtb)",
    "display_name": "Concat Images (mtb)",
    "description": "# Concat Images\n\nAdd images to batch.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image",
    "output_node": false
  },
  "Math Expression (mtb)": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "expression"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "result (float)",
      "result (int)"
    ],
    "name": "Math Expression (mtb)",
    "display_name": "Math Expression (mtb)",
    "description": "evaluate a simple math expression string, only supports literal_eval",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/math",
    "output_node": false
  },
  "To Device (mtb)": {
    "input": {
      "required": {
        "ignore_errors": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "cpu",
            "cuda:0",
            "cuda"
          ],
          {
            "default": "cuda"
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "ignore_errors",
        "device"
      ],
      "optional": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "To Device (mtb)",
    "display_name": "To Device (mtb)",
    "description": "# To Device\nSend a image or mask tensor to the given device.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Apply Text Template (mtb)": {
    "input": {
      "required": {
        "template": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "template"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "Apply Text Template (mtb)",
    "display_name": "Apply Text Template (mtb)",
    "description": "# Apply Text Template\n\nVery basic string interpolation using [dynamic inputs](web-dynamic-inputs).\n\nThe var names are `var_1`, `var_2` etc... They are interpolated like this: `{var_1}`, see the following example for a more concrete idea:\n\n![template_string](https://github.com/melMass/comfy_mtb/assets/7041726/abf8d63e-87f6-426a-adcc-514b85daeb5c)\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Match Dimensions (mtb)": {
    "input": {
      "required": {
        "source": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "match": [
          [
            "height",
            "width"
          ],
          {
            "default": "height"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "reference",
        "match"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "new_width",
      "new_height"
    ],
    "name": "Match Dimensions (mtb)",
    "display_name": "Match Dimensions (mtb)",
    "description": "# Match Dimensions\n\nMatch images dimensions along the given axis, preserving aspect ratio.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Auto Pan Equilateral (mtb)": {
    "input": {
      "required": {
        "equilateral_image": [
          "IMAGE"
        ],
        "fovX": [
          "FLOAT",
          {
            "default": 45.0
          }
        ],
        "fovY": [
          "FLOAT",
          {
            "default": 45.0
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.5
          }
        ],
        "frame_count": [
          "INT",
          {
            "default": 100
          }
        ],
        "width": [
          "INT",
          {
            "default": 768
          }
        ],
        "height": [
          "INT",
          {
            "default": 512
          }
        ]
      },
      "optional": {
        "floats_fovX": [
          "FLOATS"
        ],
        "floats_fovY": [
          "FLOATS"
        ],
        "floats_elevation": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "equilateral_image",
        "fovX",
        "fovY",
        "elevation",
        "frame_count",
        "width",
        "height"
      ],
      "optional": [
        "floats_fovX",
        "floats_fovY",
        "floats_elevation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Auto Pan Equilateral (mtb)",
    "display_name": "Auto Pan Equilateral (mtb)",
    "description": "# Autopan Equilateral\n\nGenerate a 360 panning video from an equilateral image.\n\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Floats To Float (mtb)": {
    "input": {
      "required": {
        "floats": [
          "FLOATS"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "float"
    ],
    "name": "Floats To Float (mtb)",
    "display_name": "Floats To Float (mtb)",
    "description": "# `FLOATS` to `FLOAT`\n\nAD, IPA, Fitz etc have commonly choose to mistype float lists as FLOAT.\n\nThis is just a hack to be compatible with these\n    \n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Float To Floats (mtb)": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "FLOATS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "floats"
    ],
    "name": "Float To Floats (mtb)",
    "display_name": "Float To Floats (mtb)",
    "description": "Conversion utility for compatibility with other extensions (AD, IPA, Fitz are using FLOAT to represent list of floats.)",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Floats To Ints (mtb)": {
    "input": {
      "required": {
        "floats": [
          "FLOATS",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "floats"
      ]
    },
    "output": [
      "INTS",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INTS",
      "INT"
    ],
    "name": "Floats To Ints (mtb)",
    "display_name": "Floats To Ints (mtb)",
    "description": "Conversion utility for compatibility with frame interpolation.",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/utils",
    "output_node": false
  },
  "Restore Face (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          "FACEENHANCE_MODEL"
        ],
        "aligned": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "only_center_face": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.5
          }
        ],
        "save_tmp_steps": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "preserve_alpha": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "aligned",
        "only_center_face",
        "weight",
        "save_tmp_steps"
      ],
      "optional": [
        "preserve_alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Restore Face (mtb)",
    "display_name": "Restore Face (mtb)",
    "description": "# Restore Face\nUses GFPGan to restore faces\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Load Face Enhance Model (mtb)": {
    "input": {
      "required": {
        "model_name": [
          [],
          {
            "default": "None"
          }
        ],
        "upscale": [
          "INT",
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "bg_upsampler": [
          "UPSCALE_MODEL",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "upscale"
      ],
      "optional": [
        "bg_upsampler"
      ]
    },
    "output": [
      "FACEENHANCE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "Load Face Enhance Model (mtb)",
    "display_name": "Load Face Enhance Model (mtb)",
    "description": "# Load Face Enhance Model\n\nLoads a GFPGan or RestoreFormer model for face enhancement.\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Stack Images (mtb)": {
    "input": {
      "required": {
        "vertical": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "match_method": [
          [
            "error",
            "smallest",
            "largest"
          ],
          {
            "default": "error"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vertical"
      ],
      "optional": [
        "match_method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Stack Images (mtb)",
    "display_name": "Stack Images (mtb)",
    "description": "# Stack Images\n\nA simple way to stack images either horizontally or vertically. Stack image uses [dynamic inputs](web-dynamic-inputs).\n\nIt outputs RGBA tensors and supports RGB or RGBA as input (normalized to RGBA internally). If the image dimensions don't match they must at least match:\n- in `width` when stacking vertically.\n- in `height` when stacking horizontally.\n\nHere is an example workflow using [Text To Image](nodes-text-to-image) (the text was generated using [Nous Hermes 2 Vision](https://huggingface.co/billborkowski/llava-NousResearch_Nous-Hermes-2-Vision-GGUF) thanks to the great [ComfyUI_VLM_nodes](https://github.com/gokayfem/ComfyUI_VLM_nodes) extension. For simplicity's sake, the workflow doesn't contain external nodes:\n\n![stack_images](https://github.com/melMass/comfy_mtb/assets/7041726/a0c03621-3377-46cf-a6b4-f47e70c7d11f)\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image utils",
    "output_node": false
  },
  "Pick From Batch (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "from_direction": [
          [
            "end",
            "start"
          ],
          {
            "default": "start"
          }
        ],
        "count": [
          "INT",
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "from_direction",
        "count"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Pick From Batch (mtb)",
    "display_name": "Pick From Batch (mtb)",
    "description": "# Pick From Batch\nPick a specific number of images from a batch either from the head or the tail.\n    \n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image utils",
    "output_node": false
  },
  "Save Image (mtb)": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Save Image (mtb)",
    "display_name": "Save Image (mtb)",
    "description": "Saves the input images to your ComfyUI output directory.\n    This behaves exactly like the native SaveImage node but isn't an output node.\n    The reason I made this is to allow 'inlining' image save in loops for instance,\n    using the native node there wouldn't run for each iteration of the loop.",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/image utils",
    "output_node": false
  },
  "Save Gif (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "fps": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 120
          }
        ],
        "resize_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1
          }
        ],
        "optimize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "pingpong": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "resample_filter": [
          [
            "nearest",
            "box",
            "bilinear",
            "hamming",
            "bicubic",
            "lanczos"
          ]
        ],
        "use_ffmpeg": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "fps",
        "resize_by",
        "optimize",
        "pingpong",
        "resample_filter",
        "use_ffmpeg"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Gif (mtb)",
    "display_name": "Save Gif (mtb)",
    "description": "# Save GIF\nSave the images from the batch as a GIF\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/IO",
    "output_node": true,
    "deprecated": true
  },
  "Export With Ffmpeg (mtb)": {
    "input": {
      "optional": {
        "images": [
          "IMAGE"
        ],
        "playlist": [
          "PLAYLIST"
        ]
      },
      "required": {
        "fps": [
          "FLOAT",
          {
            "default": 24,
            "min": 1
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "export"
          }
        ],
        "format": [
          [
            "mov",
            "mp4",
            "mkv",
            "gif",
            "avi"
          ],
          {
            "default": "mov"
          }
        ],
        "codec": [
          [
            "prores_ks",
            "libx264",
            "libx265",
            "gif"
          ],
          {
            "default": "prores_ks"
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "images",
        "playlist"
      ],
      "required": [
        "fps",
        "prefix",
        "format",
        "codec"
      ]
    },
    "output": [
      "VIDEO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VIDEO"
    ],
    "name": "Export With Ffmpeg (mtb)",
    "display_name": "Export With Ffmpeg (mtb)",
    "description": "# Export with FFmpeg\n\nQuite crude node, [VHS](https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite) is recommended now\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/IO",
    "output_node": true,
    "deprecated": true
  },
  "Add To Playlist (mtb)": {
    "input": {
      "required": {
        "relative_paths": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "persistant_playlist": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "playlist_name": [
          "STRING",
          {
            "default": "playlist_{index:04d}"
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "relative_paths",
        "persistant_playlist",
        "playlist_name",
        "index"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Add To Playlist (mtb)",
    "display_name": "Add To Playlist (mtb)",
    "description": "Add a video to the playlist",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/IO",
    "output_node": true,
    "experimental": true
  },
  "Read Playlist (mtb)": {
    "input": {
      "required": {
        "enable": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "persistant_playlist": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "playlist_name": [
          "STRING",
          {
            "default": "playlist_{index:04d}"
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "enable",
        "persistant_playlist",
        "playlist_name",
        "index"
      ]
    },
    "output": [
      "PLAYLIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PLAYLIST"
    ],
    "name": "Read Playlist (mtb)",
    "display_name": "Read Playlist (mtb)",
    "description": "# Read a playlist\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/IO",
    "output_node": false,
    "experimental": true
  },
  "Face Swap (mtb)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "faceanalysis_model": [
          "FACE_ANALYSIS_MODEL",
          {
            "default": "None"
          }
        ],
        "faceswap_model": [
          "FACESWAP_MODEL",
          {
            "default": "None"
          }
        ]
      },
      "optional": {
        "preserve_alpha": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "faces_index",
        "faceanalysis_model",
        "faceswap_model"
      ],
      "optional": [
        "preserve_alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Face Swap (mtb)",
    "display_name": "Face Swap (mtb)",
    "description": "# Face Swap\nFace swap using deepinsight/insightface models\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Load Face Swap Model (mtb)": {
    "input": {
      "required": {
        "faceswap_model": [
          [
            "inswapper_128.onnx"
          ],
          {
            "default": "None"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "faceswap_model"
      ]
    },
    "output": [
      "FACESWAP_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACESWAP_MODEL"
    ],
    "name": "Load Face Swap Model (mtb)",
    "display_name": "Load Face Swap Model (mtb)",
    "description": "# Load Face Swap Model\n\nLoads a faceswap model\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "Load Face Analysis Model (mtb)": {
    "input": {
      "required": {
        "faceswap_model": [
          [
            "antelopev2",
            "buffalo_l",
            "buffalo_m",
            "buffalo_sc"
          ],
          {
            "default": "buffalo_l"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "faceswap_model"
      ]
    },
    "output": [
      "FACE_ANALYSIS_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_ANALYSIS_MODEL"
    ],
    "name": "Load Face Analysis Model (mtb)",
    "display_name": "Load Face Analysis Model (mtb)",
    "description": "# Load Face Analysis\n\nLoads a face analysis model\n",
    "python_module": "custom_nodes.comfy_mtb",
    "category": "mtb/facetools",
    "output_node": false,
    "deprecated": true
  },
  "CivitAI_Lora_Loader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_air": [
          "STRING",
          {
            "default": "{model_id}@{model_version}",
            "multiline": false
          }
        ],
        "lora_name": [
          [
            "none",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "api_key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "download_chunks": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "download_path": [
          [
            "models/loras"
          ]
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_air",
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "api_key",
        "download_chunks",
        "download_path"
      ],
      "hidden": [
        "extra_pnginfo"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "CivitAI_Lora_Loader",
    "display_name": "CivitAI Lora Loader",
    "description": "",
    "python_module": "custom_nodes.civitai_comfy_nodes",
    "category": "CivitAI/Loaders",
    "output_node": false
  },
  "CivitAI_Checkpoint_Loader": {
    "input": {
      "required": {
        "ckpt_air": [
          "STRING",
          {
            "default": "{model_id}@{model_version}",
            "multiline": false
          }
        ],
        "ckpt_name": [
          [
            "none",
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      },
      "optional": {
        "api_key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "download_chunks": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "download_path": [
          [
            "models/checkpoints"
          ]
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "ckpt_air",
        "ckpt_name"
      ],
      "optional": [
        "api_key",
        "download_chunks",
        "download_path"
      ],
      "hidden": [
        "extra_pnginfo"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CivitAI_Checkpoint_Loader",
    "display_name": "CivitAI Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.civitai_comfy_nodes",
    "category": "CivitAI/Loaders",
    "output_node": false
  },
  "BOOLConstant": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "BOOLConstant",
    "display_name": "BOOL Constant",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "INTConstant": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "INTConstant",
    "display_name": "INT Constant",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "FloatConstant": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1e-05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "FloatConstant",
    "display_name": "Float Constant",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "StringConstant": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "StringConstant",
    "display_name": "String Constant",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "StringConstantMultiline": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "strip_newlines": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "strip_newlines"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "StringConstantMultiline",
    "display_name": "String Constant Multiline",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "ConditioningMultiCombine": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 20,
            "step": 1
          }
        ],
        "operation": [
          [
            "combine",
            "concat"
          ],
          {
            "default": "combine"
          }
        ],
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "operation",
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined",
      "inputcount"
    ],
    "name": "ConditioningMultiCombine",
    "display_name": "Conditioning Multi Combine",
    "description": "\nCombines multiple conditioning nodes into one\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "mask_1",
        "mask_2",
        "mask_1_strength",
        "mask_2_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine",
    "display_name": "ConditioningSetMaskAndCombine",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine3": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine3",
    "display_name": "ConditioningSetMaskAndCombine3",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine4": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "positive_4": [
          "CONDITIONING"
        ],
        "negative_4": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_4": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_4_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "positive_4",
        "negative_4",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_4",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "mask_4_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine4",
    "display_name": "ConditioningSetMaskAndCombine4",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine5": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "positive_4": [
          "CONDITIONING"
        ],
        "negative_4": [
          "CONDITIONING"
        ],
        "positive_5": [
          "CONDITIONING"
        ],
        "negative_5": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_4": [
          "MASK"
        ],
        "mask_5": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_4_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_5_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "positive_4",
        "negative_4",
        "positive_5",
        "negative_5",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_4",
        "mask_5",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "mask_4_strength",
        "mask_5_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine5",
    "display_name": "ConditioningSetMaskAndCombine5",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "CondPassThrough": {
    "input": {
      "required": {},
      "optional": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "positive",
        "negative"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "CondPassThrough",
    "display_name": "CondPassThrough",
    "description": "\n    Simply passes through the positive and negative conditioning,\n    workaround for Set node not allowing bypassed inputs.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "DownloadAndLoadCLIPSeg": {
    "input": {
      "required": {
        "model": [
          [
            "Kijai/clipseg-rd64-refined-fp16",
            "CIDAS/clipseg-rd64-refined"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "CLIPSEGMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "clipseg_model"
    ],
    "name": "DownloadAndLoadCLIPSeg",
    "display_name": "(Down)load CLIPSeg",
    "description": "\nDownloads and loads CLIPSeg model with huggingface_hub,  \nto ComfyUI/models/clip_seg\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchCLIPSeg": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "binary_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "combine_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_cuda": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "blur_sigma": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "opt_model": [
          "CLIPSEGMODEL"
        ],
        "prev_mask": [
          "MASK",
          {
            "default": null
          }
        ],
        "image_bg_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "text",
        "threshold",
        "binary_mask",
        "combine_mask",
        "use_cuda"
      ],
      "optional": [
        "blur_sigma",
        "opt_model",
        "prev_mask",
        "image_bg_level",
        "invert"
      ]
    },
    "output": [
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "Mask",
      "Image"
    ],
    "name": "BatchCLIPSeg",
    "display_name": "Batch CLIPSeg",
    "description": "\nSegments an image or batch of images using CLIPSeg.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "ColorToMask": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "invert",
        "red",
        "green",
        "blue",
        "threshold",
        "per_batch"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ColorToMask",
    "display_name": "Color To Mask",
    "description": "\nConverts chosen RGB value to a mask.  \nWith batch inputs, the **per_batch**  \ncontrols the number of images processed at once.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "CreateGradientMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CreateGradientMask",
    "display_name": "Create Gradient Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateTextMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "text_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 32,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "font_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "text": [
          "STRING",
          {
            "default": "HELLO!",
            "multiline": true
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "start_rotation": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 359,
            "step": 1
          }
        ],
        "end_rotation": [
          "INT",
          {
            "default": 0,
            "min": -359,
            "max": 359,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "text_x",
        "text_y",
        "font_size",
        "font_color",
        "text",
        "font",
        "width",
        "height",
        "start_rotation",
        "end_rotation"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "CreateTextMask",
    "display_name": "Create Text Mask",
    "description": "\nCreates a text image and mask.  \nLooks for fonts from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n  \nIf start_rotation and/or end_rotation are different values,  \ncreates animation between them.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "CreateAudioMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "audio_path": [
          "STRING",
          {
            "default": "audio.wav"
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "scale",
        "audio_path",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CreateAudioMask",
    "display_name": "Create Audio Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/deprecated",
    "output_node": false
  },
  "CreateFadeMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "start_level": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "midpoint_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "midpoint_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height",
        "interpolation",
        "start_level",
        "midpoint_level",
        "end_level",
        "midpoint_frame"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CreateFadeMask",
    "display_name": "Create Fade Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/deprecated",
    "output_node": false
  },
  "CreateFadeMaskAdvanced": {
    "input": {
      "required": {
        "points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
            "multiline": true
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "points_string",
        "invert",
        "frames",
        "width",
        "height",
        "interpolation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CreateFadeMaskAdvanced",
    "display_name": "Create Fade Mask Advanced",
    "description": "\nCreate a batch of masks interpolated between given frames and values. \nUses same syntax as Fizz' BatchValueSchedule.\nFirst value is the frame index (not that this starts from 0, not 1) \nand the second value inside the brackets is the float value of the mask in range 0.0 - 1.0  \n\nFor example the default values:  \n0:(0.0)  \n7:(1.0)  \n15:(0.0)  \n  \nWould create a mask batch fo 16 frames, starting from black, \ninterpolating with the chosen curve to fully white at the 8th frame, \nand interpolating from that to fully black at the 16th frame.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateFluidMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "inflow_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_velocity": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_radius": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_padding": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_duration": [
          "INT",
          {
            "default": 60,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height",
        "inflow_count",
        "inflow_velocity",
        "inflow_radius",
        "inflow_padding",
        "inflow_duration"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "CreateFluidMask",
    "display_name": "Create Fluid Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateShapeMask": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "location_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "location_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "grow": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "frames",
        "location_x",
        "location_y",
        "grow",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateShapeMask",
    "display_name": "Create Shape Mask",
    "description": "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \nGrow value is the amount to grow the shape on each frame, creating animated masks.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateVoronoiMask": {
    "input": {
      "required": {
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "num_points": [
          "INT",
          {
            "default": 15,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "line_width": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "speed": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "frames",
        "num_points",
        "line_width",
        "speed",
        "frame_width",
        "frame_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateVoronoiMask",
    "display_name": "Create Voronoi Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateMagicMask": {
    "input": {
      "required": {
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "depth": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 500,
            "step": 1
          }
        ],
        "distortion": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ],
        "transitions": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "frames",
        "depth",
        "distortion",
        "seed",
        "transitions",
        "frame_width",
        "frame_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateMagicMask",
    "display_name": "Create Magic Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "GetMaskSizeAndCount": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "mask",
      "width",
      "height",
      "count"
    ],
    "name": "GetMaskSizeAndCount",
    "display_name": "Get Mask Size & Count",
    "description": "\nReturns the width, height and batch size of the mask,  \nand passes it through unchanged.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "GrowMaskWithBlur": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "incremental_expandrate": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "flip_input": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "lerp_alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "decay_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "fill_holes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "incremental_expandrate",
        "tapered_corners",
        "flip_input",
        "blur_radius",
        "lerp_alpha",
        "decay_factor"
      ],
      "optional": [
        "fill_holes"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "GrowMaskWithBlur",
    "display_name": "Grow Mask With Blur",
    "description": "\n# GrowMaskWithBlur\n- mask: Input mask or mask batch\n- expand: Expand or contract mask or mask batch by a given amount\n- incremental_expandrate: increase expand rate by a given amount per frame\n- tapered_corners: use tapered corners\n- flip_input: flip input mask\n- blur_radius: value higher than 0 will blur the mask\n- lerp_alpha: alpha value for interpolation between frames\n- decay_factor: decay value for interpolation between frames\n- fill_holes: fill holes in the mask (slow)",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "MaskBatchMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "mask_1",
        "mask_2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "masks"
    ],
    "name": "MaskBatchMulti",
    "display_name": "Mask Batch Multi",
    "description": "\nCreates an image batch from multiple masks.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "OffsetMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "angle": [
          "INT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1,
            "display": "number"
          }
        ],
        "duplication_factor": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000,
            "step": 1,
            "display": "number"
          }
        ],
        "roll": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "incremental": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "padding_mode": [
          [
            "empty",
            "border",
            "reflection"
          ],
          {
            "default": "empty"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "angle",
        "duplication_factor",
        "roll",
        "incremental",
        "padding_mode"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "OffsetMask",
    "display_name": "Offset Mask",
    "description": "\nOffsets the mask by the specified amount.  \n - mask: Input mask or mask batch\n - x: Horizontal offset\n - y: Vertical offset\n - angle: Angle in degrees\n - roll: roll edge wrapping\n - duplication_factor: Number of times to duplicate the mask to form a batch\n - border padding_mode: Padding mode for the mask\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "RemapMaskRange": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "min",
        "max"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "RemapMaskRange",
    "display_name": "Remap Mask Range",
    "description": "\nSets new min and max values for the mask.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "ResizeMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8,
            "display": "number"
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8,
            "display": "number"
          }
        ],
        "keep_proportions": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "width",
        "height",
        "keep_proportions",
        "upscale_method",
        "crop"
      ]
    },
    "output": [
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "mask",
      "width",
      "height"
    ],
    "name": "ResizeMask",
    "display_name": "Resize Mask",
    "description": "\nResizes the mask or batch of masks to the specified width and height.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "RoundMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "RoundMask",
    "display_name": "Round Mask",
    "description": "\nRounds the mask or batch of masks to a binary mask.  \n<img src=\"https://github.com/kijai/ComfyUI-KJNodes/assets/40791699/52c85202-f74e-4b96-9dac-c8bda5ddcc40\" width=\"300\" height=\"250\" alt=\"RoundMask example\">\n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "SeparateMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "size_threshold_width": [
          "INT",
          {
            "default": 256,
            "min": 0.0,
            "max": 4096,
            "step": 1
          }
        ],
        "size_threshold_height": [
          "INT",
          {
            "default": 256,
            "min": 0.0,
            "max": 4096,
            "step": 1
          }
        ],
        "mode": [
          [
            "convex_polygons",
            "area"
          ]
        ],
        "max_poly_points": [
          "INT",
          {
            "default": 8,
            "min": 3,
            "max": 32,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "size_threshold_width",
        "size_threshold_height",
        "mode",
        "max_poly_points"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "SeparateMasks",
    "display_name": "Separate Masks",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": true
  },
  "AddLabel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text_x": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 48,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "font_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "label_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "text": [
          "STRING",
          {
            "default": "Text"
          }
        ],
        "direction": [
          [
            "up",
            "down",
            "left",
            "right",
            "overlay"
          ],
          {
            "default": "up"
          }
        ]
      },
      "optional": {
        "caption": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text_x",
        "text_y",
        "height",
        "font_size",
        "font_color",
        "label_color",
        "font",
        "text",
        "direction"
      ],
      "optional": [
        "caption"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AddLabel",
    "display_name": "Add Label",
    "description": "\nCreates a new with the given text, and concatenates it to  \neither above or below the input image.  \nNote that this changes the input image's height!  \nFonts are loaded from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "ColorMatch": {
    "input": {
      "required": {
        "image_ref": [
          "IMAGE"
        ],
        "image_target": [
          "IMAGE"
        ],
        "method": [
          [
            "mkl",
            "hm",
            "reinhard",
            "mvgd",
            "hm-mvgd-hm",
            "hm-mkl-hm"
          ],
          {
            "default": "mkl"
          }
        ]
      },
      "optional": {
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_ref",
        "image_target",
        "method"
      ],
      "optional": [
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ColorMatch",
    "display_name": "Color Match",
    "description": "\ncolor-matcher enables color transfer across images which comes in handy for automatic  \ncolor-grading of photographs, paintings and film sequences as well as light-field  \nand stopmotion corrections.  \n\nThe methods behind the mappings are based on the approach from Reinhard et al.,  \nthe Monge-Kantorovich Linearization (MKL) as proposed by Pitie et al. and our analytical solution  \nto a Multi-Variate Gaussian Distribution (MVGD) transfer in conjunction with classical histogram   \nmatching. As shown below our HM-MVGD-HM compound outperforms existing methods.   \nhttps://github.com/hahnec/color-matcher/\n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageTensorList": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageTensorList",
    "display_name": "Image Tensor List",
    "description": "\nCreates an image list from the input images.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CrossFadeImages": {
    "input": {
      "required": {
        "images_1": [
          "IMAGE"
        ],
        "images_2": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_start_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "start_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_level": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_1",
        "images_2",
        "interpolation",
        "transition_start_index",
        "transitioning_frames",
        "start_level",
        "end_level"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CrossFadeImages",
    "display_name": "Cross Fade Images",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CrossFadeImagesMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "interpolation",
        "transitioning_frames"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CrossFadeImagesMulti",
    "display_name": "Cross Fade Images Multi",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetImagesFromBatchIndexed": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "indexes"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "GetImagesFromBatchIndexed",
    "display_name": "Get Images From Batch Indexed",
    "description": "\nSelects and returns the images at the specified indices as an image batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetImageRangeFromBatch": {
    "input": {
      "required": {
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "start_index",
        "num_frames"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "GetImageRangeFromBatch",
    "display_name": "Get Image or Mask Range From Batch",
    "description": "\nReturns a range of images from a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetLatentRangeFromBatch": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "start_index",
        "num_frames"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "GetLatentRangeFromBatch",
    "display_name": "Get Latent Range From Batch",
    "description": "\nReturns a range of latents from a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "GetImageSizeAndCount": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "width",
      "height",
      "count"
    ],
    "name": "GetImageSizeAndCount",
    "display_name": "Get Image Size & Count",
    "description": "\nReturns width, height and batch size of the image,  \nand passes it through unchanged.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "FastPreview": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "format": [
          [
            "JPEG",
            "PNG",
            "WEBP"
          ],
          {
            "default": "JPEG"
          }
        ],
        "quality": [
          "INT",
          {
            "default": 75,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "format",
        "quality"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FastPreview",
    "display_name": "Fast Preview",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": true
  },
  "ImageAndMaskPreview": {
    "input": {
      "required": {
        "mask_opacity": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_color": [
          "STRING",
          {
            "default": "255, 255, 255"
          }
        ],
        "pass_through": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask_opacity",
        "mask_color",
        "pass_through"
      ],
      "optional": [
        "image",
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "composite"
    ],
    "name": "ImageAndMaskPreview",
    "display_name": "ImageAndMaskPreview",
    "description": "\nPreview an image or a mask, when both inputs are used  \ncomposites the mask on top of the image.\nwith pass_through on the preview is disabled and the  \ncomposite is returned from the composite slot instead,  \nthis allows for the preview to be passed for video combine  \nnodes for example.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": true
  },
  "ImageAddMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "blending": [
          [
            "add",
            "subtract",
            "multiply",
            "difference"
          ],
          {
            "default": "add"
          }
        ],
        "blend_amount": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "blending",
        "blend_amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "ImageAddMulti",
    "display_name": "Image Add Multi",
    "description": "\nAdd blends multiple images together.    \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "ImageBatchMulti",
    "display_name": "Image Batch Multi",
    "description": "\nCreates an image batch from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchRepeatInterleaving": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "repeats"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchRepeatInterleaving",
    "display_name": "ImageBatchRepeatInterleaving",
    "description": "\nRepeats each image in a batch by the specified number of times.  \nExample batch of 5 images: 0, 1 ,2, 3, 4  \nwith repeats 2 becomes batch of 10 images: 0, 0, 1, 1, 2, 2, 3, 3, 4, 4  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchTestPattern": {
    "input": {
      "required": {
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "start_from": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "text_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 255,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_size",
        "start_from",
        "text_x",
        "text_y",
        "width",
        "height",
        "font",
        "font_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchTestPattern",
    "display_name": "Image Batch Test Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "ImageConcanate": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "direction",
        "match_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageConcanate",
    "display_name": "Image Concatenate",
    "description": "\nConcatenates the image2 to image1 in the specified direction.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageConcatFromBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "num_columns": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "max_resolution": [
          "INT",
          {
            "default": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "num_columns",
        "match_image_size",
        "max_resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageConcatFromBatch",
    "display_name": "Image Concatenate From Batch",
    "description": "\n    Concatenates images from a batch into a grid with a specified number of columns.\n    ",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageConcatMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "direction",
        "match_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "ImageConcatMulti",
    "display_name": "Image Concatenate Multi",
    "description": "\nCreates an image from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageCropByMaskAndResize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "base_resolution": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "min_crop_resolution": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "max_crop_resolution": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "base_resolution",
        "padding",
        "min_crop_resolution",
        "max_crop_resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "images",
      "masks",
      "bbox"
    ],
    "name": "ImageCropByMaskAndResize",
    "display_name": "Image Crop By Mask And Resize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageCropByMaskBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "preserve_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bg_color": [
          "STRING",
          {
            "default": "0, 0, 0",
            "tooltip": "Color as RGB values in range 0-255, separated by commas."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "masks",
        "width",
        "height",
        "padding",
        "preserve_size",
        "bg_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "ImageCropByMaskBatch",
    "display_name": "Image Crop By Mask Batch",
    "description": "Crops the input images based on the provided masks.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageUncropByMask": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "bbox": [
          "BBOX"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "mask",
        "bbox"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ImageUncropByMask",
    "display_name": "Image Uncrop By Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGrabPIL": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "delay": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "num_frames",
        "delay"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ImageGrabPIL",
    "display_name": "Image Grab PIL",
    "description": "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridComposite2x2": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "image3",
        "image4"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridComposite2x2",
    "display_name": "Image Grid Composite 2x2",
    "description": "\nConcatenates the 4 input images into a 2x2 grid. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridComposite3x3": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ],
        "image5": [
          "IMAGE"
        ],
        "image6": [
          "IMAGE"
        ],
        "image7": [
          "IMAGE"
        ],
        "image8": [
          "IMAGE"
        ],
        "image9": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "image3",
        "image4",
        "image5",
        "image6",
        "image7",
        "image8",
        "image9"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridComposite3x3",
    "display_name": "Image Grid Composite 3x3",
    "description": "\nConcatenates the 9 input images into a 3x3 grid. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridtoBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "columns": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 8,
            "tooltip": "The number of columns in the grid."
          }
        ],
        "rows": [
          "INT",
          {
            "default": 0,
            "min": 1,
            "max": 8,
            "tooltip": "The number of rows in the grid. Set to 0 for automatic calculation."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "columns",
        "rows"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridtoBatch",
    "display_name": "Image Grid To Batch",
    "description": "Converts a grid of images to a batch of images.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageNoiseAugmentation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": null,
            "min": 0.0,
            "max": 100.0,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_aug_strength",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageNoiseAugmentation",
    "display_name": "Image Noise Augmentation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageNormalize_Neg1_To_1": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageNormalize_Neg1_To_1",
    "display_name": "Image Normalize -1 to 1",
    "description": "\nNormalize the images to be in the range [-1, 1]  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImagePass": {
    "input": {
      "required": {},
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImagePass",
    "display_name": "ImagePass",
    "description": "\nPasses the image through without modifying it.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImagePadForOutpaintMasked": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaintMasked",
    "display_name": "Image Pad For Outpaint Masked",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaintTargetSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "target_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "target_width",
        "target_height",
        "feathering",
        "upscale_method"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaintTargetSize",
    "display_name": "Image Pad For Outpaint Target Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "image",
    "output_node": false
  },
  "ImageResizeKJ": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "keep_proportion": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divisible_by": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      },
      "optional": {
        "width_input": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "height_input": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "get_image_size": [
          "IMAGE"
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "upscale_method",
        "keep_proportion",
        "divisible_by"
      ],
      "optional": [
        "width_input",
        "height_input",
        "get_image_size",
        "crop"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "ImageResizeKJ",
    "display_name": "Resize Image",
    "description": "\nResizes the image to the specified width and height.  \nSize can be retrieved from the inputs, and the final scale  \nis  determined in this order of importance:  \n- get_image_size  \n- width_input and height_input  \n- width and height widgets  \n  \nKeep proportions keeps the aspect ratio of the image, by  \nhighest dimension.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageUpscaleWithModelBatched": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "images": [
          "IMAGE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "images",
        "per_batch"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModelBatched",
    "display_name": "Image Upscale With Model Batched",
    "description": "\nSame as ComfyUI native model upscaling node,  \nbut allows setting sub-batches for reduced VRAM usage.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "InsertImagesToBatchIndexed": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "images_to_insert": [
          "IMAGE"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "images_to_insert",
        "indexes"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "InsertImagesToBatchIndexed",
    "display_name": "Insert Images To Batch Indexed",
    "description": "\nInserts images at the specified indices into the original image batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "InsertLatentToIndexed": {
    "input": {
      "required": {
        "source": [
          "LATENT"
        ],
        "destination": [
          "LATENT"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "destination",
        "index"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "InsertLatentToIndexed",
    "display_name": "Insert Latent To Index",
    "description": "\nInserts a latent at the specified index into the original latent batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "LoadAndResizeImage": {
    "input": {
      "required": {
        "image": [
          [
            "ComfyUI_00168_.png",
            "ComfyUI_00180_.png",
            "ComfyUI_temp_ktysl_00001_-(1).png",
            "ComfyUI_temp_ktysl_00001_.png",
            "example.png",
            "test.png"
          ],
          {
            "image_upload": true
          }
        ],
        "resize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "keep_proportion": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divisible_by": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ],
        "mask_channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ],
          {
            "tooltip": "Channel to use for the mask output"
          }
        ],
        "background_color": [
          "STRING",
          {
            "default": "",
            "tooltip": "Fills the alpha channel with the specified color."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "resize",
        "width",
        "height",
        "repeat",
        "keep_proportion",
        "divisible_by",
        "mask_channel",
        "background_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "width",
      "height",
      "image_path"
    ],
    "name": "LoadAndResizeImage",
    "display_name": "Load & Resize Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "LoadImagesFromFolderKJ": {
    "input": {
      "required": {
        "folder": [
          "STRING",
          {
            "default": ""
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "step": 1
          }
        ],
        "keep_aspect_ratio": [
          [
            "crop",
            "pad",
            "stretch"
          ]
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "include_subfolders": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "folder",
        "width",
        "height",
        "keep_aspect_ratio"
      ],
      "optional": [
        "image_load_cap",
        "start_index",
        "include_subfolders"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "count",
      "image_path"
    ],
    "name": "LoadImagesFromFolderKJ",
    "display_name": "Load Images From Folder (KJ)",
    "description": "Loads images from a folder into a batch, images are resized and loaded into a batch.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "MergeImageChannels": {
    "input": {
      "required": {
        "red": [
          "IMAGE"
        ],
        "green": [
          "IMAGE"
        ],
        "blue": [
          "IMAGE"
        ]
      },
      "optional": {
        "alpha": [
          "MASK",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "red",
        "green",
        "blue"
      ],
      "optional": [
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "MergeImageChannels",
    "display_name": "Merge Image Channels",
    "description": "\nMerges channel data into an image.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "PreviewAnimation": {
    "input": {
      "required": {
        "fps": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "fps"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAnimation",
    "display_name": "Preview Animation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "RemapImageRange": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clamp": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "min",
        "max",
        "clamp"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RemapImageRange",
    "display_name": "Remap Image Range",
    "description": "\nRemaps the image values to the specified range. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ReverseImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReverseImageBatch",
    "display_name": "Reverse Image Batch",
    "description": "\nReverses the order of the images in a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ReplaceImagesInBatch": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "replacement_images": [
          "IMAGE"
        ],
        "start_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "replacement_images",
        "start_index"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReplaceImagesInBatch",
    "display_name": "Replace Images In Batch",
    "description": "\nReplaces the images in a batch, starting from the specified start index,  \nwith the replacement images.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "SaveImageWithAlpha": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "mask",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWithAlpha",
    "display_name": "Save Image With Alpha",
    "description": "\nSaves an image and mask as .PNG with the mask as the alpha channel. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "SaveImageKJ": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ],
        "output_folder": [
          "STRING",
          {
            "default": "output",
            "tooltip": "The folder to save the images to."
          }
        ]
      },
      "optional": {
        "caption_file_extension": [
          "STRING",
          {
            "default": ".txt",
            "tooltip": "The extension for the caption file."
          }
        ],
        "caption": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "string to save as .txt file"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "output_folder"
      ],
      "optional": [
        "caption_file_extension",
        "caption"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "filename"
    ],
    "name": "SaveImageKJ",
    "display_name": "Save Image KJ",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "ShuffleImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ShuffleImageBatch",
    "display_name": "Shuffle Image Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "SplitImageChannels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "red",
      "green",
      "blue",
      "mask"
    ],
    "name": "SplitImageChannels",
    "display_name": "Split Image Channels",
    "description": "\nSplits image channels into images where the selected channel  \nis repeated for all channels, and the alpha as a mask. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "TransitionImagesMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "box",
            "circle",
            "horizontal door",
            "vertical door",
            "fade"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "CPU",
            "GPU"
          ],
          {
            "default": "CPU"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "interpolation",
        "transition_type",
        "transitioning_frames",
        "blur_radius",
        "reverse",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TransitionImagesMulti",
    "display_name": "Transition Images Multi",
    "description": "\nCreates transitions between images.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "TransitionImagesInBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "box",
            "circle",
            "horizontal door",
            "vertical door",
            "fade"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "CPU",
            "GPU"
          ],
          {
            "default": "CPU"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "interpolation",
        "transition_type",
        "transitioning_frames",
        "blur_radius",
        "reverse",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TransitionImagesInBatch",
    "display_name": "Transition Images In Batch",
    "description": "\nCreates transitions between images in a batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "BatchCropFromMask": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "crop_size_mult": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "bbox_smooth_alpha": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "masks",
        "crop_size_mult",
        "bbox_smooth_alpha"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "BBOX",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "original_images",
      "cropped_images",
      "bboxes",
      "width",
      "height"
    ],
    "name": "BatchCropFromMask",
    "display_name": "Batch Crop From Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchCropFromMaskAdvanced": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "crop_size_mult": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "bbox_smooth_alpha": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "masks",
        "crop_size_mult",
        "bbox_smooth_alpha"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "MASK",
      "IMAGE",
      "MASK",
      "BBOX",
      "BBOX",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "original_images",
      "cropped_images",
      "cropped_masks",
      "combined_crop_image",
      "combined_crop_masks",
      "bboxes",
      "combined_bounding_box",
      "bbox_width",
      "bbox_height"
    ],
    "name": "BatchCropFromMaskAdvanced",
    "display_name": "Batch Crop From Mask Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "FilterZeroMasksAndCorrespondingImages": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      },
      "optional": {
        "original_images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ],
      "optional": [
        "original_images"
      ]
    },
    "output": [
      "MASK",
      "IMAGE",
      "IMAGE",
      "INDEXES"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "non_zero_masks_out",
      "non_zero_mask_images_out",
      "zero_mask_images_out",
      "zero_mask_images_out_indexes"
    ],
    "name": "FilterZeroMasksAndCorrespondingImages",
    "display_name": "FilterZeroMasksAndCorrespondingImages",
    "description": "\nFilter out all the empty (i.e. all zero) mask in masks  \nAlso filter out all the corresponding images in original_images by indexes if provide  \n  \noriginal_images (optional): If provided, need have same length as masks.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "InsertImageBatchByIndexes": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "images_to_insert": [
          "IMAGE"
        ],
        "insert_indexes": [
          "INDEXES"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "images_to_insert",
        "insert_indexes"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images_after_insert"
    ],
    "name": "InsertImageBatchByIndexes",
    "display_name": "Insert Image Batch By Indexes",
    "description": "\nThis node is designed to be use with node FilterZeroMasksAndCorrespondingImages\nIt inserts the images_to_insert into images according to insert_indexes\n\nReturns:\n    images_after_insert: updated original images with origonal sequence order\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "BatchUncrop": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "cropped_images": [
          "IMAGE"
        ],
        "bboxes": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_rescale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "border_top": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_bottom": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_left": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_right": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "cropped_images",
        "bboxes",
        "border_blending",
        "crop_rescale",
        "border_top",
        "border_bottom",
        "border_left",
        "border_right"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BatchUncrop",
    "display_name": "Batch Uncrop",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchUncropAdvanced": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "cropped_images": [
          "IMAGE"
        ],
        "cropped_masks": [
          "MASK"
        ],
        "combined_crop_mask": [
          "MASK"
        ],
        "bboxes": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_rescale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "use_combined_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_square_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "combined_bounding_box": [
          "BBOX",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "cropped_images",
        "cropped_masks",
        "combined_crop_mask",
        "bboxes",
        "border_blending",
        "crop_rescale",
        "use_combined_mask",
        "use_square_mask"
      ],
      "optional": [
        "combined_bounding_box"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BatchUncropAdvanced",
    "display_name": "Batch Uncrop Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "SplitBboxes": {
    "input": {
      "required": {
        "bboxes": [
          "BBOX"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bboxes",
        "index"
      ]
    },
    "output": [
      "BBOX",
      "BBOX"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "bboxes_a",
      "bboxes_b"
    ],
    "name": "SplitBboxes",
    "display_name": "Split Bboxes",
    "description": "\nSplits the specified bbox list at the given index into two lists.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BboxToInt": {
    "input": {
      "required": {
        "bboxes": [
          "BBOX"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bboxes",
        "index"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "x_min",
      "y_min",
      "width",
      "height",
      "center_x",
      "center_y"
    ],
    "name": "BboxToInt",
    "display_name": "Bbox To Int",
    "description": "\nReturns selected index from bounding box list as integers.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BboxVisualize": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "bboxes": [
          "BBOX"
        ],
        "line_width": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "bboxes",
        "line_width"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "BboxVisualize",
    "display_name": "Bbox Visualize",
    "description": "\nVisualizes the specified bbox on the image.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "GenerateNoise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 4096,
            "step": 0.01
          }
        ],
        "constant_batch_noise": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_channels": [
          [
            "4",
            "16"
          ]
        ],
        "shape": [
          [
            "BCHW",
            "BCTHW",
            "BTCHW"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "seed",
        "multiplier",
        "constant_batch_noise",
        "normalize"
      ],
      "optional": [
        "model",
        "sigmas",
        "latent_channels",
        "shape"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "GenerateNoise",
    "display_name": "Generate Noise",
    "description": "\nGenerates noise for injection or to be used as empty latents on samplers with add_noise off.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "FlipSigmasAdjusted": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "divide_by_last_sigma": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divide_by": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 0.01
          }
        ],
        "offset_by": [
          "INT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "divide_by_last_sigma",
        "divide_by",
        "offset_by"
      ]
    },
    "output": [
      "SIGMAS",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SIGMAS",
      "sigmas_string"
    ],
    "name": "FlipSigmasAdjusted",
    "display_name": "Flip Sigmas Adjusted",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "InjectNoiseToLatent": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 200.0,
            "step": 0.0001
          }
        ],
        "noise": [
          "LATENT"
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "average": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "mix_randn_amount": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "strength",
        "noise",
        "normalize",
        "average"
      ],
      "optional": [
        "mask",
        "mix_randn_amount",
        "seed"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "InjectNoiseToLatent",
    "display_name": "Inject Noise To Latent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "CustomSigmas": {
    "input": {
      "required": {
        "sigmas_string": [
          "STRING",
          {
            "default": "14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029",
            "multiline": true
          }
        ],
        "interpolate_to_steps": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas_string",
        "interpolate_to_steps"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "CustomSigmas",
    "display_name": "Custom Sigmas",
    "description": "\nCreates a sigmas tensor from a string of comma separated values.  \nExamples: \n   \nNvidia's optimized AYS 10 step schedule for SD 1.5:  \n14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029  \nSDXL:   \n14.615, 6.315, 3.771, 2.181, 1.342, 0.862, 0.555, 0.380, 0.234, 0.113, 0.029  \nSVD:  \n700.00, 54.5, 15.886, 7.977, 4.248, 1.789, 0.981, 0.403, 0.173, 0.034, 0.002  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "WidgetToString": {
    "input": {
      "required": {
        "id": [
          "INT",
          {
            "default": 0
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "return_all": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "any_input": [
          "*",
          {}
        ],
        "node_title": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "allowed_float_decimals": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "tooltip": "Number of decimal places to display for float values"
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "id",
        "widget_name",
        "return_all"
      ],
      "optional": [
        "any_input",
        "node_title",
        "allowed_float_decimals"
      ],
      "hidden": [
        "extra_pnginfo",
        "prompt",
        "unique_id"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "WidgetToString",
    "display_name": "Widget To String",
    "description": "\nSelects a node and it's specified widget and outputs the value as a string.  \nIf no node id or title is provided it will use the 'any_input' link and use that node.  \nTo see node id's, enable node id display from Manager badge menu.  \nAlternatively you can search with the node title. Node titles ONLY exist if they  \nare manually edited!  \nThe 'any_input' is required for making sure the node you want the value from exists in the workflow.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "SaveStringKJ": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "string to save as .txt file"
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "text",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ],
        "output_folder": [
          "STRING",
          {
            "default": "output",
            "tooltip": "The folder to save the images to."
          }
        ]
      },
      "optional": {
        "file_extension": [
          "STRING",
          {
            "default": ".txt",
            "tooltip": "The extension for the caption file."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "filename_prefix",
        "output_folder"
      ],
      "optional": [
        "file_extension"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "filename"
    ],
    "name": "SaveStringKJ",
    "display_name": "Save String KJ",
    "description": "Saves the input string to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": true
  },
  "DummyOut": {
    "input": {
      "required": {
        "any_input": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "any_input"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "DummyOut",
    "display_name": "Dummy Out",
    "description": "\nDoes nothing, used to trigger generic workflow output.    \nA way to get previews in the UI without saving anything to disk.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": true
  },
  "GetLatentsFromBatchIndexed": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ],
        "latent_format": [
          [
            "BCHW",
            "BTCHW",
            "BCTHW"
          ],
          {
            "default": "BCHW"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "indexes",
        "latent_format"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "GetLatentsFromBatchIndexed",
    "display_name": "Get Latents From Batch Indexed",
    "description": "\nSelects and returns the latents at the specified indices as an latent batch.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "ScaleBatchPromptSchedule": {
    "input": {
      "required": {
        "input_str": [
          "STRING",
          {
            "forceInput": true,
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n"
          }
        ],
        "old_frame_count": [
          "INT",
          {
            "forceInput": true,
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "new_frame_count": [
          "INT",
          {
            "forceInput": true,
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_str",
        "old_frame_count",
        "new_frame_count"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ScaleBatchPromptSchedule",
    "display_name": "Scale Batch Prompt Schedule",
    "description": "\nScales a batch schedule from Fizz' nodes BatchPromptSchedule\nto a different frame count.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "CameraPoseVisualizer": {
    "input": {
      "required": {
        "pose_file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "base_xval": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "zval": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "use_exact_fx": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "relative_c2w": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "use_viewer": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "cameractrl_poses": [
          "CAMERACTRL_POSES",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_file_path",
        "base_xval",
        "zval",
        "scale",
        "use_exact_fx",
        "relative_c2w",
        "use_viewer"
      ],
      "optional": [
        "cameractrl_poses"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CameraPoseVisualizer",
    "display_name": "Camera Pose Visualizer",
    "description": "\nVisualizes the camera poses, from Animatediff-Evolved CameraCtrl Pose  \nor a .txt file with RealEstate camera intrinsics and coordinates, in a 3D plot. \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "AppendStringsToList": {
    "input": {
      "required": {
        "string1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "string2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string1",
        "string2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "AppendStringsToList",
    "display_name": "Append Strings To List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "JoinStrings": {
    "input": {
      "required": {
        "string1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "string2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": " ",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string1",
        "string2",
        "delimiter"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JoinStrings",
    "display_name": "Join Strings",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "JoinStringMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "string_1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "string_2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": " ",
            "multiline": false
          }
        ],
        "return_list": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "string_1",
        "string_2",
        "delimiter",
        "return_list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "JoinStringMulti",
    "display_name": "Join String Multi",
    "description": "\nCreates single string, or a list of strings, from  \nmultiple input strings.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "SomethingToString": {
    "input": {
      "required": {
        "input": [
          "*",
          {}
        ]
      },
      "optional": {
        "prefix": [
          "STRING",
          {
            "default": ""
          }
        ],
        "suffix": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ],
      "optional": [
        "prefix",
        "suffix"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "SomethingToString",
    "display_name": "Something To String",
    "description": "\nConverts any type to a string.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "Sleep": {
    "input": {
      "required": {
        "input": [
          "*",
          {}
        ],
        "minutes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1439
          }
        ],
        "seconds": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 59.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "minutes",
        "seconds"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "Sleep",
    "display_name": "Sleep",
    "description": "\nDelays the execution for the input amount of time.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "VRAM_Debug": {
    "input": {
      "required": {
        "empty_cache": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "gc_collect": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "unload_all_models": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "any_input": [
          "*",
          {}
        ],
        "image_pass": [
          "IMAGE"
        ],
        "model_pass": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "empty_cache",
        "gc_collect",
        "unload_all_models"
      ],
      "optional": [
        "any_input",
        "image_pass",
        "model_pass"
      ]
    },
    "output": [
      "*",
      "IMAGE",
      "MODEL",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "any_output",
      "image_pass",
      "model_pass",
      "freemem_before",
      "freemem_after"
    ],
    "name": "VRAM_Debug",
    "display_name": "VRAM Debug",
    "description": "\nReturns the inputs unchanged, they are only used as triggers,  \nand performs comfy model management functions and garbage collection,  \nreports free VRAM before and after the operations.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "EmptyLatentImagePresets": {
    "input": {
      "required": {
        "dimensions": [
          [
            "512 x 512 (1:1)",
            "768 x 512 (1.5:1)",
            "960 x 512 (1.875:1)",
            "1024 x 512 (2:1)",
            "1024 x 576 (1.778:1)",
            "1536 x 640 (2.4:1)",
            "1344 x 768 (1.75:1)",
            "1216 x 832 (1.46:1)",
            "1152 x 896 (1.286:1)",
            "1024 x 1024 (1:1)"
          ],
          {
            "default": "512 x 512 (1:1)"
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "invert",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "Latent",
      "Width",
      "Height"
    ],
    "name": "EmptyLatentImagePresets",
    "display_name": "Empty Latent Image Presets",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "EmptyLatentImageCustomPresets": {
    "input": {
      "required": {
        "dimensions": [
          []
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "invert",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "Latent",
      "Width",
      "Height"
    ],
    "name": "EmptyLatentImageCustomPresets",
    "display_name": "Empty Latent Image Custom Presets",
    "description": "\nGenerates an empty latent image with the specified dimensions.  \nThe choices are loaded from 'custom_dimensions.json' in the nodes folder.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "ModelPassThrough": {
    "input": {
      "required": {},
      "optional": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "ModelPassThrough",
    "display_name": "ModelPass",
    "description": "\n    Simply passes through the model,\n    workaround for Set node not allowing bypassed inputs.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "ModelSaveKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ],
        "model_key_prefix": [
          "STRING",
          {
            "default": "model.diffusion_model."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix",
        "model_key_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSaveKJ",
    "display_name": "Model Save KJ",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "SetShakkerLabsUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "canny",
            "tile",
            "depth",
            "blur",
            "pose",
            "gray",
            "low quality"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetShakkerLabsUnionControlNetType",
    "display_name": "Set Shakker Labs Union ControlNet Type",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "StyleModelApplyAdvanced": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApplyAdvanced",
    "display_name": "Style Model Apply Advanced",
    "description": "StyleModelApply but with strength parameter",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "NormalizedAmplitudeToMask": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_offset": [
          "INT",
          {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "location_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "location_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "size": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape": [
          [
            "none",
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "none"
          }
        ],
        "color": [
          [
            "white",
            "amplitude"
          ],
          {
            "default": "amplitude"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "width",
        "height",
        "frame_offset",
        "location_x",
        "location_y",
        "size",
        "shape",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "NormalizedAmplitudeToMask",
    "display_name": "NormalizedAmplitudeToMask",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates masks based on the normalized amplitude.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "NormalizedAmplitudeToFloatList": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "NormalizedAmplitudeToFloatList",
    "display_name": "NormalizedAmplitudeToFloatList",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates a list of floats from the normalized amplitude.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "OffsetMaskByNormalizedAmplitude": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "rotate": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "angle_multiplier": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.001,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "mask",
        "x",
        "y",
        "rotate",
        "angle_multiplier"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "OffsetMaskByNormalizedAmplitude",
    "display_name": "OffsetMaskByNormalizedAmplitude",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nOffsets masks based on the normalized amplitude.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "ImageTransformByNormalizedAmplitude": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "zoom_scale": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.001,
            "display": "number"
          }
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -16383,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -16383,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "cumulative": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "zoom_scale",
        "x_offset",
        "y_offset",
        "cumulative",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageTransformByNormalizedAmplitude",
    "display_name": "ImageTransformByNormalizedAmplitude",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nTransforms image based on the normalized amplitude.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "AudioConcatenate": {
    "input": {
      "required": {
        "audio1": [
          "AUDIO"
        ],
        "audio2": [
          "AUDIO"
        ],
        "direction": [
          [
            "right",
            "left"
          ],
          {
            "default": "right"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio1",
        "audio2",
        "direction"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "AudioConcatenate",
    "display_name": "AudioConcatenate",
    "description": "\nConcatenates the audio1 to audio2 in the specified direction.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "SplineEditor": {
    "input": {
      "required": {
        "points_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "mask_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "mask_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "points_to_sample": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "sampling_method": [
          [
            "path",
            "time",
            "controlpoints"
          ],
          {
            "default": "time"
          }
        ],
        "interpolation": [
          [
            "cardinal",
            "monotone",
            "basis",
            "linear",
            "step-before",
            "step-after",
            "polar",
            "polar-reverse"
          ],
          {
            "default": "cardinal"
          }
        ],
        "tension": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "repeat_output": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "float_output_type": [
          [
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "list"
          }
        ]
      },
      "optional": {
        "min_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10000.0,
            "max": 10000.0,
            "step": 0.01
          }
        ],
        "max_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10000.0,
            "max": 10000.0,
            "step": 0.01
          }
        ],
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "points_store",
        "coordinates",
        "mask_width",
        "mask_height",
        "points_to_sample",
        "sampling_method",
        "interpolation",
        "tension",
        "repeat_output",
        "float_output_type"
      ],
      "optional": [
        "min_value",
        "max_value",
        "bg_image"
      ]
    },
    "output": [
      "MASK",
      "STRING",
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "mask",
      "coord_str",
      "float",
      "count",
      "normalized_str"
    ],
    "name": "SplineEditor",
    "display_name": "Spline Editor",
    "description": "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create values for various   \n## schedules and/or mask batches.  \n\n**Shift + click** to add control point at end.\n**Ctrl + click** to add control point (subdivide) between two points.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end.  \n  \nRight click on canvas for context menu:  \nThese are purely visual options, doesn't affect the output:  \n - Toggle handles visibility\n - Display sample points: display the points to be returned.  \n\n**points_to_sample** value sets the number of samples  \nreturned from the **drawn spline itself**, this is independent from the  \nactual control points, so the interpolation type matters.  \nsampling_method: \n - time: samples along the time axis, used for schedules  \n - path: samples along the path itself, useful for coordinates  \n\noutput types:\n - mask batch  \n        example compatible nodes: anything that takes masks  \n - list of floats\n        example compatible nodes: IPAdapter weights  \n - pandas series\n        example compatible nodes: anything that takes Fizz'  \n        nodes Batch Value Schedule  \n - torch tensor  \n        example compatible nodes: unknown\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "CreateShapeImageOnPath": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "bg_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ],
        "trailing": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "coordinates",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height",
        "shape_color",
        "bg_color",
        "blur_radius",
        "intensity"
      ],
      "optional": [
        "size_multiplier",
        "trailing"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "CreateShapeImageOnPath",
    "display_name": "Create Shape Image On Path",
    "description": "\nCreates an image or batch of images with the specified shape.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CreateShapeMaskOnPath": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "coordinates",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateShapeMaskOnPath",
    "display_name": "Create Shape Mask On Path",
    "description": "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateTextOnPath": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "default": "text",
            "multiline": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 42
          }
        ],
        "alignment": [
          [
            "left",
            "center",
            "right"
          ],
          {
            "default": "center"
          }
        ],
        "text_color": [
          "STRING",
          {
            "default": "white"
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "text",
        "frame_width",
        "frame_height",
        "font",
        "font_size",
        "alignment",
        "text_color"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mask_inverted"
    ],
    "name": "CreateTextOnPath",
    "display_name": "Create Text On Path",
    "description": "\nCreates a mask or batch of masks with the specified text.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateGradientFromCoords": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "start_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "end_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "frame_width",
        "frame_height",
        "start_color",
        "end_color",
        "multiplier"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "CreateGradientFromCoords",
    "display_name": "Create Gradient From Coords",
    "description": "\nCreates a gradient image from coordinates.    \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CutAndDragOnPath": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mask": [
          "MASK"
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "inpaint": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "coordinates",
        "mask",
        "frame_width",
        "frame_height",
        "inpaint"
      ],
      "optional": [
        "bg_image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "CutAndDragOnPath",
    "display_name": "Cut And Drag On Path",
    "description": "\nCuts the masked area from the image, and drags it along the path. If inpaint is enabled, and no bg_image is provided, the cut area is filled using cv2 TELEA algorithm.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GradientToFloat": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "steps"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "float_x",
      "float_y"
    ],
    "name": "GradientToFloat",
    "display_name": "Gradient To Float",
    "description": "\nCalculates list of floats from image.    \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "WeightScheduleExtend": {
    "input": {
      "required": {
        "input_values_1": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ],
        "input_values_2": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ],
        "output_type": [
          [
            "match_input",
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "match_input"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values_1",
        "input_values_2",
        "output_type"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "WeightScheduleExtend",
    "display_name": "Weight Schedule Extend",
    "description": "\nExtends, and converts if needed, different value lists/series  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "MaskOrImageToWeight": {
    "input": {
      "required": {
        "output_type": [
          [
            "list",
            "pandas series",
            "tensor",
            "string"
          ],
          {
            "default": "list"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "output_type"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "STRING"
    ],
    "name": "MaskOrImageToWeight",
    "display_name": "Mask Or Image To Weight",
    "description": "\nGets the mean values from mask or image batch  \nand returns that as the selected output type.   \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "WeightScheduleConvert": {
    "input": {
      "required": {
        "input_values": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ],
        "output_type": [
          [
            "match_input",
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "list"
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ]
      },
      "optional": {
        "remap_to_frames": [
          "INT",
          {
            "default": 0
          }
        ],
        "interpolation_curve": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "remap_values": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "remap_min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -100000,
            "max": 100000.0,
            "step": 0.01
          }
        ],
        "remap_max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100000,
            "max": 100000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values",
        "output_type",
        "invert",
        "repeat"
      ],
      "optional": [
        "remap_to_frames",
        "interpolation_curve",
        "remap_values",
        "remap_min",
        "remap_max"
      ]
    },
    "output": [
      "FLOAT",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "STRING",
      "INT"
    ],
    "name": "WeightScheduleConvert",
    "display_name": "Weight Schedule Convert",
    "description": "\nConverts different value lists/series to another type.  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "FloatToMask": {
    "input": {
      "required": {
        "input_values": [
          "FLOAT",
          {
            "forceInput": true,
            "default": 0
          }
        ],
        "width": [
          "INT",
          {
            "default": 100,
            "min": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 100,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "FloatToMask",
    "display_name": "Float To Mask",
    "description": "\nGenerates a batch of masks based on the input float values.\nThe batch size is determined by the length of the input float values.\nEach mask is generated with the specified width and height.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "FloatToSigmas": {
    "input": {
      "required": {
        "float_list": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float_list"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FloatToSigmas",
    "display_name": "Float To Sigmas",
    "description": "\nCreates a sigmas tensor from list of float values.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "SigmasToFloat": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "float"
    ],
    "name": "SigmasToFloat",
    "display_name": "Sigmas To Float",
    "description": "\nCreates a float list from sigmas tensors.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "PlotCoordinates": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "default": "title",
            "multiline": false
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "bbox_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "bbox_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "text",
        "width",
        "height",
        "bbox_width",
        "bbox_height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "images",
      "width",
      "height",
      "bbox_width",
      "bbox_height"
    ],
    "name": "PlotCoordinates",
    "display_name": "Plot Coordinates",
    "description": "\nPlots coordinates to sequence of images using Matplotlib.  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "InterpolateCoords": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "interpolation_curve": [
          "FLOAT",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "interpolation_curve"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "coordinates"
    ],
    "name": "InterpolateCoords",
    "display_name": "Interpolate Coords",
    "description": "\nInterpolates coordinates based on a curve.   \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "PointsEditor": {
    "input": {
      "required": {
        "points_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "neg_coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bbox_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bboxes": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bbox_format": [
          [
            "xyxy",
            "xywh"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "points_store",
        "coordinates",
        "neg_coordinates",
        "bbox_store",
        "bboxes",
        "bbox_format",
        "width",
        "height",
        "normalize"
      ],
      "optional": [
        "bg_image"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "BBOX",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "positive_coords",
      "negative_coords",
      "bbox",
      "bbox_mask",
      "cropped_image"
    ],
    "name": "PointsEditor",
    "display_name": "Points Editor",
    "description": "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create coordinates\n\n**Shift + click** to add a positive (green) point.\n**Shift + right click** to add a negative (red) point.\n**Ctrl + click** to draw a box.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end of the points array.  \n  \nTo add an image select the node and copy/paste or drag in the image.  \nOr from the bg_image input on queue (first frame of the batch).  \n\n**THE IMAGE IS SAVED TO THE NODE AND WORKFLOW METADATA**  \nyou can clear the image from the context menu by right clicking on the canvas  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "StabilityAPI_SD3": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "n_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 4294967294,
            "step": 1
          }
        ],
        "model": [
          [
            "sd3",
            "sd3-turbo"
          ],
          {
            "default": "sd3"
          }
        ],
        "aspect_ratio": [
          [
            "1:1",
            "16:9",
            "21:9",
            "2:3",
            "3:2",
            "4:5",
            "5:4",
            "9:16",
            "9:21"
          ],
          {
            "default": "1:1"
          }
        ],
        "output_format": [
          [
            "png",
            "jpeg"
          ],
          {
            "default": "jpeg"
          }
        ]
      },
      "optional": {
        "api_key": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "image": [
          "IMAGE"
        ],
        "img2img_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "disable_metadata": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "n_prompt",
        "seed",
        "model",
        "aspect_ratio",
        "output_format"
      ],
      "optional": [
        "api_key",
        "image",
        "img2img_strength",
        "disable_metadata"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "StabilityAPI_SD3",
    "display_name": "Stability API SD3",
    "description": "\n## Calls StabilityAI API\n   \nAlthough you may have multiple keys in your account,  \nyou should use the same key for all requests to this API.  \n\nGet your API key here: https://platform.stability.ai/account/keys  \nRecommended to set the key in the config.json -file under this  \nnode packs folder.  \n# WARNING:  \nOtherwise the API key may get saved in the image metadata even  \nwith \"disable_metadata\" on if the workflow includes save nodes  \nseparate from this node.  \n   \nsd3 requires 6.5 credits per generation  \nsd3-turbo requires 4 credits per generation  \n\nIf no image is provided, mode is set to text-to-image  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "SoundReactive": {
    "input": {
      "required": {
        "sound_level": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 99999,
            "step": 0.01
          }
        ],
        "start_range_hz": [
          "INT",
          {
            "default": 150,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "end_range_hz": [
          "INT",
          {
            "default": 2000,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 99999,
            "step": 0.01
          }
        ],
        "smoothing_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sound_level",
        "start_range_hz",
        "end_range_hz",
        "multiplier",
        "smoothing_factor",
        "normalize"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "sound_level",
      "sound_level_int"
    ],
    "name": "SoundReactive",
    "display_name": "Sound Reactive",
    "description": "\nReacts to the sound level of the input.  \nUses your browsers sound input options and requires.  \nMeant to be used with realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "StableZero123_BatchSchedule": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "azimuth_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
            "multiline": true
          }
        ],
        "elevation_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(0.0),\n15:(0.0)\n",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "interpolation",
        "azimuth_points_string",
        "elevation_points_string"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_BatchSchedule",
    "display_name": "Stable Zero123 Batch Schedule",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "SV3D_BatchSchedule": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "azimuth_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n9:(180.0),\n20:(360.0)\n",
            "multiline": true
          }
        ],
        "elevation_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n9:(0.0),\n20:(0.0)\n",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "interpolation",
        "azimuth_points_string",
        "elevation_points_string"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_BatchSchedule",
    "display_name": "SV3D Batch Schedule",
    "description": "\nAllow scheduling of the azimuth and elevation conditions for SV3D.  \nNote that SV3D is still a video model and the schedule needs to always go forward  \nhttps://huggingface.co/stabilityai/sv3d\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "LoadResAdapterNormalization": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "resadapter_path": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "resadapter_path"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LoadResAdapterNormalization",
    "display_name": "LoadResAdapterNormalization",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "Superprompt": {
    "input": {
      "required": {
        "instruction_prompt": [
          "STRING",
          {
            "default": "Expand the following prompt to add more detail",
            "multiline": true
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "max_new_tokens": [
          "INT",
          {
            "default": 128,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "instruction_prompt",
        "prompt",
        "max_new_tokens"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Superprompt",
    "display_name": "Superprompt",
    "description": "\n# SuperPrompt\nA T5 model fine-tuned on the SuperPrompt dataset for  \nupsampling text prompts to more detailed descriptions.  \nMeant to be used as a pre-generation step for text-to-image  \nmodels that benefit from more detailed prompts.  \nhttps://huggingface.co/roborovski/superprompt-v1\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "GLIGENTextBoxApplyBatchCoords": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "latents": [
          "LATENT"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "latents",
        "clip",
        "gligen_textbox_model",
        "coordinates",
        "text",
        "width",
        "height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "CONDITIONING",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "conditioning",
      "coord_preview"
    ],
    "name": "GLIGENTextBoxApplyBatchCoords",
    "display_name": "GLIGENTextBoxApplyBatchCoords",
    "description": "\nThis node allows scheduling GLIGEN text box positions in a batch,  \nto be used with AnimateDiff-Evolved. Intended to pair with the  \nSpline Editor -node.  \n\nGLIGEN model can be downloaded through the Manage's \"Install Models\" menu.  \nOr directly from here:  \nhttps://huggingface.co/comfyanonymous/GLIGEN_pruned_safetensors/tree/main  \n  \nInputs:  \n- **latents** input is used to calculate batch size  \n- **clip** is your standard text encoder, use same as for the main prompt  \n- **gligen_textbox_model** connects to GLIGEN Loader  \n- **coordinates** takes a json string of points, directly compatible  \nwith the spline editor node.\n- **text** is the part of the prompt to set position for  \n- **width** and **height** are the size of the GLIGEN bounding box  \n  \nOutputs:\n- **conditioning** goes between to clip text encode and the sampler  \n- **coord_preview** is an optional preview of the coordinates and  \nbounding boxes.\n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "Intrinsic_lora_sampling": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          [
            "intrinsic_lora_sd15_albedo.safetensors",
            "intrinsic_lora_sd15_depth.safetensors",
            "intrinsic_lora_sd15_normal.safetensors",
            "intrinsic_lora_sd15_shading.safetensors",
            "intrinsic_loras.txt"
          ]
        ],
        "task": [
          [
            "depth map",
            "surface normals",
            "albedo",
            "shading"
          ],
          {
            "default": "depth map"
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "optional_latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "task",
        "text",
        "clip",
        "vae",
        "per_batch"
      ],
      "optional": [
        "image",
        "optional_latent"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "LATENT"
    ],
    "name": "Intrinsic_lora_sampling",
    "display_name": "Intrinsic Lora Sampling",
    "description": "\nSampler to use the intrinsic loras:  \nhttps://github.com/duxiaodan/intrinsic-lora  \nThese LoRAs are tiny and thus included  \nwith this node pack.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes",
    "output_node": false
  },
  "CheckpointPerturbWeights": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "joint_blocks": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "final_layer": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "rest_of_the_blocks": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "joint_blocks",
        "final_layer",
        "rest_of_the_blocks",
        "seed"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "CheckpointPerturbWeights",
    "display_name": "CheckpointPerturbWeights",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": true
  },
  "Screencap_mss": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "delay": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "num_frames",
        "delay"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Screencap_mss",
    "display_name": "Screencap mss",
    "description": "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "WebcamCaptureCV2": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "cam_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "release": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "cam_index",
        "release"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "WebcamCaptureCV2",
    "display_name": "Webcam Capture CV2",
    "description": "\nCaptures a frame from a webcam using CV2.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "DifferentialDiffusionAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "samples",
        "mask",
        "multiplier"
      ]
    },
    "output": [
      "MODEL",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "LATENT"
    ],
    "name": "DifferentialDiffusionAdvanced",
    "display_name": "Differential Diffusion Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "_for_testing",
    "output_node": false
  },
  "FluxBlockLoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ]
      },
      "optional": {
        "lora_name": [
          [
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "opt_lora_path": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "Absolute path of the LoRA."
          }
        ],
        "blocks": [
          "SELECTEDBLOCKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "strength_model"
      ],
      "optional": [
        "lora_name",
        "opt_lora_path",
        "blocks"
      ]
    },
    "output": [
      "MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "rank"
    ],
    "name": "FluxBlockLoraLoader",
    "display_name": "Flux Block Lora Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "possible rank of the LoRA."
    ]
  },
  "FluxBlockLoraSelect": {
    "input": {
      "required": {
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37."
      ]
    },
    "output": [
      "SELECTEDBLOCKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "blocks"
    ],
    "name": "FluxBlockLoraSelect",
    "display_name": "Flux Block Lora Select",
    "description": "Select individual block alpha values, value of 0 removes the block altogether",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model."
    ]
  },
  "CustomControlNetWeightsFluxFromList": {
    "input": {
      "required": {
        "list_of_floats": [
          "FLOAT",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ],
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "list_of_floats"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras",
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "CustomControlNetWeightsFluxFromList",
    "display_name": "Custom ControlNet Weights Flux From List",
    "description": "Creates controlnet weights from a list of floats for Advanced-ControlNet",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/controlnet",
    "output_node": false
  },
  "CheckpointLoaderKJ": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ],
        "patch_cublaslinear": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable or disable the patching, won't take effect on already loaded models!"
          }
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda"
          ],
          {
            "default": false,
            "tooltip": "Patch comfy attention to use sageattn."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "patch_cublaslinear",
        "sage_attention"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderKJ",
    "display_name": "CheckpointLoaderKJ",
    "description": "Experimental node for patching torch.nn.Linear with CublasLinear.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": true,
    "experimental": true
  },
  "DiffusionModelLoaderKJ": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "FLUX1/flux1-dev-fp8.safetensors",
            "flux1-dev-fp8.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ]
        ],
        "patch_cublaslinear": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable or disable the patching, won't take effect on already loaded models!"
          }
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda"
          ],
          {
            "default": false,
            "tooltip": "Patch comfy attention to use sageattn."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "weight_dtype",
        "patch_cublaslinear",
        "sage_attention"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "DiffusionModelLoaderKJ",
    "display_name": "Diffusion Model Loader KJ",
    "description": "Node for patching torch.nn.Linear with CublasLinear.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": true,
    "experimental": true
  },
  "TorchCompileModelFluxAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "double_blocks": [
          "STRING",
          {
            "default": "0-18",
            "multiline": true
          }
        ],
        "single_blocks": [
          "STRING",
          {
            "default": "0-37",
            "multiline": true
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "double_blocks",
        "single_blocks",
        "dynamic"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelFluxAdvanced",
    "display_name": "TorchCompileModelFluxAdvanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileModelHyVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_single_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile single blocks"
          }
        ],
        "compile_double_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile double blocks"
          }
        ],
        "compile_txt_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile txt_in layers"
          }
        ],
        "compile_vector_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile vector_in layers"
          }
        ],
        "compile_final_layer": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile final layer"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_single_blocks",
        "compile_double_blocks",
        "compile_txt_in",
        "compile_vector_in",
        "compile_final_layer"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelHyVideo",
    "display_name": "TorchCompileModelHyVideo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileVAE": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "compile_encoder": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile encoder"
          }
        ],
        "compile_decoder": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile decoder"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "backend",
        "fullgraph",
        "mode",
        "compile_encoder",
        "compile_decoder"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "TorchCompileVAE",
    "display_name": "TorchCompileVAE",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileControlNet": {
    "input": {
      "required": {
        "controlnet": [
          "CONTROL_NET"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "controlnet",
        "backend",
        "fullgraph",
        "mode"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "TorchCompileControlNet",
    "display_name": "TorchCompileControlNet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "PatchModelPatcherOrder": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "patch_order": [
          [
            "object_patch_first",
            "weight_patch_first"
          ],
          {
            "default": "weight_patch_first",
            "tooltip": "Patch the comfy patch_model function to load weight patches (LoRAs) before compiling the model"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "patch_order"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelPatcherOrder",
    "display_name": "Patch Model Patcher Order",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileLTXModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileLTXModel",
    "display_name": "TorchCompileLTXModel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileCosmosModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "tooltip": "Set the dynamo cache size limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileCosmosModel",
    "display_name": "TorchCompileCosmosModel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "PathchSageAttentionKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda"
          ],
          {
            "default": false,
            "tooltip": "Global patch comfy attention to use sageattn, once patched to revert back to normal you would need to run this node again with disabled option."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sage_attention"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PathchSageAttentionKJ",
    "display_name": "Pathch Sage Attention KJ",
    "description": "Experimental node for patching attention mode. This doesn't use the model patching system and thus can't be disabled without running the node again with 'disabled' option.",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "LeapfusionHunyuanI2VPatcher": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 1000,
            "step": 1,
            "tooltip": "The index of the latent to be replaced. 0 for first frame and -1 for last"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The start percentage of steps to apply"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The end percentage of steps to apply"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "index",
        "start_percent",
        "end_percent",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LeapfusionHunyuanI2VPatcher",
    "display_name": "Leapfusion Hunyuan I2V Patcher",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "CreateInstanceDiffusionTracking": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "bbox_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "bbox_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "class_name": [
          "STRING",
          {
            "default": "class_name"
          }
        ],
        "class_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": "prompt",
            "multiline": true
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ],
        "fit_in_frame": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "width",
        "height",
        "bbox_width",
        "bbox_height",
        "class_name",
        "class_id",
        "prompt"
      ],
      "optional": [
        "size_multiplier",
        "fit_in_frame"
      ]
    },
    "output": [
      "TRACKING",
      "STRING",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt",
      "width",
      "height",
      "bbox_width",
      "bbox_height"
    ],
    "name": "CreateInstanceDiffusionTracking",
    "display_name": "CreateInstanceDiffusionTracking",
    "description": "\nCreates tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n  \nInstanceDiffusion prompt format:  \n\"class_id.class_name\": \"prompt\",  \nfor example:  \n\"1.head\": \"((head))\",  \n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "AppendInstanceDiffusionTracking": {
    "input": {
      "required": {
        "tracking_1": [
          "TRACKING",
          {
            "forceInput": true
          }
        ],
        "tracking_2": [
          "TRACKING",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "prompt_1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "prompt_2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tracking_1",
        "tracking_2"
      ],
      "optional": [
        "prompt_1",
        "prompt_2"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "AppendInstanceDiffusionTracking",
    "display_name": "AppendInstanceDiffusionTracking",
    "description": "\nAppends tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "DrawInstanceDiffusionTracking": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "tracking": [
          "TRACKING",
          {
            "forceInput": true
          }
        ],
        "box_line_width": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "draw_text": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 20
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "tracking",
        "box_line_width",
        "draw_text",
        "font",
        "font_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "DrawInstanceDiffusionTracking",
    "display_name": "DrawInstanceDiffusionTracking",
    "description": "\nDraws the tracking data from  \nCreateInstanceDiffusionTracking -node.\n\n",
    "python_module": "custom_nodes.ComfyUI-KJNodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "WD14Tagger|pysssss": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          [
            "wd-eva02-large-tagger-v3",
            "wd-vit-tagger-v3",
            "wd-swinv2-tagger-v3",
            "wd-convnext-tagger-v3",
            "wd-v1-4-moat-tagger-v2",
            "wd-v1-4-convnextv2-tagger-v2",
            "wd-v1-4-convnext-tagger-v2",
            "wd-v1-4-convnext-tagger",
            "wd-v1-4-vit-tagger-v2",
            "wd-v1-4-swinv2-tagger-v2",
            "wd-v1-4-vit-tagger",
            "Z3D-E621-Convnext"
          ],
          {
            "default": "wd-v1-4-moat-tagger-v2"
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "character_threshold": [
          "FLOAT",
          {
            "default": 0.85,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "replace_underscore": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "trailing_comma": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "exclude_tags": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "threshold",
        "character_threshold",
        "replace_underscore",
        "trailing_comma",
        "exclude_tags"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "STRING"
    ],
    "name": "WD14Tagger|pysssss",
    "display_name": "WD14 Tagger \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WD14-Tagger",
    "category": "image",
    "output_node": true
  },
  "BNK_CLIPTextEncodeAdvanced": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "clip": [
          "CLIP"
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip",
        "token_normalization",
        "weight_interpretation"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "BNK_CLIPTextEncodeAdvanced",
    "display_name": "CLIP Text Encode (Advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ADV_CLIP_emb",
    "category": "conditioning/advanced",
    "output_node": false
  },
  "BNK_CLIPTextEncodeSDXLAdvanced": {
    "input": {
      "required": {
        "text_l": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "text_g": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "clip": [
          "CLIP"
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "balance": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_l",
        "text_g",
        "clip",
        "token_normalization",
        "weight_interpretation",
        "balance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "BNK_CLIPTextEncodeSDXLAdvanced",
    "display_name": "CLIP Text Encode SDXL (Advanced)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ADV_CLIP_emb",
    "category": "conditioning/advanced",
    "output_node": false
  },
  "BNK_AddCLIPSDXLParams": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "BNK_AddCLIPSDXLParams",
    "display_name": "Add CLIP SDXL Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ADV_CLIP_emb",
    "category": "conditioning/advanced",
    "output_node": false
  },
  "BNK_AddCLIPSDXLRParams": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "ascore": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "ascore"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "BNK_AddCLIPSDXLRParams",
    "display_name": "Add CLIP SDXL Refiner Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_ADV_CLIP_emb",
    "category": "conditioning/advanced",
    "output_node": false
  },
  "LineartStandardPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "guassian_sigma": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "intensity_threshold": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "guassian_sigma",
        "intensity_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineartStandardPreprocessor",
    "display_name": "Standard Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AnimeFace_SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "remove_background_using_abg": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 512,
            "max": 512,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "remove_background_using_abg",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "ABG_CHARACTER_MASK (MASK)"
    ],
    "name": "AnimeFace_SemSegPreprocessor",
    "display_name": "Anime Face Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "Unimatch_OptFlowPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "ckpt_name": [
          [
            "gmflow-scale1-mixdata.pth",
            "gmflow-scale2-mixdata.pth",
            "gmflow-scale2-regrefine6-mixdata.pth"
          ],
          {
            "default": "gmflow-scale2-regrefine6-mixdata.pth"
          }
        ],
        "backward_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bidirectional_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "ckpt_name",
        "backward_flow",
        "bidirectional_flow"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "Unimatch_OptFlowPreprocessor",
    "display_name": "Unimatch Optical Flow",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "MaskOptFlow": {
    "input": {
      "required": {
        "optical_flow": [
          "OPTICAL_FLOW"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "optical_flow",
        "mask"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "MaskOptFlow",
    "display_name": "Mask Optical Flow (DragNUWA)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "DepthAnythingV2Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_v2_vitg.pth",
            "depth_anything_v2_vitl.pth",
            "depth_anything_v2_vitb.pth",
            "depth_anything_v2_vits.pth"
          ],
          {
            "default": "depth_anything_v2_vitl.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingV2Preprocessor",
    "display_name": "Depth Anything V2 - Relative",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MeshGraphormer-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "detect_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "presence_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "mask_bbox_padding",
        "resolution",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "detect_thr",
        "presence_thr"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ]
      },
      "optional": {
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "drop_size": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "bbox_detector"
      ],
      "optional": [
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "drop_size",
        "mask_bbox_padding",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner With External Detector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "ScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ScribblePreprocessor",
    "display_name": "Scribble Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_XDoG_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "threshold": [
          "INT",
          {
            "default": 32,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_XDoG_Preprocessor",
    "display_name": "Scribble XDoG Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_PiDiNet_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ]
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_PiDiNet_Preprocessor",
    "display_name": "Scribble PiDiNet Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DiffusionEdge_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "urban",
            "natrual"
          ],
          {
            "default": "indoor"
          }
        ],
        "patch_batch_size": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "patch_batch_size",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DiffusionEdge_Preprocessor",
    "display_name": "Diffusion Edge (batch size \u2191 => speed \u2191, VRAM \u2191)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "BAE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BAE-NormalMapPreprocessor",
    "display_name": "BAE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "PyraCannyPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PyraCannyPreprocessor",
    "display_name": "PyraCanny",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ImageLuminanceDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageLuminanceDetector",
    "display_name": "Image Luminance",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "ImageIntensityDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageIntensityDetector",
    "display_name": "Image Intensity",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "UniFormer-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UniFormer-SemSegPreprocessor",
    "display_name": "UniFormer Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SemSegPreprocessor",
    "display_name": "Semantic Segmentor (legacy, alias for UniFormer)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "M-LSDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "score_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "dist_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "score_threshold",
        "dist_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "M-LSDPreprocessor",
    "display_name": "M-LSD Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "MediaPipe-FaceMeshPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "max_faces": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "min_confidence": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "max_faces",
        "min_confidence",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MediaPipe-FaceMeshPreprocessor",
    "display_name": "MediaPipe Face Mesh",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "TilePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "pyrUp_iters": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "pyrUp_iters",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TilePreprocessor",
    "display_name": "Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileGF_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "eps": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.001,
            "max": 0.1,
            "step": 0.001
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength",
        "radius",
        "eps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileGF_Preprocessor",
    "display_name": "TTPlanet Tile GuidedFilter",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileSimple_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileSimple_Preprocessor",
    "display_name": "TTPlanet Tile Simple",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "SAMPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SAMPreprocessor",
    "display_name": "SAM Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "InpaintPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "optional": {
        "black_pixel_for_xinsir_cn": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ],
      "optional": [
        "black_pixel_for_xinsir_cn"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "InpaintPreprocessor",
    "display_name": "Inpaint Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "DWPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.onnx"
          }
        ],
        "pose_estimator": [
          [
            "dw-ll_ucoco_384_bs5.torchscript.pt",
            "dw-ll_ucoco_384.onnx",
            "dw-ll_ucoco.onnx"
          ],
          {
            "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "bbox_detector",
        "pose_estimator",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "DWPreprocessor",
    "display_name": "DWPose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "AnimalPosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.torchscript.pt"
          }
        ],
        "pose_estimator": [
          [
            "rtmpose-m_ap10k_256_bs5.torchscript.pt",
            "rtmpose-m_ap10k_256.onnx"
          ],
          {
            "default": "rtmpose-m_ap10k_256_bs5.torchscript.pt"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bbox_detector",
        "pose_estimator",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "AnimalPosePreprocessor",
    "display_name": "AnimalPose Estimator (AP10K)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "HEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HEDPreprocessor",
    "display_name": "HED Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "FakeScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FakeScribblePreprocessor",
    "display_name": "Fake Scribble Lines (aka scribble_hed)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AnyLineArtPreprocessor_aux": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "merge_with_lineart": [
          [
            "lineart_standard",
            "lineart_realisitic",
            "lineart_anime",
            "manga_line"
          ],
          {
            "default": "lineart_standard"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 1280,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "lineart_lower_bound": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "lineart_upper_bound": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "object_min_size": [
          "INT",
          {
            "default": 36,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "object_connectivity": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "merge_with_lineart",
        "resolution",
        "lineart_lower_bound",
        "lineart_upper_bound",
        "object_min_size",
        "object_connectivity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "AnyLineArtPreprocessor_aux",
    "display_name": "AnyLine Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Zoe-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe-DepthMapPreprocessor",
    "display_name": "Zoe Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "LeReS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "rm_nearest": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "rm_background": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "boost": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "rm_nearest",
        "rm_background",
        "boost",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LeReS-DepthMapPreprocessor",
    "display_name": "LeReS Depth Map (enable boost for leres++)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "OneFormer-COCO-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-COCO-SemSegPreprocessor",
    "display_name": "OneFormer COCO Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "OneFormer-ADE20K-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-ADE20K-SemSegPreprocessor",
    "display_name": "OneFormer ADE20K Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "PiDiNetPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PiDiNetPreprocessor",
    "display_name": "PiDiNet Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_vitl14.pth",
            "depth_anything_vitb14.pth",
            "depth_anything_vits14.pth"
          ],
          {
            "default": "depth_anything_vitl14.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingPreprocessor",
    "display_name": "Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Zoe_DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "outdoor"
          ],
          {
            "default": "indoor"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe_DepthAnythingPreprocessor",
    "display_name": "Zoe Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "ColorPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ColorPreprocessor",
    "display_name": "Color Pallete",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "BinaryPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bin_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bin_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BinaryPreprocessor",
    "display_name": "Binary Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ShufflePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ShufflePreprocessor",
    "display_name": "Content Shuffle",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "MiDaS-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-NormalMapPreprocessor",
    "display_name": "MiDaS Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MiDaS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-DepthMapPreprocessor",
    "display_name": "MiDaS Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DSINE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "fov": [
          "FLOAT",
          {
            "default": 60.0,
            "min": 0,
            "max": 365.0,
            "step": 0.01
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "fov",
        "iterations",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DSINE-NormalMapPreprocessor",
    "display_name": "DSINE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "LineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "coarse": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "coarse",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineArtPreprocessor",
    "display_name": "Realistic Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Manga2Anime_LineArt_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Manga2Anime_LineArt_Preprocessor",
    "display_name": "Manga Lineart (aka lineart_anime_denoise)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AnimeLineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AnimeLineArtPreprocessor",
    "display_name": "Anime Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "OpenposePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "OpenposePreprocessor",
    "display_name": "OpenPose Pose",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "TEEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe_steps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe_steps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TEEDPreprocessor",
    "display_name": "TEEDPreprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Metric3D-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-DepthMapPreprocessor",
    "display_name": "Metric3D Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Metric3D-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-NormalMapPreprocessor",
    "display_name": "Metric3D Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DensePosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "model": [
          [
            "densepose_r50_fpn_dl.torchscript",
            "densepose_r101_fpn_dl.torchscript"
          ],
          {
            "default": "densepose_r50_fpn_dl.torchscript"
          }
        ],
        "cmap": [
          [
            "Viridis (MagicAnimate)",
            "Parula (CivitAI)"
          ],
          {
            "default": "Viridis (MagicAnimate)"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "model",
        "cmap",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DensePosePreprocessor",
    "display_name": "DensePose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "SavePoseKpsAsJsonFile": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "PoseKeypoint"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SavePoseKpsAsJsonFile",
    "display_name": "Save Pose Keypoints",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": true
  },
  "FacialPartColoringFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "mode": [
          [
            "point",
            "polygon"
          ],
          {
            "default": "polygon"
          }
        ],
        "skin": [
          "STRING",
          {
            "default": "rgb(0, 153, 255)",
            "multiline": false
          }
        ],
        "left_eye": [
          "STRING",
          {
            "default": "rgb(0, 204, 153)",
            "multiline": false
          }
        ],
        "right_eye": [
          "STRING",
          {
            "default": "rgb(255, 153, 0)",
            "multiline": false
          }
        ],
        "nose": [
          "STRING",
          {
            "default": "rgb(255, 102, 255)",
            "multiline": false
          }
        ],
        "upper_lip": [
          "STRING",
          {
            "default": "rgb(102, 0, 51)",
            "multiline": false
          }
        ],
        "inner_mouth": [
          "STRING",
          {
            "default": "rgb(255, 204, 255)",
            "multiline": false
          }
        ],
        "lower_lip": [
          "STRING",
          {
            "default": "rgb(255, 0, 102)",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "mode",
        "skin",
        "left_eye",
        "right_eye",
        "nose",
        "upper_lip",
        "inner_mouth",
        "lower_lip"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FacialPartColoringFromPoseKps",
    "display_name": "Colorize Facial Parts from PoseKPS",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "UpperBodyTrackingFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "id_include": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Head_width_height": [
          "STRING",
          {
            "default": "256, 256",
            "multiline": false
          }
        ],
        "Neck_width_height": [
          "STRING",
          {
            "default": "100, 100",
            "multiline": false
          }
        ],
        "Shoulder_width_height": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Torso_width_height": [
          "STRING",
          {
            "default": "350, 450",
            "multiline": false
          }
        ],
        "RArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "RForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "id_include",
        "Head_width_height",
        "Neck_width_height",
        "Shoulder_width_height",
        "Torso_width_height",
        "RArm_width_height",
        "RForearm_width_height",
        "LArm_width_height",
        "LForearm_width_height"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "UpperBodyTrackingFromPoseKps",
    "display_name": "Upper Body Tracking From PoseKps (InstanceDiffusion)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderPeopleKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ],
        "render_body": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_hand": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_face": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "kps",
        "render_body",
        "render_hand",
        "render_face"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderPeopleKps",
    "display_name": "Render Pose JSON (Human)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderAnimalKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ]
      }
    },
    "input_order": {
      "required": [
        "kps"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderAnimalKps",
    "display_name": "Render Pose JSON (Animal)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "CannyEdgePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CannyEdgePreprocessor",
    "display_name": "Canny Edge",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AIO_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "preprocessor": [
          [
            "none",
            "LineartStandardPreprocessor",
            "AnimeFace_SemSegPreprocessor",
            "DepthAnythingV2Preprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "BAE-NormalMapPreprocessor",
            "PyraCannyPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "M-LSDPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "SAMPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "AnyLineArtPreprocessor_aux",
            "Zoe-DepthMapPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "PiDiNetPreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "ColorPreprocessor",
            "BinaryPreprocessor",
            "ShufflePreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "DSINE-NormalMapPreprocessor",
            "LineArtPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "AnimeLineArtPreprocessor",
            "OpenposePreprocessor",
            "TEEDPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "DensePosePreprocessor",
            "CannyEdgePreprocessor"
          ],
          {
            "default": "none"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "preprocessor",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AIO_Preprocessor",
    "display_name": "AIO Aux Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetPreprocessorSelector": {
    "input": {
      "required": {
        "preprocessor": [
          [
            "none",
            "LineartStandardPreprocessor",
            "AnimeFace_SemSegPreprocessor",
            "DepthAnythingV2Preprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "BAE-NormalMapPreprocessor",
            "PyraCannyPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "M-LSDPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "SAMPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "AnyLineArtPreprocessor_aux",
            "Zoe-DepthMapPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "PiDiNetPreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "ColorPreprocessor",
            "BinaryPreprocessor",
            "ShufflePreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "DSINE-NormalMapPreprocessor",
            "LineArtPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "AnimeLineArtPreprocessor",
            "OpenposePreprocessor",
            "TEEDPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "DensePosePreprocessor",
            "CannyEdgePreprocessor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "preprocessor"
      ]
    },
    "output": [
      [
        "none",
        "LineartStandardPreprocessor",
        "AnimeFace_SemSegPreprocessor",
        "DepthAnythingV2Preprocessor",
        "MeshGraphormer-DepthMapPreprocessor",
        "ScribblePreprocessor",
        "Scribble_XDoG_Preprocessor",
        "Scribble_PiDiNet_Preprocessor",
        "BAE-NormalMapPreprocessor",
        "PyraCannyPreprocessor",
        "ImageLuminanceDetector",
        "ImageIntensityDetector",
        "UniFormer-SemSegPreprocessor",
        "SemSegPreprocessor",
        "M-LSDPreprocessor",
        "MediaPipe-FaceMeshPreprocessor",
        "TilePreprocessor",
        "TTPlanet_TileGF_Preprocessor",
        "TTPlanet_TileSimple_Preprocessor",
        "SAMPreprocessor",
        "DWPreprocessor",
        "AnimalPosePreprocessor",
        "HEDPreprocessor",
        "FakeScribblePreprocessor",
        "AnyLineArtPreprocessor_aux",
        "Zoe-DepthMapPreprocessor",
        "LeReS-DepthMapPreprocessor",
        "OneFormer-COCO-SemSegPreprocessor",
        "OneFormer-ADE20K-SemSegPreprocessor",
        "PiDiNetPreprocessor",
        "DepthAnythingPreprocessor",
        "Zoe_DepthAnythingPreprocessor",
        "ColorPreprocessor",
        "BinaryPreprocessor",
        "ShufflePreprocessor",
        "MiDaS-NormalMapPreprocessor",
        "MiDaS-DepthMapPreprocessor",
        "DSINE-NormalMapPreprocessor",
        "LineArtPreprocessor",
        "Manga2Anime_LineArt_Preprocessor",
        "AnimeLineArtPreprocessor",
        "OpenposePreprocessor",
        "TEEDPreprocessor",
        "Metric3D-DepthMapPreprocessor",
        "Metric3D-NormalMapPreprocessor",
        "DensePosePreprocessor",
        "CannyEdgePreprocessor"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "preprocessor"
    ],
    "name": "ControlNetPreprocessorSelector",
    "display_name": "Preprocessor Selector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "PixelPerfectResolution": {
    "input": {
      "required": {
        "original_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RESOLUTION (INT)"
    ],
    "name": "PixelPerfectResolution",
    "display_name": "Pixel Perfect Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromImage",
    "display_name": "Generation Resolution From Image",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromLatent": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromLatent",
    "display_name": "Generation Resolution From Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "HintImageEnchance": {
    "input": {
      "required": {
        "hint_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hint_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HintImageEnchance",
    "display_name": "Enchance And Resize Hint Images",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ExecuteAllControlNetPreprocessors": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ExecuteAllControlNetPreprocessors",
    "display_name": "Execute All ControlNet Preprocessors",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetAuxSimpleAddText": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ControlNetAuxSimpleAddText",
    "display_name": "ControlNetAuxSimpleAddText",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "CascadeResolutions": {
    "input": {
      "required": {
        "size_selected": [
          [
            "768x768 (1:1) - Square Medium",
            "768x1024 (3:4) - Portrait Small",
            "1024x768 (4:3) - Landscape Small",
            "1152x768 (3:2) - Wide Small",
            "768x1152 (2:3) - Portrait Medium",
            "1536x768 (2:1) - Ultra Wide Small",
            "768x1536 (1:2) - Portrait Large",
            "1024x1024 (1:1) - Square Large",
            "896x1280 (7:10) - Portrait Small HD",
            "1280x896 (10:7) - Landscape Small HD",
            "1536x896 (12:7) - Wide Medium",
            "896x1536 (7:12) - Portrait HD",
            "2048x896 (8:7) - Ultra Wide Medium",
            "896x2048 (7:8) - Portrait Ultra HD",
            "1280x1280 (1:1) - Square HD",
            "1152x1664 (9:13) - Portrait Medium Plus",
            "1664x1152 (13:9) - Landscape Medium Plus",
            "1920x1152 (5:3) - Wide Large",
            "1152x1920 (3:5) - Portrait Large HD",
            "2560x1152 (16:9) - Ultra Wide Large",
            "1152x2560 (9:16) - Portrait Ultra Large",
            "1536x1536 (1:1) - Square Extra Large",
            "1408x1920 (11:15) - Portrait Extra HD",
            "1920x1408 (15:11) - Landscape Extra HD",
            "2304x1408 (12:7) - Wide Extra Large",
            "1408x2304 (7:12) - Portrait Super HD",
            "3072x1408 (16:9) - Ultra Wide Extra Large",
            "1408x3072 (9:16) - Portrait Super Ultra HD",
            "3840x2160 (16:9) - 4K UHD",
            "2160x3840 (9:16) - 4K UHD Portrait"
          ]
        ],
        "multiply_factor": [
          "INT",
          {
            "default": 1,
            "min": 1
          }
        ],
        "manual_width": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "manual_height": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "size_selected",
        "multiply_factor",
        "manual_width",
        "manual_height"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "width",
      "height"
    ],
    "name": "CascadeResolutions",
    "display_name": "Cascade Resolutions",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-CascadeResolutions",
    "category": "Resolution",
    "output_node": true
  },
  "InsightFaceLoader_Zho": {
    "input": {
      "required": {
        "provider": [
          [
            "CUDA",
            "CPU"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "provider"
      ]
    },
    "output": [
      "INSIGHTFACEMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INSIGHTFACEMODEL"
    ],
    "name": "InsightFaceLoader_Zho",
    "display_name": "\ud83d\udcf7InsightFace Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-InstantID",
    "category": "\ud83d\udcf7InstantID",
    "output_node": false
  },
  "IDControlNetLoader": {
    "input": {
      "required": {
        "controlnet_path": [
          "STRING",
          {
            "default": "enter your path"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "controlnet_path"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "controlnet"
    ],
    "name": "IDControlNetLoader",
    "display_name": "\ud83d\udcf7ID ControlNet Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-InstantID",
    "category": "\ud83d\udcf7InstantID",
    "output_node": false
  },
  "IDBaseModelLoader_fromhub": {
    "input": {
      "required": {
        "base_model_path": [
          "STRING",
          {
            "default": "wangqixun/YamerMIX_v8"
          }
        ],
        "controlnet": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_model_path",
        "controlnet"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "IDBaseModelLoader_fromhub",
    "display_name": "\ud83d\udcf7ID Base Model Loader from hub \ud83e\udd17",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-InstantID",
    "category": "\ud83d\udcf7InstantID",
    "output_node": false
  },
  "IDBaseModelLoader_local": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realismByStableYogi_v40FP16.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ]
        ],
        "controlnet": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "controlnet"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "IDBaseModelLoader_local",
    "display_name": "\ud83d\udcf7ID Base Model Loader locally",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-InstantID",
    "category": "\ud83d\udcf7InstantID",
    "output_node": false
  },
  "Ipadapter_instantidLoader": {
    "input": {
      "required": {
        "Ipadapter_instantid_path": [
          "STRING",
          {
            "default": "enter your path"
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "ip-adapter.bin"
          }
        ],
        "pipe": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "Ipadapter_instantid_path",
        "filename",
        "pipe"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Ipadapter_instantidLoader",
    "display_name": "\ud83d\udcf7Ipadapter_instantid Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-InstantID",
    "category": "\ud83d\udcf7InstantID",
    "output_node": false
  },
  "ID_Prompt_Styler": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": "a woman, retro futurism, retro game",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "(lowres, low quality, worst quality:1.2), (text:1.2), watermark, painting, drawing, illustration, glitch, deformed, mutated, cross-eyed, ugly",
            "multiline": true
          }
        ],
        "style_name": [
          [
            "(No style)",
            "Watercolor",
            "Film Noir",
            "Neon",
            "Jungle",
            "Mars",
            "Vibrant Color",
            "Snow",
            "Line art"
          ],
          {
            "default": "Neon"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "negative_prompt",
        "style_name"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive_prompt",
      "negative_prompt"
    ],
    "name": "ID_Prompt_Styler",
    "display_name": "\ud83d\udcf7ID Prompt_Styler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-InstantID",
    "category": "\ud83d\udcf7InstantID",
    "output_node": false
  },
  "IDGenerationNode": {
    "input": {
      "required": {
        "face_image": [
          "IMAGE"
        ],
        "pipe": [
          "MODEL"
        ],
        "insightface": [
          "INSIGHTFACEMODEL"
        ],
        "positive": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "negative": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "ip_adapter_scale": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1.0,
            "display": "slider"
          }
        ],
        "controlnet_conditioning_scale": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1.0,
            "display": "slider"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 100,
            "step": 1,
            "display": "slider"
          }
        ],
        "guidance_scale": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 10,
            "display": "slider"
          }
        ],
        "enhance_face_region": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "pose_image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "face_image",
        "pipe",
        "insightface",
        "positive",
        "negative",
        "ip_adapter_scale",
        "controlnet_conditioning_scale",
        "steps",
        "guidance_scale",
        "enhance_face_region",
        "seed"
      ],
      "optional": [
        "pose_image_optional"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "IDGenerationNode",
    "display_name": "\ud83d\udcf7InstantID Generation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-InstantID",
    "category": "\ud83d\udcf7InstantID",
    "output_node": false
  },
  "LoadImageByUrl //Browser": {
    "input": {
      "required": {
        "url": [
          "STRING",
          {}
        ]
      },
      "optional": {
        "cache": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "url"
      ],
      "optional": [
        "cache"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LoadImageByUrl //Browser",
    "display_name": "Load Image By URL",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": false
  },
  "SelectInputs //Browser": {
    "input": {
      "required": {
        "input_1": [
          [
            "none"
          ],
          {}
        ],
        "input_2": [
          [
            "none"
          ],
          {}
        ],
        "input_3": [
          [
            "none"
          ],
          {}
        ],
        "input_4": [
          [
            "none"
          ],
          {}
        ],
        "preview": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_1",
        "input_2",
        "input_3",
        "input_4",
        "preview"
      ]
    },
    "output": [
      "INPUT",
      "INPUT",
      "INPUT",
      "INPUT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "input_1",
      "input_2",
      "input_3",
      "input_4"
    ],
    "name": "SelectInputs //Browser",
    "display_name": "Select Node Inputs",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": true
  },
  "XyzPlot //Browser": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {}
        ],
        "input_x": [
          "INPUT",
          {}
        ],
        "input_y": [
          "INPUT",
          {}
        ],
        "value_x": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "X values split by semicolon such as \"1girl; 1boy\""
          }
        ],
        "value_y": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "Y values split by semicolon such as \"1girl; 1boy\""
          }
        ],
        "value_z": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "Z values split by semicolon such as \"1girl; 1boy\""
          }
        ],
        "output_folder_name": [
          "STRING",
          {
            "default": "xyz_plot"
          }
        ]
      },
      "optional": {
        "input_z": [
          "INPUT",
          {}
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "input_x",
        "input_y",
        "value_x",
        "value_y",
        "value_z",
        "output_folder_name"
      ],
      "optional": [
        "input_z"
      ],
      "hidden": [
        "prompt",
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "XyzPlot //Browser",
    "display_name": "XYZ Plot",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": true
  },
  "DifyTextGenerator //Browser": {
    "input": {
      "required": {
        "dify_api_endpoint": [
          "STRING",
          {}
        ],
        "api_key": [
          "STRING",
          {}
        ]
      },
      "optional": {
        "query": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "Input as the Query field."
          }
        ],
        "inputs_json_str": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "JSON format. It will overwrite the query field above."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dify_api_endpoint",
        "api_key"
      ],
      "optional": [
        "query",
        "inputs_json_str"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "DifyTextGenerator //Browser",
    "display_name": "Dify Text Generator",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": true
  },
  "UploadToRemote //Browser": {
    "input": {
      "required": {
        "remote_url": [
          "STRING",
          {}
        ],
        "extension": [
          [
            "jpeg",
            "webp",
            "png",
            "jpg",
            "gif"
          ]
        ],
        "quality": [
          "INT",
          {
            "default": 85,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "embed_workflow": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "images": [
          "IMAGE",
          {}
        ],
        "extra": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "track_id": [
          "STRING",
          {
            "placeholder": "Optional. Post it as the track_id field."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "remote_url",
        "extension",
        "quality",
        "embed_workflow"
      ],
      "optional": [
        "images",
        "extra",
        "track_id"
      ],
      "hidden": [
        "unique_id",
        "prompt"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "UploadToRemote //Browser",
    "display_name": "Upload To Remote",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": true
  },
  "MarigoldModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "prs-eth/marigold-v1-0",
            "prs-eth/marigold-depth-lcm-v1-0",
            "prs-eth/marigold-normals-v0-1",
            "prs-eth/marigold-normals-lcm-v0-1",
            "GonzaloMG/marigold-e2e-ft-depth",
            "GonzaloMG/marigold-e2e-ft-normals"
          ],
          {
            "default": "marigold-lcm-v1-0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MARIGOLDMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "marigold_model"
    ],
    "name": "MarigoldModelLoader",
    "display_name": "MarigoldModelLoader",
    "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n  \nUses Diffusers 0.28.0 Marigold pipelines.  \nModels are automatically downloaded to  \nComfyUI/models/diffusers -folder\n",
    "python_module": "custom_nodes.ComfyUI-Marigold",
    "category": "Marigold",
    "output_node": false
  },
  "MarigoldDepthEstimation_v2": {
    "input": {
      "required": {
        "marigold_model": [
          "MARIGOLDMODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "denoise_steps": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "ensemble_size": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "processing_resolution": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 4096,
            "step": 8
          }
        ],
        "scheduler": [
          [
            "DDIMScheduler",
            "LCMScheduler"
          ],
          {
            "default": "LCMScheduler"
          }
        ],
        "use_taesd_vae": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "keep_model_loaded": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "marigold_model",
        "image",
        "seed",
        "denoise_steps",
        "ensemble_size",
        "processing_resolution",
        "scheduler",
        "use_taesd_vae"
      ],
      "optional": [
        "keep_model_loaded"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "MarigoldDepthEstimation_v2",
    "display_name": "MarigoldDepthEstimation_v2",
    "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n  \nUses Diffusers 0.28.0 Marigold pipelines.  \n",
    "python_module": "custom_nodes.ComfyUI-Marigold",
    "category": "Marigold",
    "output_node": false
  },
  "MarigoldDepthEstimation_v2_video": {
    "input": {
      "required": {
        "marigold_model": [
          "MARIGOLDMODEL"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "denoise_steps": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "processing_resolution": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 4096,
            "step": 8
          }
        ],
        "scheduler": [
          [
            "DDIMScheduler",
            "LCMScheduler"
          ],
          {
            "default": "LCMScheduler"
          }
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "use_taesd_vae": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "keep_model_loaded": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "marigold_model",
        "images",
        "seed",
        "denoise_steps",
        "processing_resolution",
        "scheduler",
        "blend_factor",
        "use_taesd_vae"
      ],
      "optional": [
        "keep_model_loaded"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "MarigoldDepthEstimation_v2_video",
    "display_name": "MarigoldDepthEstimation_v2_video",
    "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n  \nUses Diffusers 0.28.0 Marigold pipelines.  \nThis node uses the previous frame as init latent to  \nsmooth out the video.  \n",
    "python_module": "custom_nodes.ComfyUI-Marigold",
    "category": "Marigold",
    "output_node": false
  },
  "MarigoldDepthEstimation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "denoise_steps": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "n_repeat": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "regularizer_strength": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 4096,
            "step": 0.001
          }
        ],
        "reduction_method": [
          [
            "median",
            "mean"
          ],
          {
            "default": "median"
          }
        ],
        "max_iter": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "tol": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 1e-06,
            "max": 0.1,
            "step": 1e-06
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "keep_model_loaded": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "n_repeat_batch_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "use_fp16": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "scheduler": [
          [
            "DDIMScheduler",
            "DDPMScheduler",
            "PNDMScheduler",
            "DEISMultistepScheduler",
            "LCMScheduler"
          ],
          {
            "default": "DDIMScheduler"
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "model": [
          [
            "Marigold",
            "marigold-lcm-v1-0"
          ],
          {
            "default": "Marigold"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "seed",
        "denoise_steps",
        "n_repeat",
        "regularizer_strength",
        "reduction_method",
        "max_iter",
        "tol",
        "invert",
        "keep_model_loaded",
        "n_repeat_batch_size",
        "use_fp16",
        "scheduler",
        "normalize"
      ],
      "optional": [
        "model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ensembled_image"
    ],
    "name": "MarigoldDepthEstimation",
    "display_name": "MarigoldDepthEstimation",
    "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n  \n- denoise_steps: steps per depth map, increase for accuracy in exchange of processing time\n- n_repeat: amount of iterations to be ensembled into single depth map\n- n_repeat_batch_size: how many of the n_repeats are processed as a batch,  \nif you have the VRAM this can match the n_repeats for faster processing  \n- model: Marigold or it's LCM version marigold-lcm-v1-0  \nFor the LCM model use around 4 steps and the LCMScheduler  \n- scheduler: Different schedulers give bit different results  \n- invert: marigold by default produces depth map where black is front,  \nfor controlnets etc. we want the opposite.  \n- regularizer_strength, reduction_method, max_iter, tol (tolerance) are settings   \nfor the ensembling process, generally do not touch.  \n- use_fp16: if true, use fp16, if false use fp32  \nfp16 uses much less VRAM, but in some cases can lead to loss of quality.  \n",
    "python_module": "custom_nodes.ComfyUI-Marigold",
    "category": "Marigold",
    "output_node": false
  },
  "MarigoldDepthEstimationVideo": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "first_frame_denoise_steps": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "first_frame_n_repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "n_repeat_batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "keep_model_loaded": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "scheduler": [
          [
            "DDIMScheduler",
            "DDPMScheduler",
            "PNDMScheduler",
            "DEISMultistepScheduler",
            "LCMScheduler"
          ],
          {
            "default": "DEISMultistepScheduler"
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "denoise_steps": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "flow_warping": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "flow_depth_mix": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "noise_ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dtype": [
          [
            "fp16",
            "bf16",
            "fp32"
          ],
          {
            "default": "fp16"
          }
        ]
      },
      "optional": {
        "model": [
          [
            "Marigold",
            "marigold-lcm-v1-0"
          ],
          {
            "default": "Marigold"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "seed",
        "first_frame_denoise_steps",
        "first_frame_n_repeat",
        "n_repeat_batch_size",
        "invert",
        "keep_model_loaded",
        "scheduler",
        "normalize",
        "denoise_steps",
        "flow_warping",
        "flow_depth_mix",
        "noise_ratio",
        "dtype"
      ],
      "optional": [
        "model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ensembled_image"
    ],
    "name": "MarigoldDepthEstimationVideo",
    "display_name": "MarigoldDepthEstimationVideo",
    "description": "\nDiffusion-based monocular depth estimation:  \nhttps://github.com/prs-eth/Marigold  \n\nThis node is experimental version that includes optical flow  \nfor video consistency between frames.  \n\n- denoise_steps: steps per depth map, increase for accuracy in exchange of processing time\n- n_repeat: amount of iterations to be ensembled into single depth map\n- n_repeat_batch_size: how many of the n_repeats are processed as a batch,  \nif you have the VRAM this can match the n_repeats for faster processing  \n- model: Marigold or it's LCM version marigold-lcm-v1-0  \nFor the LCM model use around 4 steps and the LCMScheduler  \n- scheduler: Different schedulers give bit different results  \n- invert: marigold by default produces depth map where black is front,  \nfor controlnets etc. we want the opposite.  \n- regularizer_strength, reduction_method, max_iter, tol (tolerance) are settings   \nfor the ensembling process, generally do not touch.  \n",
    "python_module": "custom_nodes.ComfyUI-Marigold",
    "category": "Marigold",
    "output_node": false
  },
  "ColorizeDepthmap": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colorize_method": [
          [
            "Spectral",
            "terrain",
            "viridis",
            "plasma",
            "inferno",
            "magma",
            "cividis",
            "twilight",
            "rainbow",
            "gist_rainbow",
            "gist_ncar",
            "gist_earth",
            "turbo",
            "jet",
            "afmhot",
            "copper",
            "seismic",
            "hsv",
            "brg"
          ],
          {
            "default": "Spectral"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colorize_method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ColorizeDepthmap",
    "display_name": "Colorize Depthmap",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Marigold",
    "category": "Marigold",
    "output_node": false
  },
  "SaveImageOpenEXR": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI_EXR"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "file_url"
    ],
    "name": "SaveImageOpenEXR",
    "display_name": "SaveImageOpenEXR",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Marigold",
    "category": "Marigold",
    "output_node": true
  },
  "RemapDepth": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clamp": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "min",
        "max",
        "clamp"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RemapDepth",
    "display_name": "Remap Depth",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Marigold",
    "category": "Marigold",
    "output_node": false
  },
  "Context Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "steps": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "step_refiner": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "ckpt_name": [
          [
            "1.5/aziibpixelmix_v10.safetensors",
            "FLUX1/flux1-dev-fp8.safetensors",
            "SD1.5/aziibpixelmix_v10.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "atomixAnimeXL_v10.safetensors",
            "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
            "juggernautXL_juggXIByRundiffusion.safetensors",
            "meinamix.safetensors",
            "photogasm.safetensors",
            "realvisxlV40_v40LightningBakedvae.safetensors",
            "revanimated.safetensors",
            "sd_xl_base_1.0.safetensors",
            "sd_xl_refiner_1.0.safetensors",
            "theAraminta_cv5.safetensors"
          ],
          {
            "forceInput": true
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "forceInput": true
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "forceInput": true
          }
        ],
        "clip_width": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "clip_height": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "text_pos_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_pos_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ]
      },
      "hidden": {}
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed",
        "steps",
        "step_refiner",
        "cfg",
        "ckpt_name",
        "sampler",
        "scheduler",
        "clip_width",
        "clip_height",
        "text_pos_g",
        "text_pos_l",
        "text_neg_g",
        "text_neg_l",
        "mask",
        "control_net"
      ],
      "hidden": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "1.5/aziibpixelmix_v10.safetensors",
        "FLUX1/flux1-dev-fp8.safetensors",
        "SD1.5/aziibpixelmix_v10.safetensors",
        "SDXL/dreamshaper_xl_v2.1.safetensors",
        "SDXL/sd_xl_base_1.0.safetensors",
        "SDXL/sd_xl_refiner_1.0.safetensors",
        "atomixAnimeXL_v10.safetensors",
        "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
        "juggernautXL_juggXIByRundiffusion.safetensors",
        "meinamix.safetensors",
        "photogasm.safetensors",
        "realvisxlV40_v40LightningBakedvae.safetensors",
        "revanimated.safetensors",
        "sd_xl_base_1.0.safetensors",
        "sd_xl_refiner_1.0.safetensors",
        "theAraminta_cv5.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "gradient_estimation",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Big (rgthree)",
    "display_name": "Context Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "version": "FLOAT"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed"
      ],
      "hidden": [
        "version"
      ]
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context (rgthree)",
    "display_name": "Context (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Switch (rgthree)",
    "display_name": "Context Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "1.5/aziibpixelmix_v10.safetensors",
        "FLUX1/flux1-dev-fp8.safetensors",
        "SD1.5/aziibpixelmix_v10.safetensors",
        "SDXL/dreamshaper_xl_v2.1.safetensors",
        "SDXL/sd_xl_base_1.0.safetensors",
        "SDXL/sd_xl_refiner_1.0.safetensors",
        "atomixAnimeXL_v10.safetensors",
        "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
        "juggernautXL_juggXIByRundiffusion.safetensors",
        "meinamix.safetensors",
        "photogasm.safetensors",
        "realvisxlV40_v40LightningBakedvae.safetensors",
        "revanimated.safetensors",
        "sd_xl_base_1.0.safetensors",
        "sd_xl_refiner_1.0.safetensors",
        "theAraminta_cv5.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "gradient_estimation",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Switch Big (rgthree)",
    "display_name": "Context Switch Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Merge (rgthree)",
    "display_name": "Context Merge (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "1.5/aziibpixelmix_v10.safetensors",
        "FLUX1/flux1-dev-fp8.safetensors",
        "SD1.5/aziibpixelmix_v10.safetensors",
        "SDXL/dreamshaper_xl_v2.1.safetensors",
        "SDXL/sd_xl_base_1.0.safetensors",
        "SDXL/sd_xl_refiner_1.0.safetensors",
        "atomixAnimeXL_v10.safetensors",
        "duchaitenAiartSDXL_v33515LightningTCD.safetensors",
        "juggernautXL_juggXIByRundiffusion.safetensors",
        "meinamix.safetensors",
        "photogasm.safetensors",
        "realvisxlV40_v40LightningBakedvae.safetensors",
        "revanimated.safetensors",
        "sd_xl_base_1.0.safetensors",
        "sd_xl_refiner_1.0.safetensors",
        "theAraminta_cv5.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "gradient_estimation",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Merge Big (rgthree)",
    "display_name": "Context Merge Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Display Int (rgthree)": {
    "input": {
      "required": {
        "input": [
          "INT",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Int (rgthree)",
    "display_name": "Display Int (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Display Any (rgthree)": {
    "input": {
      "required": {
        "source": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "source"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Any (rgthree)",
    "display_name": "Display Any (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Lora Loader Stack (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_01": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_01": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_02": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_02": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_03": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_03": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_04": [
          [
            "None",
            "1.5/pixel-art-xl-v1.0.safetensors",
            "1.5/pixel-art-xl-v1.1.safetensors",
            "1990sAnalogStyle.safetensors",
            "Instagram_Selfie_SDXL.safetensors",
            "MJ52_v2.0.safetensors",
            "NSFWFilter.safetensors",
            "Pinterest_Selfie_V4.safetensors",
            "Pinterest_Selfie_V5_20_epochs.safetensors",
            "Pinterest_Snap_Selfie.safetensors",
            "SD1.5/pixel-art-xl-v1.0.safetensors",
            "SD1.5/pixel-art-xl-v1.1.safetensors",
            "SDXL-Lightning/sdxl_lightning_8step_lora.safetensors",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli.safetensors",
            "badquality.safetensors",
            "blurxl.safetensors",
            "dark.safetensors",
            "envyzoomslider.safetensors",
            "hand_5_5.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "lcm.safetensors",
            "lcm_sdxl.safetensors",
            "lcmxl.safetensors",
            "midjourney.safetensors",
            "more_details.safetensors",
            "outdoor_selife_epoch_10.safetensors",
            "selfie_epoch_10.safetensors"
          ]
        ],
        "strength_04": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_01",
        "strength_01",
        "lora_02",
        "strength_02",
        "lora_03",
        "strength_03",
        "lora_04",
        "strength_04"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Loader Stack (rgthree)",
    "display_name": "Lora Loader Stack (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Seed (rgthree)": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": -1125899906842624,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEED"
    ],
    "name": "Seed (rgthree)",
    "display_name": "Seed (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Inset Crop (rgthree)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "measurement": [
          [
            "Pixels",
            "Percentage"
          ]
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "measurement",
        "left",
        "right",
        "top",
        "bottom"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Inset Crop (rgthree)",
    "display_name": "Image Inset Crop (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS",
            "1.5/pixel-art-xl-v1.0",
            "1.5/pixel-art-xl-v1.1",
            "1990sAnalogStyle",
            "Instagram_Selfie_SDXL",
            "MJ52_v2.0",
            "NSFWFilter",
            "Pinterest_Selfie_V4",
            "Pinterest_Selfie_V5_20_epochs",
            "Pinterest_Snap_Selfie",
            "SD1.5/pixel-art-xl-v1.0",
            "SD1.5/pixel-art-xl-v1.1",
            "SDXL-Lightning/sdxl_lightning_8step_lora",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli",
            "badquality",
            "blurxl",
            "dark",
            "envyzoomslider",
            "hand_5_5",
            "ip-adapter-faceid-plusv2_sd15_lora",
            "ip-adapter-faceid-plusv2_sdxl_lora",
            "ip-adapter-faceid_sd15_lora",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora",
            "lcm",
            "lcm_sdxl",
            "lcmxl",
            "midjourney",
            "more_details",
            "outdoor_selife_epoch_10",
            "selfie_epoch_10"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "insert_lora",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT"
    ],
    "name": "Power Prompt (rgthree)",
    "display_name": "Power Prompt (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt - Simple (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_clip",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "TEXT"
    ],
    "name": "Power Prompt - Simple (rgthree)",
    "display_name": "Power Prompt - Simple (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "KSampler Config (rgthree)": {
    "input": {
      "required": {
        "steps_total": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "refiner_step": [
          "INT",
          {
            "default": 24,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "steps_total",
        "refiner_step",
        "cfg",
        "sampler_name",
        "scheduler"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "gradient_estimation",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ]
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "STEPS",
      "REFINER_STEP",
      "CFG",
      "SAMPLER",
      "SCHEDULER"
    ],
    "name": "KSampler Config (rgthree)",
    "display_name": "KSampler Config (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Empty Latent Image (rgthree)": {
    "input": {
      "required": {
        "dimensions": [
          [
            "1536 x 640   (landscape)",
            "1344 x 768   (landscape)",
            "1216 x 832   (landscape)",
            "1152 x 896   (landscape)",
            "1024 x 1024  (square)",
            " 896 x 1152  (portrait)",
            " 832 x 1216  (portrait)",
            " 768 x 1344  (portrait)",
            " 640 x 1536  (portrait)"
          ],
          {
            "default": "1024 x 1024  (square)"
          }
        ],
        "clip_scale": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.5
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "clip_scale",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "CLIP_WIDTH",
      "CLIP_HEIGHT"
    ],
    "name": "SDXL Empty Latent Image (rgthree)",
    "display_name": "SDXL Empty Latent Image (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Positive (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS",
            "1.5/pixel-art-xl-v1.0",
            "1.5/pixel-art-xl-v1.1",
            "1990sAnalogStyle",
            "Instagram_Selfie_SDXL",
            "MJ52_v2.0",
            "NSFWFilter",
            "Pinterest_Selfie_V4",
            "Pinterest_Selfie_V5_20_epochs",
            "Pinterest_Snap_Selfie",
            "SD1.5/pixel-art-xl-v1.0",
            "SD1.5/pixel-art-xl-v1.1",
            "SDXL-Lightning/sdxl_lightning_8step_lora",
            "SDXL/StudioGhibli.Redmond-StdGBRRedmAF-StudioGhibli",
            "badquality",
            "blurxl",
            "dark",
            "envyzoomslider",
            "hand_5_5",
            "ip-adapter-faceid-plusv2_sd15_lora",
            "ip-adapter-faceid-plusv2_sdxl_lora",
            "ip-adapter-faceid_sd15_lora",
            "ipadapter/ip-adapter-faceid-plusv2_sdxl_lora",
            "lcm",
            "lcm_sdxl",
            "lcmxl",
            "midjourney",
            "more_details",
            "outdoor_selife_epoch_10",
            "selfie_epoch_10"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_lora",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Positive (rgthree)",
    "display_name": "SDXL Power Prompt - Positive (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Simple / Negative (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "display_name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Any Switch (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "Any Switch (rgthree)",
    "display_name": "Any Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Comparer (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_a",
        "image_b"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Comparer (rgthree)",
    "display_name": "Image Comparer (rgthree)",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Power Lora Loader (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ]
      },
      "optional": {},
      "hidden": {}
    },
    "input_order": {
      "required": [
        "model",
        "clip"
      ],
      "optional": [],
      "hidden": []
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Power Lora Loader (rgthree)",
    "display_name": "Power Lora Loader (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "IPAdapter": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "weight_type": [
          [
            "standard",
            "prompt is more important",
            "style transfer"
          ]
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "start_at",
        "end_at",
        "weight_type"
      ],
      "optional": [
        "attn_mask"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapter",
    "display_name": "IPAdapter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterAdvanced",
    "display_name": "IPAdapter Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "encode_batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling",
        "encode_batch_size"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterBatch",
    "display_name": "IPAdapter Batch (Adv.)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterFaceID": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "face_image"
    ],
    "name": "IPAdapterFaceID",
    "display_name": "IPAdapter FaceID",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAdapterFaceIDKolors": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_kolors": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_kolors",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "face_image"
    ],
    "name": "IPAdapterFaceIDKolors",
    "display_name": "IPAdapter FaceID Kolors",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAAdapterFaceIDBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "face_image"
    ],
    "name": "IPAAdapterFaceIDBatch",
    "display_name": "IPAdapter FaceID Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAdapterTiled": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "sharpening",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "tiles",
      "masks"
    ],
    "name": "IPAdapterTiled",
    "display_name": "IPAdapter Tiled",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/tiled",
    "output_node": false
  },
  "IPAdapterTiledBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "encode_batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "sharpening",
        "embeds_scaling",
        "encode_batch_size"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "tiles",
      "masks"
    ],
    "name": "IPAdapterTiledBatch",
    "display_name": "IPAdapter Tiled Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/tiled",
    "output_node": false
  },
  "IPAdapterEmbeds": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "pos_embed": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "neg_embed": [
          "EMBEDS"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "pos_embed",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "neg_embed",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterEmbeds",
    "display_name": "IPAdapter Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterEmbedsBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "pos_embed": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "neg_embed": [
          "EMBEDS"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "pos_embed",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "neg_embed",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterEmbedsBatch",
    "display_name": "IPAdapter Embeds Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterStyleComposition": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image_style": [
          "IMAGE"
        ],
        "image_composition": [
          "IMAGE"
        ],
        "weight_style": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_composition": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "expand_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ],
          {
            "default": "average"
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image_style",
        "image_composition",
        "weight_style",
        "weight_composition",
        "expand_style",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterStyleComposition",
    "display_name": "IPAdapter Style & Composition SDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/style_composition",
    "output_node": false
  },
  "IPAdapterStyleCompositionBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image_style": [
          "IMAGE"
        ],
        "image_composition": [
          "IMAGE"
        ],
        "weight_style": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_composition": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "expand_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image_style",
        "image_composition",
        "weight_style",
        "weight_composition",
        "expand_style",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterStyleCompositionBatch",
    "display_name": "IPAdapter Style & Composition Batch SDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/style_composition",
    "output_node": false
  },
  "IPAdapterMS": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "layer_weights": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "layer_weights"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterMS",
    "display_name": "IPAdapter Mad Scientist",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/dev",
    "output_node": false
  },
  "IPAdapterClipVisionEnhancer": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "enhance_tiles": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 16
          }
        ],
        "enhance_ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "enhance_tiles",
        "enhance_ratio"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterClipVisionEnhancer",
    "display_name": "IPAdapter ClipVision Enhancer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/dev",
    "output_node": false
  },
  "IPAdapterClipVisionEnhancerBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "enhance_tiles": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 16
          }
        ],
        "enhance_ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "encode_batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling",
        "enhance_tiles",
        "enhance_ratio",
        "encode_batch_size"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterClipVisionEnhancerBatch",
    "display_name": "IPAdapter ClipVision Enhancer Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/dev",
    "output_node": false
  },
  "IPAdapterFromParams": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "ipadapter_params": [
          "IPADAPTER_PARAMS"
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "ipadapter_params",
        "combine_embeds",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterFromParams",
    "display_name": "IPAdapter from Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  },
  "IPAdapterPreciseStyleTransfer": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "style_boost": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -5,
            "max": 5,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "style_boost",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterPreciseStyleTransfer",
    "display_name": "IPAdapter Precise Style Transfer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterPreciseStyleTransferBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "style_boost": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -5,
            "max": 5,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "style_boost",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterPreciseStyleTransferBatch",
    "display_name": "IPAdapter Precise Style Transfer Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterPreciseComposition": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "composition_boost": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -5,
            "max": 5,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "composition_boost",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterPreciseComposition",
    "display_name": "IPAdapter Precise Composition",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterPreciseCompositionBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "composition_boost": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -5,
            "max": 5,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "composition_boost",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterPreciseCompositionBatch",
    "display_name": "IPAdapter Precise Composition Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterUnifiedLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoader",
    "display_name": "IPAdapter Unified Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterUnifiedLoaderFaceID": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "FACEID",
            "FACEID PLUS - SD1.5 only",
            "FACEID PLUS V2",
            "FACEID PORTRAIT (style transfer)",
            "FACEID PORTRAIT UNNORM - SDXL only (strong)"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset",
        "lora_strength",
        "provider"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoaderFaceID",
    "display_name": "IPAdapter Unified Loader FaceID",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAdapterModelLoader": {
    "input": {
      "required": {
        "ipadapter_file": [
          [
            "ip-adapter-anime.safetensors",
            "ip-adapter-faceid-plusv2_sd15.bin",
            "ip-adapter-faceid-plusv2_sdxl.bin",
            "ip-adapter-faceid-portrait-v11_sd15.bin",
            "ip-adapter-faceid-portrait_sdxl.bin",
            "ip-adapter-faceid-portrait_sdxl_unnorm.bin",
            "ip-adapter-faceid_sd15.bin",
            "ip-adapter-full-face_sd15.safetensors",
            "ip-adapter-plus-face_sd15.safetensors",
            "ip-adapter-plus-face_sdxl_vit-h.safetensors",
            "ip-adapter-plus_sd15.safetensors",
            "ip-adapter-plus_sdxl_vit-h.safetensors",
            "ip-adapter_sd15.safetensors",
            "ip-adapter_sd15_light.safetensors",
            "ip-adapter_sd15_light_v11.bin",
            "ip-adapter_sd15_vit-G.safetensors",
            "ip-adapter_sdxl.safetensors",
            "ip-adapter_sdxl_vit-h.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter_file"
      ]
    },
    "output": [
      "IPADAPTER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IPADAPTER"
    ],
    "name": "IPAdapterModelLoader",
    "display_name": "IPAdapter Model Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterInsightFaceLoader": {
    "input": {
      "required": {
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "model_name": [
          [
            "buffalo_l",
            "antelopev2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "provider",
        "model_name"
      ]
    },
    "output": [
      "INSIGHTFACE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INSIGHTFACE"
    ],
    "name": "IPAdapterInsightFaceLoader",
    "display_name": "IPAdapter InsightFace Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterUnifiedLoaderCommunity": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "Composition",
            "Kolors"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoaderCommunity",
    "display_name": "IPAdapter Unified Loader Community",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterEncoder": {
    "input": {
      "required": {
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter",
        "image",
        "weight"
      ],
      "optional": [
        "mask",
        "clip_vision"
      ]
    },
    "output": [
      "EMBEDS",
      "EMBEDS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pos_embed",
      "neg_embed"
    ],
    "name": "IPAdapterEncoder",
    "display_name": "IPAdapter Encoder",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterCombineEmbeds": {
    "input": {
      "required": {
        "embed1": [
          "EMBEDS"
        ],
        "method": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average",
            "max",
            "min"
          ]
        ]
      },
      "optional": {
        "embed2": [
          "EMBEDS"
        ],
        "embed3": [
          "EMBEDS"
        ],
        "embed4": [
          "EMBEDS"
        ],
        "embed5": [
          "EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "embed1",
        "method"
      ],
      "optional": [
        "embed2",
        "embed3",
        "embed4",
        "embed5"
      ]
    },
    "output": [
      "EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "EMBEDS"
    ],
    "name": "IPAdapterCombineEmbeds",
    "display_name": "IPAdapter Combine Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterNoise": {
    "input": {
      "required": {
        "type": [
          [
            "fade",
            "dissolve",
            "gaussian",
            "shuffle"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ]
      },
      "optional": {
        "image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "type",
        "strength",
        "blur"
      ],
      "optional": [
        "image_optional"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "IPAdapterNoise",
    "display_name": "IPAdapter Noise",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "PrepImageForClipVision": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "LANCZOS",
            "BICUBIC",
            "HAMMING",
            "BILINEAR",
            "BOX",
            "NEAREST"
          ]
        ],
        "crop_position": [
          [
            "top",
            "bottom",
            "left",
            "right",
            "center",
            "pad"
          ]
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "interpolation",
        "crop_position",
        "sharpening"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PrepImageForClipVision",
    "display_name": "Prep Image For ClipVision",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "IPAdapterSaveEmbeds": {
    "input": {
      "required": {
        "embeds": [
          "EMBEDS"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "IP_embeds"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "embeds",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "IPAdapterSaveEmbeds",
    "display_name": "IPAdapter Save Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": true
  },
  "IPAdapterLoadEmbeds": {
    "input": {
      "required": {
        "embeds": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "embeds"
      ]
    },
    "output": [
      "EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "EMBEDS"
    ],
    "name": "IPAdapterLoadEmbeds",
    "display_name": "IPAdapter Load Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterWeights": {
    "input": {
      "required": {
        "weights": [
          "STRING",
          {
            "default": "1.0, 0.0",
            "multiline": true
          }
        ],
        "timing": [
          [
            "custom",
            "linear",
            "ease_in_out",
            "ease_in",
            "ease_out",
            "random"
          ],
          {
            "default": "linear"
          }
        ],
        "frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "end_frame": [
          "INT",
          {
            "default": 9999,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "add_starting_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "add_ending_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "method": [
          [
            "full batch",
            "shift batches",
            "alternate batches"
          ],
          {
            "default": "full batch"
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "weights",
        "timing",
        "frames",
        "start_frame",
        "end_frame",
        "add_starting_frames",
        "add_ending_frames",
        "method"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "INT",
      "IMAGE",
      "IMAGE",
      "WEIGHTS_STRATEGY"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "weights",
      "weights_invert",
      "total_frames",
      "image_1",
      "image_2",
      "weights_strategy"
    ],
    "name": "IPAdapterWeights",
    "display_name": "IPAdapter Weights",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterCombineWeights": {
    "input": {
      "required": {
        "weights_1": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "weights_2": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_1",
        "weights_2"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "weights",
      "count"
    ],
    "name": "IPAdapterCombineWeights",
    "display_name": "IPAdapter Combine Weights",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "IPAdapterWeightsFromStrategy": {
    "input": {
      "required": {
        "weights_strategy": [
          "WEIGHTS_STRATEGY"
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_strategy"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "INT",
      "IMAGE",
      "IMAGE",
      "WEIGHTS_STRATEGY"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "weights",
      "weights_invert",
      "total_frames",
      "image_1",
      "image_2",
      "weights_strategy"
    ],
    "name": "IPAdapterWeightsFromStrategy",
    "display_name": "IPAdapter Weights From Strategy",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterPromptScheduleFromWeightsStrategy": {
    "input": {
      "required": {
        "weights_strategy": [
          "WEIGHTS_STRATEGY"
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_strategy",
        "prompt"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "prompt_schedule"
    ],
    "name": "IPAdapterPromptScheduleFromWeightsStrategy",
    "display_name": "Prompt Schedule From Weights Strategy",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterRegionalConditioning": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.05
          }
        ],
        "prompt_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_weight",
        "prompt_weight",
        "weight_type",
        "start_at",
        "end_at"
      ],
      "optional": [
        "mask",
        "positive",
        "negative"
      ]
    },
    "output": [
      "IPADAPTER_PARAMS",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IPADAPTER_PARAMS",
      "POSITIVE",
      "NEGATIVE"
    ],
    "name": "IPAdapterRegionalConditioning",
    "display_name": "IPAdapter Regional Conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  },
  "IPAdapterCombineParams": {
    "input": {
      "required": {
        "params_1": [
          "IPADAPTER_PARAMS"
        ],
        "params_2": [
          "IPADAPTER_PARAMS"
        ]
      },
      "optional": {
        "params_3": [
          "IPADAPTER_PARAMS"
        ],
        "params_4": [
          "IPADAPTER_PARAMS"
        ],
        "params_5": [
          "IPADAPTER_PARAMS"
        ]
      }
    },
    "input_order": {
      "required": [
        "params_1",
        "params_2"
      ],
      "optional": [
        "params_3",
        "params_4",
        "params_5"
      ]
    },
    "output": [
      "IPADAPTER_PARAMS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IPADAPTER_PARAMS"
    ],
    "name": "IPAdapterCombineParams",
    "display_name": "IPAdapter Combine Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  }
}