#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import requests
from pathlib import Path
from tqdm import tqdm
from PIL import Image
from io import BytesIO
import datetime


class ImageDownloader:
    """For downloading and saving images generated by ComfyUI"""
    
    def __init__(self, output_dir="output"):
        """
        Initialize image downloader
        
        Args:
            output_dir: Image output directory
        """
        self.output_dir = output_dir
        self._ensure_output_dir_exists()
    
    def _ensure_output_dir_exists(self):
        """Ensure output directory exists"""
        os.makedirs(self.output_dir, exist_ok=True)
    
    def _generate_filename(self, original_filename=None, prefix=None, extension=".png"):
        """
        Generate filename
        
        Args:
            original_filename: Original filename
            prefix: Filename prefix
            extension: File extension
            
        Returns:
            Generated filename
        """
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        if original_filename:
            # Keep original filename but add timestamp to avoid conflicts
            basename = Path(original_filename).stem
            return f"{basename}_{timestamp}{extension}"
        elif prefix:
            return f"{prefix}_{timestamp}{extension}"
        else:
            return f"image_{timestamp}{extension}"
    
    def download_image(self, image_url, filename=None, prefix=None, proxy=None):
        """
        Download a single image
        
        Args:
            image_url: Image URL
            filename: Filename to save as
            prefix: Filename prefix (if filename not provided)
            proxy: Proxy server address, e.g. "http://127.0.0.1:1080" or "socks5://127.0.0.1:1080"
            
        Returns:
            Path to saved image
        """
        try:
            # Set up proxy
            proxies = None
            if proxy:
                proxies = {
                    "http": proxy,
                    "https": proxy
                }
                print(f"Using proxy to download image: {proxy}")
            
            response = requests.get(image_url, stream=True, proxies=proxies)
            response.raise_for_status()
            
            # Determine filename
            if not filename:
                filename = self._generate_filename(prefix=prefix)
            
            # Save path
            save_path = Path(self.output_dir) / filename
            
            # Download image
            file_size = int(response.headers.get('content-length', 0))
            progress = tqdm(total=file_size, unit='B', unit_scale=True, desc=f"Downloading {filename}")
            
            with open(save_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        progress.update(len(chunk))
            
            progress.close()
            print(f"Image saved to: {save_path}")
            return str(save_path)
        
        except requests.RequestException as e:
            print(f"Failed to download image: {str(e)}")
            return None
    
    def download_images(self, server_url, images_info, proxy=None, delete_after_download=False):
        """
        Download multiple images
        
        Args:
            server_url: ComfyUI server URL
            images_info: Image information list
            proxy: Proxy server address, e.g. "http://127.0.0.1:1080" or "socks5://127.0.0.1:1080"
            delete_after_download: Whether to delete images from server after download
            
        Returns:
            List of paths to saved images
        """
        saved_paths = []
        
        # Ensure server URL is correct (remove /api if present)
        base_url = server_url
        if base_url.endswith('/api'):
            base_url = base_url[:-4]
        
        for image_info in images_info:
            filename = image_info["filename"]
            subfolder = image_info.get("subfolder", "")
            
            # Prefer to use image data if available
            if "image_data" in image_info:
                try:
                    # Decode image data from base64
                    import base64
                    from io import BytesIO
                    from PIL import Image
                    
                    # Extract base64 data (may include header)
                    image_data = image_info["image_data"]
                    if "," in image_data:  # Handle "data:image/png;base64," format
                        image_data = image_data.split(",", 1)[1]
                    
                    image_bytes = base64.b64decode(image_data)
                    image = Image.open(BytesIO(image_bytes))
                    
                    # Save path
                    save_path = os.path.join(self.output_dir, filename)
                    image.save(save_path)
                    
                    print(f"Image saved to: {save_path}")
                    saved_paths.append(save_path)
                    
                    # Delete from server if requested
                    if delete_after_download:
                        self._delete_server_image(base_url, filename, subfolder, proxy)
                    
                    continue
                except Exception as e:
                    print(f"Failed to process image data, will try URL download: {str(e)}")
            
            # Construct image URL
            if subfolder:
                image_url = f"{base_url}/view?filename={filename}&subfolder={subfolder}"
            else:
                image_url = f"{base_url}/view?filename={filename}"
            
            # Download image
            saved_path = self.download_image(image_url, filename, proxy=proxy)
            if saved_path:
                saved_paths.append(saved_path)
                
                # Delete from server if requested
                if delete_after_download:
                    self._delete_server_image(base_url, filename, subfolder, proxy)
        
        return saved_paths
    
    def _delete_server_image(self, base_url, filename, subfolder="", proxy=None):
        """
        Delete image from server
        
        Args:
            base_url: ComfyUI server base URL
            filename: Image filename
            subfolder: Subfolder name
            proxy: Proxy server address
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Set up proxy
            proxies = None
            if proxy:
                proxies = {
                    "http": proxy,
                    "https": proxy
                }
            
            # Try different API endpoints for deleting images
            
            # 1. First try comfyui_extra_api endpoint (DELETE method)
            extra_api_url = f"{base_url}/comfyapi/v1/output-images/{filename}"
            params = {}
            if subfolder:
                params["subfolder"] = subfolder
            
            try:
                response = requests.delete(extra_api_url, params=params, proxies=proxies)
                if response.status_code == 200:
                    print(f"Successfully deleted image {filename} from server using comfyui_extra_api")
                    return True
            except Exception as e:
                print(f"Failed to delete using comfyui_extra_api: {str(e)}")
            
            # 2. Try standard delete_image endpoint (POST method)
            delete_url = f"{base_url}/delete_image"
            data = {"filename": filename}
            if subfolder:
                data["subfolder"] = subfolder
                
            response = requests.post(delete_url, json=data, proxies=proxies)
            
            # Check if successful
            if response.status_code == 200:
                print(f"Successfully deleted image {filename} from server")
                return True
            else:
                print(f"Failed to delete image {filename} from server: {response.status_code}: {response.reason}")
                print("Note: Image deletion requires ComfyUI with delete_image endpoint or comfyui_extra_api plugin")
                print("Install comfyui_extra_api: git clone https://github.com/injet-zhou/comfyui_extra_api.git")
                return False
                
        except Exception as e:
            print(f"Error deleting image from server: {str(e)}")
            return False
    
    def save_image_from_bytes(self, image_bytes, filename=None, prefix=None):
        """
        Save image from byte data
        
        Args:
            image_bytes: Image byte data
            filename: Filename to save as
            prefix: Filename prefix (if filename not provided)
            
        Returns:
            Path to saved image
        """
        try:
            # Determine filename
            if not filename:
                filename = self._generate_filename(prefix=prefix)
            
            # Save path
            save_path = Path(self.output_dir) / filename
            
            # Save image
            image = Image.open(BytesIO(image_bytes))
            image.save(save_path)
            
            print(f"Image saved to: {save_path}")
            return str(save_path)
        
        except Exception as e:
            print(f"Failed to save image: {str(e)}")
            return None 